
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e4  080030e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003100  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003100  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc3  00000000  00000000  00029621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f9d  00000000  00000000  0002c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bb6  00000000  00000000  0004115d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000818e5  00000000  00000000  0004ad13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc5f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002010  00000000  00000000  000cc648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002fe0 	.word	0x08002fe0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002fe0 	.word	0x08002fe0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <BOOT_TRANSFER_CNTRL>:
 * @brief 	Jump and transfer control into a program image at a specific location
 * @note	The function shouldn't return, if returned, an error has occurred.
 * @param   None
 * @retval  None
 */
void BOOT_TRANSFER_CNTRL(uint32_t ImageAddress){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	 * First value in the image should be a valid stack pointer address,
	 * A valid stack pointer address should be located at RAM,
	 * So we check if it's in the RAM or not.
	 */

	uint32_t _stackPtr = * (uint32_t *) ImageAddress;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	617b      	str	r3, [r7, #20]
    if(RAM_ADDR == (_stackPtr & RAM_ADDR))
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d03f      	beq.n	8000570 <BOOT_TRANSFER_CNTRL+0x98>
    {

    	/* perform system reset */
    	BOOT_SYS_RESET();
 80004f0:	f000 f888 	bl	8000604 <BOOT_SYS_RESET>

        /* Check jump address */

        /* Enable SYSCFG clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <BOOT_TRANSFER_CNTRL+0xa0>)
 80004fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fc:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <BOOT_TRANSFER_CNTRL+0xa0>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000502:	6453      	str	r3, [r2, #68]	; 0x44
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <BOOT_TRANSFER_CNTRL+0xa0>)
 8000506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]

        /* Set jump to the reset handler */
        void (* Tranfer_ImageLocation)(void) = (void *)(*((uint32_t *)(ImageAddress + 4)));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3304      	adds	r3, #4
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	613b      	str	r3, [r7, #16]


        if(SYS_MEM_ADDR == ImageAddress)    // Transfer to the System memory
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a18      	ldr	r2, [pc, #96]	; (800057c <BOOT_TRANSFER_CNTRL+0xa4>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d10c      	bne.n	800053a <BOOT_TRANSFER_CNTRL+0x62>
        {
          /* Map address 0x0 to system memory */
        	SET_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_MEM_MODE_0);
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <BOOT_TRANSFER_CNTRL+0xa8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <BOOT_TRANSFER_CNTRL+0xa8>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]
        	CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_MEM_MODE_1);
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <BOOT_TRANSFER_CNTRL+0xa8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <BOOT_TRANSFER_CNTRL+0xa8>)
 8000532:	f023 0302 	bic.w	r3, r3, #2
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	e012      	b.n	8000560 <BOOT_TRANSFER_CNTRL+0x88>
        }

        else if (FLASH_MEM_ADDR <= ImageAddress )	// Transfer to the Flash memory
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000540:	d30e      	bcc.n	8000560 <BOOT_TRANSFER_CNTRL+0x88>
        {

            /* Map address 0x0 to Flash memory */
        	CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_MEM_MODE_0 | SYSCFG_MEMRMP_MEM_MODE_1);
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <BOOT_TRANSFER_CNTRL+0xa8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <BOOT_TRANSFER_CNTRL+0xa8>)
 8000548:	f023 0303 	bic.w	r3, r3, #3
 800054c:	6013      	str	r3, [r2, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800054e:	f3bf 8f5f 	dmb	sy
}
 8000552:	bf00      	nop

          /* Vector Table Relocation in Internal FLASH */
          __DMB();
          WRITE_REG(SCB->VTOR, ImageAddress);
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <BOOT_TRANSFER_CNTRL+0xac>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f383 8808 	msr	MSP, r3
}
 800056a:	bf00      	nop

        /* Set stack pointer */
        __set_MSP(_stackPtr);

        /* Jump */
        Tranfer_ImageLocation();
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4798      	blx	r3
	  else
	  {
		/* No valid stack pointer */
		/*Do Nothing , just return*/
	  }
}
 8000570:	bf00      	nop
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	1fff0000 	.word	0x1fff0000
 8000580:	40013800 	.word	0x40013800
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <BOOT_CPY_IMAGE>:
 * @note	The function shouldn't return, if returned, an error has occurred.
 * @param   src image address , dest image address , size of the image by bytes
*  @retval HAL_StatusTypeDef {HAL_OK or HAL_ERROR}

 */
HAL_StatusTypeDef BOOT_CPY_IMAGE(AddressType srcAddress ,AddressType destAddress, SizeType size){
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]


	HAL_StatusTypeDef state = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	77fb      	strb	r3, [r7, #31]
	DataType  Data;

	uint8_t resend_count = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	75fb      	strb	r3, [r7, #23]
	uint32_t idx = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]

	while (idx < size)
 80005a0:	e026      	b.n	80005f0 <BOOT_CPY_IMAGE+0x68>
	{

		if (!resend_count){
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d104      	bne.n	80005b2 <BOOT_CPY_IMAGE+0x2a>

			/*Read the current memory location*/
			Data = * ((DataType *) (srcAddress+idx));
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	4413      	add	r3, r2
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	61bb      	str	r3, [r7, #24]

		}

		// try 3 times as maximum to write the word
		// If exceeded 3, abort writing.
		if (resend_count >= 3){
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d901      	bls.n	80005bc <BOOT_CPY_IMAGE+0x34>

			return state;
 80005b8:	7ffb      	ldrb	r3, [r7, #31]
 80005ba:	e01e      	b.n	80005fa <BOOT_CPY_IMAGE+0x72>
		}

		/*Try writing the data*/
		state = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destAddress+idx, Data);
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	18d1      	adds	r1, r2, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2200      	movs	r2, #0
 80005c6:	461c      	mov	r4, r3
 80005c8:	4615      	mov	r5, r2
 80005ca:	4622      	mov	r2, r4
 80005cc:	462b      	mov	r3, r5
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 fe28 	bl	8001224 <HAL_FLASH_Program>
 80005d4:	4603      	mov	r3, r0
 80005d6:	77fb      	strb	r3, [r7, #31]

		/*if error occurred increase the resend counter */
		if (state != HAL_OK){
 80005d8:	7ffb      	ldrb	r3, [r7, #31]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d003      	beq.n	80005e6 <BOOT_CPY_IMAGE+0x5e>
			resend_count++;
 80005de:	7dfb      	ldrb	r3, [r7, #23]
 80005e0:	3301      	adds	r3, #1
 80005e2:	75fb      	strb	r3, [r7, #23]
 80005e4:	e004      	b.n	80005f0 <BOOT_CPY_IMAGE+0x68>
		}
		else   // the operation has succeeded
		{
			resend_count = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	75fb      	strb	r3, [r7, #23]
			idx += 4;
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	3304      	adds	r3, #4
 80005ee:	613b      	str	r3, [r7, #16]
	while (idx < size)
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3d4      	bcc.n	80005a2 <BOOT_CPY_IMAGE+0x1a>
		}

	}

	return state;
 80005f8:	7ffb      	ldrb	r3, [r7, #31]


}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000604 <BOOT_SYS_RESET>:
/**
 * @brief 	clears all the configuration that the Boot Loader made and made every thing as just a reset happened;
 * @param   none
 * @retval  none
 */
static void BOOT_SYS_RESET(void){
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop

    /* Disable all interrupts */
    __disable_irq();

    /* Reset GPIOA and DMA2 */
    RCC->AHB1RSTR = RCC_AHB1RSTR_GPIOARST;
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800060e:	2201      	movs	r2, #1
 8000610:	611a      	str	r2, [r3, #16]

    /* Release reset */
    RCC->AHB1RSTR = 0;
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]

    /* Reset USART1 */
    RCC->APB2RSTR = RCC_APB2RSTR_USART1RST;
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800061a:	2210      	movs	r2, #16
 800061c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Release reset */
    RCC->APB2RSTR = 0;
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24

    /* Reset RCC */
    /* Set HSION bit to the reset value */
    RCC->CR |= RCC_CR_HSION;
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

    /* Wait till HSI is ready */
    while(RCC_CR_HSIRDY != (RCC_CR_HSIRDY & RCC->CR))
 8000630:	bf00      	nop
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f9      	bne.n	8000632 <BOOT_SYS_RESET+0x2e>
    {
      /* Waiting */
    }

    /* Set HSITRIM[4:0] bits to the reset value */
    RCC->CR |= RCC_CR_HSITRIM_4;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6013      	str	r3, [r2, #0]

    /* Reset CFGR register */
    RCC->CFGR = 0;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]

    /* Wait till clock switch is ready and
     * HSI oscillator selected as system clock */
    while(0 != (RCC_CFGR_SWS & RCC->CFGR))
 8000650:	bf00      	nop
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f003 030c 	and.w	r3, r3, #12
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f9      	bne.n	8000652 <BOOT_SYS_RESET+0x4e>
    {
      /* Waiting */
    }

    /* Clear HSEON, HSEBYP and CSSON bits */
    RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000664:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000668:	6013      	str	r3, [r2, #0]

    /* Wait till HSE is disabled */
    while(0 != (RCC_CR_HSERDY & RCC->CR))
 800066a:	bf00      	nop
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f9      	bne.n	800066c <BOOT_SYS_RESET+0x68>
    {
      /* Waiting */
    }

    /* Clear PLLON bit */
    RCC->CR &= ~RCC_CR_PLLON;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 800067e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000682:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is disabled */
    while(0 != (RCC_CR_PLLRDY & RCC->CR))
 8000684:	bf00      	nop
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f9      	bne.n	8000686 <BOOT_SYS_RESET+0x82>
    {
      /* Waiting */
    }

    /* Reset PLLCFGR register to default value */
    RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <BOOT_SYS_RESET+0xb0>)
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <BOOT_SYS_RESET+0xb4>)
 8000696:	605a      	str	r2, [r3, #4]
        | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;

    /* Reset SysTick */
    SysTick->CTRL = 0x00000000;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <BOOT_SYS_RESET+0xb8>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0x00000000;
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <BOOT_SYS_RESET+0xb8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
    SysTick->VAL  = 0x00000000;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <BOOT_SYS_RESET+0xb8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]


}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40023800 	.word	0x40023800
 80006b8:	04003010 	.word	0x04003010
 80006bc:	e000e010 	.word	0xe000e010

080006c0 <PROCESS_INIT>:
 * @brief	Proccess initialization function
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_INIT (void){
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

	Process_Handlers[GET_CMD]              =		 PROCESS_GET_CMD;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <PROCESS_INIT+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <PROCESS_INIT+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
	Process_Handlers[FLASH_UNLOCK_CMD]     =		 PROCESS_FLASH_UNLOCK_CMD;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <PROCESS_INIT+0x64>)
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <PROCESS_INIT+0x6c>)
 80006ce:	605a      	str	r2, [r3, #4]
	Process_Handlers[FLASH_LOCK_CMD]       = 		 PROCESS_FLASH_LOCK_CMD;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <PROCESS_INIT+0x64>)
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <PROCESS_INIT+0x70>)
 80006d4:	609a      	str	r2, [r3, #8]
	Process_Handlers[FLASH_PROG_CMD]       =		 PROCESS_FLASH_PROG_CMD;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <PROCESS_INIT+0x64>)
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <PROCESS_INIT+0x74>)
 80006da:	60da      	str	r2, [r3, #12]
	Process_Handlers[FLASH_READ_CMD] 	   =		 PROCESS_FLASH_READ_CMD;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <PROCESS_INIT+0x64>)
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <PROCESS_INIT+0x78>)
 80006e0:	611a      	str	r2, [r3, #16]
	Process_Handlers[FLASH_ERASE_CMD] 	   =		 PROCESS_FLASH_ERASE_CMD;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <PROCESS_INIT+0x64>)
 80006e4:	4a15      	ldr	r2, [pc, #84]	; (800073c <PROCESS_INIT+0x7c>)
 80006e6:	615a      	str	r2, [r3, #20]
	Process_Handlers[FLASH_MASS_ERASE_CMD] = 		 PROCESS_FLASH_MASS_ERASE_CMD;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <PROCESS_INIT+0x64>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <PROCESS_INIT+0x80>)
 80006ec:	619a      	str	r2, [r3, #24]
	Process_Handlers[FLASH_CPY_CMD]        = 		 PROCESS_FLASH_CPY_CMD;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <PROCESS_INIT+0x64>)
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <PROCESS_INIT+0x84>)
 80006f2:	61da      	str	r2, [r3, #28]
	Process_Handlers[TRANSFER_CNTRL_CMD]   = 		 PROCESS_TRANSFER_CNTRL_CMD;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <PROCESS_INIT+0x64>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <PROCESS_INIT+0x88>)
 80006f8:	621a      	str	r2, [r3, #32]
	Process_Handlers[OB_UNLOCK_CMD]        =		 PROCESS_OB_UNLOCK_CMD;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <PROCESS_INIT+0x64>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <PROCESS_INIT+0x8c>)
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
	Process_Handlers[OB_LOCK_CMD]          = 		 PROCESS_OB_LOCK_CMD;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <PROCESS_INIT+0x64>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <PROCESS_INIT+0x90>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
	Process_Handlers[OB_READ_CMD]          = 		 PROCESS_OB_READ_CMD;
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <PROCESS_INIT+0x64>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <PROCESS_INIT+0x94>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
	Process_Handlers[WR_PROTECT_CMD]       = 		 PROCESS_WR_PROTECT_CMD;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <PROCESS_INIT+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <PROCESS_INIT+0x98>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
	Process_Handlers[WR_UNPROTECT_CMD]     = 		 PROCESS_WR_UNPROTECT_CMD;
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <PROCESS_INIT+0x64>)
 8000714:	4a11      	ldr	r2, [pc, #68]	; (800075c <PROCESS_INIT+0x9c>)
 8000716:	635a      	str	r2, [r3, #52]	; 0x34


}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000028 	.word	0x20000028
 8000728:	08000761 	.word	0x08000761
 800072c:	08000805 	.word	0x08000805
 8000730:	08000821 	.word	0x08000821
 8000734:	0800083d 	.word	0x0800083d
 8000738:	080008a1 	.word	0x080008a1
 800073c:	080008f9 	.word	0x080008f9
 8000740:	08000955 	.word	0x08000955
 8000744:	080009a1 	.word	0x080009a1
 8000748:	08000abd 	.word	0x08000abd
 800074c:	080009e5 	.word	0x080009e5
 8000750:	08000a01 	.word	0x08000a01
 8000754:	08000a1d 	.word	0x08000a1d
 8000758:	08000a45 	.word	0x08000a45
 800075c:	08000a81 	.word	0x08000a81

08000760 <PROCESS_GET_CMD>:
 * @brief	Called when Get command is retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_GET_CMD (void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

	// Send Bootloader info Header
	HAL_UART_Transmit(&huart1, (uint8_t*) SEPART_LINE, (uint16_t)sizeof(SEPART_LINE), TRANS_WAIT_TIME);
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2232      	movs	r2, #50	; 0x32
 8000768:	491d      	ldr	r1, [pc, #116]	; (80007e0 <PROCESS_GET_CMD+0x80>)
 800076a:	481e      	ldr	r0, [pc, #120]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 800076c:	f001 ffbb 	bl	80026e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) INFO_HEAD, (uint16_t)sizeof(INFO_HEAD),     TRANS_WAIT_TIME);
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	2232      	movs	r2, #50	; 0x32
 8000774:	491c      	ldr	r1, [pc, #112]	; (80007e8 <PROCESS_GET_CMD+0x88>)
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 8000778:	f001 ffb5 	bl	80026e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) SEPART_LINE, (uint16_t)sizeof(SEPART_LINE), TRANS_WAIT_TIME);
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	2232      	movs	r2, #50	; 0x32
 8000780:	4917      	ldr	r1, [pc, #92]	; (80007e0 <PROCESS_GET_CMD+0x80>)
 8000782:	4818      	ldr	r0, [pc, #96]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 8000784:	f001 ffaf 	bl	80026e6 <HAL_UART_Transmit>

	// Send bootloader Info
	HAL_UART_Transmit(&huart1, (uint8_t*) ID_LINE, (uint16_t)sizeof(ID_LINE), TRANS_WAIT_TIME);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2218      	movs	r2, #24
 800078c:	4917      	ldr	r1, [pc, #92]	; (80007ec <PROCESS_GET_CMD+0x8c>)
 800078e:	4815      	ldr	r0, [pc, #84]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 8000790:	f001 ffa9 	bl	80026e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) ID, (uint16_t)sizeof(ID), TRANS_WAIT_TIME);
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	2207      	movs	r2, #7
 8000798:	4915      	ldr	r1, [pc, #84]	; (80007f0 <PROCESS_GET_CMD+0x90>)
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 800079c:	f001 ffa3 	bl	80026e6 <HAL_UART_Transmit>


	HAL_UART_Transmit(&huart1, (uint8_t*) VER_LINE, (uint16_t)sizeof(VER_LINE), TRANS_WAIT_TIME);
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2218      	movs	r2, #24
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <PROCESS_GET_CMD+0x94>)
 80007a6:	480f      	ldr	r0, [pc, #60]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 80007a8:	f001 ff9d 	bl	80026e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) VERSION, (uint16_t)sizeof(VERSION), TRANS_WAIT_TIME);
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2208      	movs	r2, #8
 80007b0:	4911      	ldr	r1, [pc, #68]	; (80007f8 <PROCESS_GET_CMD+0x98>)
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 80007b4:	f001 ff97 	bl	80026e6 <HAL_UART_Transmit>


	HAL_UART_Transmit(&huart1, (uint8_t*) AUTH_LINE, (uint16_t)sizeof(AUTH_LINE), TRANS_WAIT_TIME);
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	2218      	movs	r2, #24
 80007bc:	490f      	ldr	r1, [pc, #60]	; (80007fc <PROCESS_GET_CMD+0x9c>)
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 80007c0:	f001 ff91 	bl	80026e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) AUTHOR, (uint16_t)sizeof(AUTHOR), TRANS_WAIT_TIME);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2212      	movs	r2, #18
 80007c8:	490d      	ldr	r1, [pc, #52]	; (8000800 <PROCESS_GET_CMD+0xa0>)
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 80007cc:	f001 ff8b 	bl	80026e6 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, (uint8_t*) SEPART_LINE, (uint16_t)sizeof(SEPART_LINE), TRANS_WAIT_TIME);
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	2232      	movs	r2, #50	; 0x32
 80007d4:	4902      	ldr	r1, [pc, #8]	; (80007e0 <PROCESS_GET_CMD+0x80>)
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <PROCESS_GET_CMD+0x84>)
 80007d8:	f001 ff85 	bl	80026e6 <HAL_UART_Transmit>

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800301c 	.word	0x0800301c
 80007e4:	200000ec 	.word	0x200000ec
 80007e8:	08003050 	.word	0x08003050
 80007ec:	08003084 	.word	0x08003084
 80007f0:	08002ff8 	.word	0x08002ff8
 80007f4:	0800309c 	.word	0x0800309c
 80007f8:	08003000 	.word	0x08003000
 80007fc:	080030b4 	.word	0x080030b4
 8000800:	08003008 	.word	0x08003008

08000804 <PROCESS_FLASH_UNLOCK_CMD>:
 * @note	None
 * @param   None
 * @retval  None
 */

void PROCESS_FLASH_UNLOCK_CMD	(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

	if(HAL_FLASH_Unlock())
 8000808:	f000 fd60 	bl	80012cc <HAL_FLASH_Unlock>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <PROCESS_FLASH_UNLOCK_CMD+0x14>
		SEND_NACK();
 8000812:	f000 f975 	bl	8000b00 <SEND_NACK>

	else
		SEND_ACK();
}
 8000816:	e001      	b.n	800081c <PROCESS_FLASH_UNLOCK_CMD+0x18>
		SEND_ACK();
 8000818:	f000 f960 	bl	8000adc <SEND_ACK>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <PROCESS_FLASH_LOCK_CMD>:
 * @brief	Called when lock command retrieved
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_FLASH_LOCK_CMD		(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

	if(HAL_FLASH_Lock())
 8000824:	f000 fd74 	bl	8001310 <HAL_FLASH_Lock>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <PROCESS_FLASH_LOCK_CMD+0x14>
		SEND_NACK();
 800082e:	f000 f967 	bl	8000b00 <SEND_NACK>

	else
		SEND_ACK();
}
 8000832:	e001      	b.n	8000838 <PROCESS_FLASH_LOCK_CMD+0x18>
		SEND_ACK();
 8000834:	f000 f952 	bl	8000adc <SEND_ACK>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <PROCESS_FLASH_PROG_CMD>:
 * @brief	Called when Program command retrieved
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_FLASH_PROG_CMD		(void){
 800083c:	b5b0      	push	{r4, r5, r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

	//  Skip the ADDRESS OFFSET and read the address to program.
	AddressType Address = *( (AddressType*) (&RxBuffer[ADDRESS_OFFSET]));
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <PROCESS_FLASH_PROG_CMD+0x5c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	603b      	str	r3, [r7, #0]

	for (int idx = 0 ; idx < BLOCK_SIZE; ++idx) {
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	e01b      	b.n	8000886 <PROCESS_FLASH_PROG_CMD+0x4a>

		if(HAL_FLASH_Program(TYPEPROGRAM, (Address + (idx << TYPEPROGRAM)),  *((DataType*)&RxBuffer[DATA_OFFSET+(idx << TYPEPROGRAM)])    ))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	461a      	mov	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	18d1      	adds	r1, r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	3305      	adds	r3, #5
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <PROCESS_FLASH_PROG_CMD+0x60>)
 8000860:	4413      	add	r3, r2
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	461c      	mov	r4, r3
 8000868:	4615      	mov	r5, r2
 800086a:	4622      	mov	r2, r4
 800086c:	462b      	mov	r3, r5
 800086e:	2002      	movs	r0, #2
 8000870:	f000 fcd8 	bl	8001224 <HAL_FLASH_Program>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <PROCESS_FLASH_PROG_CMD+0x44>
			{
			SEND_NACK();
 800087a:	f000 f941 	bl	8000b00 <SEND_NACK>
			return;
 800087e:	e007      	b.n	8000890 <PROCESS_FLASH_PROG_CMD+0x54>
	for (int idx = 0 ; idx < BLOCK_SIZE; ++idx) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d9e0      	bls.n	800084e <PROCESS_FLASH_PROG_CMD+0x12>
			}
	}
	SEND_ACK();
 800088c:	f000 f926 	bl	8000adc <SEND_ACK>

}
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bdb0      	pop	{r4, r5, r7, pc}
 8000896:	bf00      	nop
 8000898:	2000006d 	.word	0x2000006d
 800089c:	2000006c 	.word	0x2000006c

080008a0 <PROCESS_FLASH_READ_CMD>:
 * @brief	Called when read command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_FLASH_READ_CMD		(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	//  Skip the first byte contain the command and read word as the address to program.
	AddressType Address = *( (AddressType*) (&RxBuffer[ADDRESS_OFFSET]));
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <PROCESS_FLASH_READ_CMD+0x4c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	603b      	str	r3, [r7, #0]

	for (int idx = 0; idx < BLOCK_SIZE; ++idx)
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	e00e      	b.n	80008d0 <PROCESS_FLASH_READ_CMD+0x30>
		*((DataType*)&TxBuffer[idx<<TYPEPROGRAM]) = *((DataType*)(Address+(idx<<TYPEPROGRAM)));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	461a      	mov	r2, r3
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <PROCESS_FLASH_READ_CMD+0x50>)
 80008c4:	4413      	add	r3, r2
 80008c6:	680a      	ldr	r2, [r1, #0]
 80008c8:	601a      	str	r2, [r3, #0]
	for (int idx = 0; idx < BLOCK_SIZE; ++idx)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3301      	adds	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d9ed      	bls.n	80008b2 <PROCESS_FLASH_READ_CMD+0x12>

	HAL_UART_Transmit(&huart1, (uint8_t*) TxBuffer, (uint16_t)(BLOCK_SIZE << TYPEPROGRAM), TRANS_WAIT_TIME);
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	2210      	movs	r2, #16
 80008da:	4905      	ldr	r1, [pc, #20]	; (80008f0 <PROCESS_FLASH_READ_CMD+0x50>)
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <PROCESS_FLASH_READ_CMD+0x54>)
 80008de:	f001 ff02 	bl	80026e6 <HAL_UART_Transmit>

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000006d 	.word	0x2000006d
 80008f0:	200000ac 	.word	0x200000ac
 80008f4:	200000ec 	.word	0x200000ec

080008f8 <PROCESS_FLASH_ERASE_CMD>:
 * @brief	Called when erase command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_FLASH_ERASE_CMD	(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

	FLASH_EraseInitTypeDef strInit;
	uint32_t SectorError = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]


	strInit.Banks = FLASH_BANK_1;
 8000902:	2301      	movs	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
	strInit.Sector = RxBuffer[SECTOR_OFFSET];
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <PROCESS_FLASH_ERASE_CMD+0x54>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	60fb      	str	r3, [r7, #12]
	strInit.NbSectors = RxBuffer[SECTOR_OFFSET+1];
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <PROCESS_FLASH_ERASE_CMD+0x54>)
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	613b      	str	r3, [r7, #16]
	strInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
	strInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]

	HAL_FLASHEx_Erase(&strInit, &SectorError);
 800091a:	463a      	mov	r2, r7
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fe7d 	bl	8001620 <HAL_FLASHEx_Erase>

	if(SectorError != 0xFFFFFFFFU){
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092c:	d008      	beq.n	8000940 <PROCESS_FLASH_ERASE_CMD+0x48>
		SEND_NACK();
 800092e:	f000 f8e7 	bl	8000b00 <SEND_NACK>
		HAL_UART_Transmit(&huart1, (uint8_t*) &SectorError, 1U , TRANS_WAIT_TIME);
 8000932:	4639      	mov	r1, r7
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	2201      	movs	r2, #1
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <PROCESS_FLASH_ERASE_CMD+0x58>)
 800093a:	f001 fed4 	bl	80026e6 <HAL_UART_Transmit>
 800093e:	e001      	b.n	8000944 <PROCESS_FLASH_ERASE_CMD+0x4c>
		return;
	}
	SEND_ACK();
 8000940:	f000 f8cc 	bl	8000adc <SEND_ACK>

}
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000006c 	.word	0x2000006c
 8000950:	200000ec 	.word	0x200000ec

08000954 <PROCESS_FLASH_MASS_ERASE_CMD>:
 * @note	None
 * @param   None
 * @retval  None
 */

void PROCESS_FLASH_MASS_ERASE_CMD	    (void){
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

	FLASH_EraseInitTypeDef strInit;
	uint32_t SectorError = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]


	strInit.Banks = FLASH_BANK_1;
 800095e:	2301      	movs	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
	strInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000962:	2301      	movs	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
	strInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000966:	2302      	movs	r3, #2
 8000968:	617b      	str	r3, [r7, #20]

	HAL_FLASHEx_Erase(&strInit, &SectorError);
 800096a:	463a      	mov	r2, r7
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fe55 	bl	8001620 <HAL_FLASHEx_Erase>

	if(SectorError != 0xFFFFFFFFU){
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d008      	beq.n	8000990 <PROCESS_FLASH_MASS_ERASE_CMD+0x3c>
		SEND_NACK();
 800097e:	f000 f8bf 	bl	8000b00 <SEND_NACK>
		HAL_UART_Transmit(&huart1, (uint8_t*) &SectorError, 1U , TRANS_WAIT_TIME);
 8000982:	4639      	mov	r1, r7
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	2201      	movs	r2, #1
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <PROCESS_FLASH_MASS_ERASE_CMD+0x48>)
 800098a:	f001 feac 	bl	80026e6 <HAL_UART_Transmit>
 800098e:	e001      	b.n	8000994 <PROCESS_FLASH_MASS_ERASE_CMD+0x40>
		return;
	}
	SEND_ACK();
 8000990:	f000 f8a4 	bl	8000adc <SEND_ACK>


}
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000ec 	.word	0x200000ec

080009a0 <PROCESS_FLASH_CPY_CMD>:
 * @brief	Called when copy command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_FLASH_CPY_CMD		(void){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

	//  Skip the first byte contain the command and read word as the address to program.
	AddressType srcAddress = *( (AddressType*) (&RxBuffer[ADDRESS_OFFSET]));
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <PROCESS_FLASH_CPY_CMD+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	60fb      	str	r3, [r7, #12]
	AddressType destAddress = *( (AddressType*) (&RxBuffer[DATA_OFFSET]));
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <PROCESS_FLASH_CPY_CMD+0x3c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60bb      	str	r3, [r7, #8]
	SizeType size = *( (SizeType*) (&RxBuffer[SIZE_OFFSET]));
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <PROCESS_FLASH_CPY_CMD+0x40>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	607b      	str	r3, [r7, #4]


	if (BOOT_CPY_IMAGE(srcAddress, destAddress, size)){
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fde3 	bl	8000588 <BOOT_CPY_IMAGE>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <PROCESS_FLASH_CPY_CMD+0x2e>
		SEND_NACK();
 80009c8:	f000 f89a 	bl	8000b00 <SEND_NACK>
		return;
 80009cc:	e001      	b.n	80009d2 <PROCESS_FLASH_CPY_CMD+0x32>
	}
	SEND_ACK();
 80009ce:	f000 f885 	bl	8000adc <SEND_ACK>
}
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000006d 	.word	0x2000006d
 80009dc:	20000071 	.word	0x20000071
 80009e0:	20000075 	.word	0x20000075

080009e4 <PROCESS_OB_UNLOCK_CMD>:
 * @brief	Called when OB Unlock command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_OB_UNLOCK_CMD	(void){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0


	if(HAL_FLASH_OB_Unlock())
 80009e8:	f000 fca2 	bl	8001330 <HAL_FLASH_OB_Unlock>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <PROCESS_OB_UNLOCK_CMD+0x14>
		SEND_NACK();
 80009f2:	f000 f885 	bl	8000b00 <SEND_NACK>

	else
		SEND_ACK();

}
 80009f6:	e001      	b.n	80009fc <PROCESS_OB_UNLOCK_CMD+0x18>
		SEND_ACK();
 80009f8:	f000 f870 	bl	8000adc <SEND_ACK>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <PROCESS_OB_LOCK_CMD>:
 * @brief	Called when OB Lock command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_OB_LOCK_CMD	(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0


	if(HAL_FLASH_OB_Lock())
 8000a04:	f000 fcb0 	bl	8001368 <HAL_FLASH_OB_Lock>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <PROCESS_OB_LOCK_CMD+0x14>
		SEND_NACK();
 8000a0e:	f000 f877 	bl	8000b00 <SEND_NACK>

	else
		SEND_ACK();

}
 8000a12:	e001      	b.n	8000a18 <PROCESS_OB_LOCK_CMD+0x18>
		SEND_ACK();
 8000a14:	f000 f862 	bl	8000adc <SEND_ACK>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <PROCESS_OB_READ_CMD>:
 * @brief	Called when OB Read command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_OB_READ_CMD	(void){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

	*(  (DataType*)  TxBuffer  ) = *( (DataType *) OPTCR_BYTE0_ADDRESS   );
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <PROCESS_OB_READ_CMD+0x1c>)
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <PROCESS_OB_READ_CMD+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) TxBuffer, 4U, TRANS_WAIT_TIME);
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4903      	ldr	r1, [pc, #12]	; (8000a3c <PROCESS_OB_READ_CMD+0x20>)
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <PROCESS_OB_READ_CMD+0x24>)
 8000a30:	f001 fe59 	bl	80026e6 <HAL_UART_Transmit>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023c14 	.word	0x40023c14
 8000a3c:	200000ac 	.word	0x200000ac
 8000a40:	200000ec 	.word	0x200000ec

08000a44 <PROCESS_WR_PROTECT_CMD>:
 * @brief	Called when Sector write protect command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_WR_PROTECT_CMD	(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

	FLASH_OBProgramInitTypeDef pOBInit;
	pOBInit.OptionType = OPTIONBYTE_WRP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	607b      	str	r3, [r7, #4]
	pOBInit.Banks = FLASH_BANK_1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
	pOBInit.WRPState = OB_WRPSTATE_ENABLE;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
	pOBInit.WRPSector = RxBuffer[SECTOR_OFFSET] ;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <PROCESS_WR_PROTECT_CMD+0x38>)
 8000a58:	785b      	ldrb	r3, [r3, #1]
 8000a5a:	60fb      	str	r3, [r7, #12]

	if (HAL_FLASHEx_OBProgram(&pOBInit)){
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fe4e 	bl	8001700 <HAL_FLASHEx_OBProgram>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <PROCESS_WR_PROTECT_CMD+0x2c>
		SEND_NACK();
 8000a6a:	f000 f849 	bl	8000b00 <SEND_NACK>
 8000a6e:	e001      	b.n	8000a74 <PROCESS_WR_PROTECT_CMD+0x30>
		return;
	}

	SEND_ACK();
 8000a70:	f000 f834 	bl	8000adc <SEND_ACK>
}
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000006c 	.word	0x2000006c

08000a80 <PROCESS_WR_UNPROTECT_CMD>:
 * @brief	Called when Sector write Unprotect command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_WR_UNPROTECT_CMD	(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

	FLASH_OBProgramInitTypeDef pOBInit;
	pOBInit.OptionType = OPTIONBYTE_WRP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
	pOBInit.Banks = FLASH_BANK_1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
	pOBInit.WRPState = OB_WRPSTATE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
	pOBInit.WRPSector = RxBuffer[SECTOR_OFFSET] ;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <PROCESS_WR_UNPROTECT_CMD+0x38>)
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	60fb      	str	r3, [r7, #12]

	if (HAL_FLASHEx_OBProgram(&pOBInit)){
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fe30 	bl	8001700 <HAL_FLASHEx_OBProgram>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <PROCESS_WR_UNPROTECT_CMD+0x2c>
		SEND_NACK();
 8000aa6:	f000 f82b 	bl	8000b00 <SEND_NACK>
 8000aaa:	e001      	b.n	8000ab0 <PROCESS_WR_UNPROTECT_CMD+0x30>
		return;
	}

	SEND_ACK();
 8000aac:	f000 f816 	bl	8000adc <SEND_ACK>
}
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000006c 	.word	0x2000006c

08000abc <PROCESS_TRANSFER_CNTRL_CMD>:
 * @brief	Called when transfer control command retrieved.
 * @note	None
 * @param   None
 * @retval  None
 */
void PROCESS_TRANSFER_CNTRL_CMD	(void){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0


	AddressType ImageAddress = *( (AddressType*) (&RxBuffer[ADDRESS_OFFSET]));
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <PROCESS_TRANSFER_CNTRL_CMD+0x1c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	607b      	str	r3, [r7, #4]
	BOOT_TRANSFER_CNTRL(ImageAddress);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fd05 	bl	80004d8 <BOOT_TRANSFER_CNTRL>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000006d 	.word	0x2000006d

08000adc <SEND_ACK>:
 * @brief	Transmit ACK to a command proceed
 * @note	None
 * @param   None
 * @retval  None
 */
static	void SEND_ACK(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

	TxBuffer[0] = ACK_MSG;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SEND_ACK+0x1c>)
 8000ae2:	2241      	movs	r2, #65	; 0x41
 8000ae4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, TxBuffer, CMD_SIZE, TRANS_WAIT_TIME);
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4903      	ldr	r1, [pc, #12]	; (8000af8 <SEND_ACK+0x1c>)
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <SEND_ACK+0x20>)
 8000aee:	f001 fdfa 	bl	80026e6 <HAL_UART_Transmit>

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000ac 	.word	0x200000ac
 8000afc:	200000ec 	.word	0x200000ec

08000b00 <SEND_NACK>:
 * @note	None
 * @param   None
 * @retval  None
 */

static	void SEND_NACK(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

	TxBuffer[0] = NACK_MSG;
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <SEND_NACK+0xcc>)
 8000b08:	224e      	movs	r2, #78	; 0x4e
 8000b0a:	701a      	strb	r2, [r3, #0]

	uint8_t errorCount = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	71fb      	strb	r3, [r7, #7]
	uint32_t errorFields = HAL_FLASH_GetError();
 8000b10:	f000 fc3a 	bl	8001388 <HAL_FLASH_GetError>
 8000b14:	6038      	str	r0, [r7, #0]

	if ((errorFields & HAL_FLASH_ERROR_RD) == HAL_FLASH_ERROR_RD ){
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <SEND_NACK+0x2e>
		TxBuffer[++errorCount] = RDPR_ERR_MSG;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	3301      	adds	r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <SEND_NACK+0xcc>)
 8000b2a:	21e5      	movs	r1, #229	; 0xe5
 8000b2c:	54d1      	strb	r1, [r2, r3]
	}
	if ((errorFields & HAL_FLASH_ERROR_PGS) == HAL_FLASH_ERROR_PGS ){
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <SEND_NACK+0x46>
		TxBuffer[++errorCount] = PGSERR_ERR_MSG;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SEND_NACK+0xcc>)
 8000b42:	21e1      	movs	r1, #225	; 0xe1
 8000b44:	54d1      	strb	r1, [r2, r3]
	}
	if ((errorFields & HAL_FLASH_ERROR_PGP) == HAL_FLASH_ERROR_PGP ){
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <SEND_NACK+0x5e>
		TxBuffer[++errorCount] = PGPERR_ERR_MSG;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	3301      	adds	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <SEND_NACK+0xcc>)
 8000b5a:	21e2      	movs	r1, #226	; 0xe2
 8000b5c:	54d1      	strb	r1, [r2, r3]
	}
	if ((errorFields & HAL_FLASH_ERROR_PGA) == HAL_FLASH_ERROR_PGA ){
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <SEND_NACK+0x76>
		TxBuffer[++errorCount] = PGAERR_ERR_MSG;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <SEND_NACK+0xcc>)
 8000b72:	21e3      	movs	r1, #227	; 0xe3
 8000b74:	54d1      	strb	r1, [r2, r3]
	}
	if ((errorFields & HAL_FLASH_ERROR_WRP) == HAL_FLASH_ERROR_WRP ){
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <SEND_NACK+0x8e>
		TxBuffer[++errorCount] = WRPERR_ERR_MSG;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	3301      	adds	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <SEND_NACK+0xcc>)
 8000b8a:	21e4      	movs	r1, #228	; 0xe4
 8000b8c:	54d1      	strb	r1, [r2, r3]
	}
	if ((errorFields & HAL_FLASH_ERROR_OPERATION) == HAL_FLASH_ERROR_OPERATION ){
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f003 0320 	and.w	r3, r3, #32
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <SEND_NACK+0xa6>
		TxBuffer[++errorCount] = OP_ERR_MSG;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SEND_NACK+0xcc>)
 8000ba2:	21e6      	movs	r1, #230	; 0xe6
 8000ba4:	54d1      	strb	r1, [r2, r3]
	}
	TxBuffer[1] = --errorCount;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <SEND_NACK+0xcc>)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	7053      	strb	r3, [r2, #1]

	HAL_UART_Transmit(&huart1, TxBuffer, errorCount+2, TRANS_WAIT_TIME);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	4903      	ldr	r1, [pc, #12]	; (8000bcc <SEND_NACK+0xcc>)
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <SEND_NACK+0xd0>)
 8000bc0:	f001 fd91 	bl	80026e6 <HAL_UART_Transmit>

}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000ac 	.word	0x200000ac
 8000bd0:	200000ec 	.word	0x200000ec

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bda:	f000 f9cb 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bde:	f000 f823 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 f8b5 	bl	8000d50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000be6:	f000 f889 	bl	8000cfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PROCESS_INIT();
 8000bea:	f7ff fd69 	bl	80006c0 <PROCESS_INIT>

  while (1)
  {
    /* USER CODE END WHILE */

	   if (HAL_UARTEx_ReceiveToIdle(&huart1,RxBuffer, RX_BUFFER_SIZE, &RxLen, RX_TIME_OUT) == HAL_OK
 8000bee:	1dbb      	adds	r3, r7, #6
 8000bf0:	2264      	movs	r2, #100	; 0x64
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	4909      	ldr	r1, [pc, #36]	; (8000c1c <main+0x48>)
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <main+0x4c>)
 8000bfa:	f001 fe06 	bl	800280a <HAL_UARTEx_ReceiveToIdle>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f4      	bne.n	8000bee <main+0x1a>
			   && RxBuffer[0] < PROCESS_NUMBER){
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <main+0x48>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b10      	cmp	r3, #16
 8000c0a:	d8f0      	bhi.n	8000bee <main+0x1a>
		   Process_Handlers[RxBuffer[0]]();}
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <main+0x48>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <main+0x50>)
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	4798      	blx	r3
	   if (HAL_UARTEx_ReceiveToIdle(&huart1,RxBuffer, RX_BUFFER_SIZE, &RxLen, RX_TIME_OUT) == HAL_OK
 8000c1a:	e7e8      	b.n	8000bee <main+0x1a>
 8000c1c:	2000006c 	.word	0x2000006c
 8000c20:	200000ec 	.word	0x200000ec
 8000c24:	20000028 	.word	0x20000028

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2230      	movs	r2, #48	; 0x30
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 f9ca 	bl	8002fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <SystemClock_Config+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c74:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <SystemClock_Config+0xd0>)
 8000c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <SystemClock_Config+0xd0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c9c:	2319      	movs	r3, #25
 8000c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ca0:	23a8      	movs	r3, #168	; 0xa8
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 f873 	bl	8001d9c <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cbc:	f000 f87e 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fad5 	bl	800228c <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ce8:	f000 f868 	bl	8000dbc <Error_Handler>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3750      	adds	r7, #80	; 0x50
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007000 	.word	0x40007000

08000cfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART1_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f001 fc8a 	bl	800264c <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f83d 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000ec 	.word	0x200000ec
 8000d4c:	40011000 	.word	0x40011000

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12c      	bne.n	8000e94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e84:	2307      	movs	r3, #7
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_UART_MspInit+0x8c>)
 8000e90:	f000 fe00 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f890 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	; (8000f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f002 f81b 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fe3f 	bl	8000bd4 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f64:	080030f4 	.word	0x080030f4
  ldr r2, =_sbss
 8000f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f6c:	20000154 	.word	0x20000154

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f90d 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff ff0e 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f917 	bl	800120a <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f8ed 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	20000130 	.word	0x20000130

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000130 	.word	0x20000130

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff47 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff5c 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb0 	bl	8001178 <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_FLASH_Program+0xa0>)
 8001238:	7e1b      	ldrb	r3, [r3, #24]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_FLASH_Program+0x1e>
 800123e:	2302      	movs	r3, #2
 8001240:	e03b      	b.n	80012ba <HAL_FLASH_Program+0x96>
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_FLASH_Program+0xa0>)
 8001244:	2201      	movs	r2, #1
 8001246:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001248:	f24c 3050 	movw	r0, #50000	; 0xc350
 800124c:	f000 f8a8 	bl	80013a0 <FLASH_WaitForLastOperation>
 8001250:	4603      	mov	r3, r0
 8001252:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12b      	bne.n	80012b2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001260:	783b      	ldrb	r3, [r7, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	68b8      	ldr	r0, [r7, #8]
 8001266:	f000 f953 	bl	8001510 <FLASH_Program_Byte>
 800126a:	e016      	b.n	800129a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001272:	883b      	ldrh	r3, [r7, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f000 f926 	bl	80014c8 <FLASH_Program_HalfWord>
 800127c:	e00d      	b.n	800129a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d105      	bne.n	8001290 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f000 f8fb 	bl	8001484 <FLASH_Program_Word>
 800128e:	e004      	b.n	800129a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001294:	68b8      	ldr	r0, [r7, #8]
 8001296:	f000 f8c3 	bl	8001420 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800129a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800129e:	f000 f87f 	bl	80013a0 <FLASH_WaitForLastOperation>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_FLASH_Program+0xa4>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_FLASH_Program+0xa4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_FLASH_Program+0xa0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000134 	.word	0x20000134
 80012c8:	40023c00 	.word	0x40023c00

080012cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_FLASH_Unlock+0x38>)
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da0b      	bge.n	80012f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_FLASH_Unlock+0x38>)
 80012e0:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_FLASH_Unlock+0x3c>)
 80012e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_FLASH_Unlock+0x38>)
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_FLASH_Unlock+0x40>)
 80012e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_FLASH_Unlock+0x38>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da01      	bge.n	80012f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40023c00 	.word	0x40023c00
 8001308:	45670123 	.word	0x45670123
 800130c:	cdef89ab 	.word	0xcdef89ab

08001310 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_FLASH_Lock+0x1c>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_FLASH_Lock+0x1c>)
 800131a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800131e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_FLASH_OB_Unlock+0x2c>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_FLASH_OB_Unlock+0x2c>)
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_FLASH_OB_Unlock+0x30>)
 8001344:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_FLASH_OB_Unlock+0x2c>)
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_FLASH_OB_Unlock+0x34>)
 800134a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800134c:	2300      	movs	r3, #0
 800134e:	e000      	b.n	8001352 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40023c00 	.word	0x40023c00
 8001360:	08192a3b 	.word	0x08192a3b
 8001364:	4c5d6e7f 	.word	0x4c5d6e7f

08001368 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_FLASH_OB_Lock+0x1c>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_FLASH_OB_Lock+0x1c>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_FLASH_GetError+0x14>)
 800138e:	69db      	ldr	r3, [r3, #28]
}  
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000134 	.word	0x20000134

080013a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <FLASH_WaitForLastOperation+0x78>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013b2:	f7ff fe45 	bl	8001040 <HAL_GetTick>
 80013b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013b8:	e010      	b.n	80013dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d00c      	beq.n	80013dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <FLASH_WaitForLastOperation+0x38>
 80013c8:	f7ff fe3a 	bl	8001040 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d201      	bcs.n	80013dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e019      	b.n	8001410 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <FLASH_WaitForLastOperation+0x7c>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e8      	bne.n	80013ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <FLASH_WaitForLastOperation+0x7c>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <FLASH_WaitForLastOperation+0x7c>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <FLASH_WaitForLastOperation+0x7c>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001406:	f000 f8a5 	bl	8001554 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
  
}  
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000134 	.word	0x20000134
 800141c:	40023c00 	.word	0x40023c00

08001420 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <FLASH_Program_DoubleWord+0x60>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <FLASH_Program_DoubleWord+0x60>)
 8001432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <FLASH_Program_DoubleWord+0x60>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <FLASH_Program_DoubleWord+0x60>)
 800143e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <FLASH_Program_DoubleWord+0x60>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <FLASH_Program_DoubleWord+0x60>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001456:	f3bf 8f6f 	isb	sy
}
 800145a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800145c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	000a      	movs	r2, r1
 800146a:	2300      	movs	r3, #0
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	3104      	adds	r1, #4
 8001470:	4613      	mov	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40023c00 	.word	0x40023c00

08001484 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <FLASH_Program_Word+0x40>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <FLASH_Program_Word+0x40>)
 8001494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001498:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <FLASH_Program_Word+0x40>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <FLASH_Program_Word+0x40>)
 80014a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <FLASH_Program_Word+0x40>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <FLASH_Program_Word+0x40>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <FLASH_Program_HalfWord+0x44>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <FLASH_Program_HalfWord+0x44>)
 80014da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <FLASH_Program_HalfWord+0x44>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a09      	ldr	r2, [pc, #36]	; (800150c <FLASH_Program_HalfWord+0x44>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <FLASH_Program_HalfWord+0x44>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <FLASH_Program_HalfWord+0x44>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	801a      	strh	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00

08001510 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <FLASH_Program_Byte+0x40>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <FLASH_Program_Byte+0x40>)
 8001522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <FLASH_Program_Byte+0x40>)
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <FLASH_Program_Byte+0x40>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <FLASH_Program_Byte+0x40>)
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <FLASH_Program_Byte+0x40>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	701a      	strb	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <FLASH_SetErrorCode+0xc8>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	4a2b      	ldr	r2, [pc, #172]	; (800161c <FLASH_SetErrorCode+0xc8>)
 800156e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 8001572:	2210      	movs	r2, #16
 8001574:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <FLASH_SetErrorCode+0xc8>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	4a24      	ldr	r2, [pc, #144]	; (800161c <FLASH_SetErrorCode+0xc8>)
 800158c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 8001590:	2220      	movs	r2, #32
 8001592:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 80015ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <FLASH_SetErrorCode+0xc8>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f043 0320 	orr.w	r3, r3, #32
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <FLASH_SetErrorCode+0xc8>)
 8001606:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <FLASH_SetErrorCode+0xc4>)
 800160a:	2202      	movs	r2, #2
 800160c:	60da      	str	r2, [r3, #12]
  }
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40023c00 	.word	0x40023c00
 800161c:	20000134 	.word	0x20000134

08001620 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 8001634:	7e1b      	ldrb	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_FLASHEx_Erase+0x1e>
 800163a:	2302      	movs	r3, #2
 800163c:	e058      	b.n	80016f0 <HAL_FLASHEx_Erase+0xd0>
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 8001640:	2201      	movs	r2, #1
 8001642:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001648:	f7ff feaa 	bl	80013a0 <FLASH_WaitForLastOperation>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d148      	bne.n	80016e8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d115      	bne.n	8001692 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f000 f8b2 	bl	80017dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001678:	f24c 3050 	movw	r0, #50000	; 0xc350
 800167c:	f7ff fe90 	bl	80013a0 <FLASH_WaitForLastOperation>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_FLASHEx_Erase+0xdc>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_FLASHEx_Erase+0xdc>)
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	6113      	str	r3, [r2, #16]
 8001690:	e028      	b.n	80016e4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	e01c      	b.n	80016d4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	68b8      	ldr	r0, [r7, #8]
 80016a4:	f000 f8be 	bl	8001824 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ac:	f7ff fe78 	bl	80013a0 <FLASH_WaitForLastOperation>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_FLASHEx_Erase+0xdc>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_FLASHEx_Erase+0xdc>)
 80016ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80016be:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	601a      	str	r2, [r3, #0]
          break;
 80016cc:	e00a      	b.n	80016e4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d3da      	bcc.n	800169a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016e4:	f000 f990 	bl	8001a08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_FLASHEx_Erase+0xd8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]

  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000134 	.word	0x20000134
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_FLASHEx_OBProgram+0xd8>)
 800170e:	7e1b      	ldrb	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_FLASHEx_OBProgram+0x18>
 8001714:	2302      	movs	r3, #2
 8001716:	e05b      	b.n	80017d0 <HAL_FLASHEx_OBProgram+0xd0>
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_FLASHEx_OBProgram+0xd8>)
 800171a:	2201      	movs	r2, #1
 800171c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d018      	beq.n	800175c <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10a      	bne.n	8001748 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f000 f8b9 	bl	80018b4 <FLASH_OB_EnableWRP>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e009      	b.n	800175c <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f000 f8d0 	bl	80018f8 <FLASH_OB_DisableWRP>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f8e2 	bl	8001938 <FLASH_OB_RDP_LevelConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800179c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	f000 f8e2 	bl	800196c <FLASH_OB_UserConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f904 	bl	80019cc <FLASH_OB_BOR_LevelConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_FLASHEx_OBProgram+0xd8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	761a      	strb	r2, [r3, #24]

  return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000134 	.word	0x20000134

080017dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <FLASH_MassErase+0x44>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <FLASH_MassErase+0x44>)
 80017ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <FLASH_MassErase+0x44>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <FLASH_MassErase+0x44>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <FLASH_MassErase+0x44>)
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4313      	orrs	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <FLASH_MassErase+0x44>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6113      	str	r3, [r2, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e010      	b.n	8001862 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d103      	bne.n	800184e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e009      	b.n	8001862 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d103      	bne.n	800185c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e002      	b.n	8001862 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800185c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001860:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800186c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	490f      	ldr	r1, [pc, #60]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001880:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001884:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4313      	orrs	r3, r2
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <FLASH_Erase_Sector+0x8c>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6113      	str	r3, [r2, #16]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40023c00 	.word	0x40023c00

080018b4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c6:	f7ff fd6b 	bl	80013a0 <FLASH_WaitForLastOperation>
 80018ca:	4603      	mov	r3, r0
 80018cc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <FLASH_OB_EnableWRP+0x40>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4904      	ldr	r1, [pc, #16]	; (80018f4 <FLASH_OB_EnableWRP+0x40>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023c16 	.word	0x40023c16

080018f8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001906:	f24c 3050 	movw	r0, #50000	; 0xc350
 800190a:	f7ff fd49 	bl	80013a0 <FLASH_WaitForLastOperation>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d108      	bne.n	800192a <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <FLASH_OB_DisableWRP+0x3c>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	b29b      	uxth	r3, r3
 8001922:	4904      	ldr	r1, [pc, #16]	; (8001934 <FLASH_OB_DisableWRP+0x3c>)
 8001924:	4313      	orrs	r3, r2
 8001926:	b29b      	uxth	r3, r3
 8001928:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023c16 	.word	0x40023c16

08001938 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001946:	f24c 3050 	movw	r0, #50000	; 0xc350
 800194a:	f7ff fd29 	bl	80013a0 <FLASH_WaitForLastOperation>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <FLASH_OB_RDP_LevelConfig+0x30>)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023c15 	.word	0x40023c15

0800196c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	460b      	mov	r3, r1
 8001978:	71bb      	strb	r3, [r7, #6]
 800197a:	4613      	mov	r3, r2
 800197c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800197e:	23ff      	movs	r3, #255	; 0xff
 8001980:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001986:	f24c 3050 	movw	r0, #50000	; 0xc350
 800198a:	f7ff fd09 	bl	80013a0 <FLASH_WaitForLastOperation>
 800198e:	4603      	mov	r3, r0
 8001990:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 8001992:	7bbb      	ldrb	r3, [r7, #14]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <FLASH_OB_UserConfig+0x5c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 80019a4:	79ba      	ldrb	r2, [r7, #6]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	797b      	ldrb	r3, [r7, #5]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4905      	ldr	r1, [pc, #20]	; (80019c8 <FLASH_OB_UserConfig+0x5c>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	700b      	strb	r3, [r1, #0]
  }

  return status;
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c14 	.word	0x40023c14

080019cc <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <FLASH_OB_BOR_LevelConfig+0x38>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <FLASH_OB_BOR_LevelConfig+0x38>)
 80019de:	f023 030c 	bic.w	r3, r3, #12
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <FLASH_OB_BOR_LevelConfig+0x38>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4905      	ldr	r1, [pc, #20]	; (8001a04 <FLASH_OB_BOR_LevelConfig+0x38>)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0

}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40023c14 	.word	0x40023c14

08001a08 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a22:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a3a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d017      	beq.n	8001a84 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a76:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <FLASH_FlushCaches+0x88>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a82:	6013      	str	r3, [r2, #0]
  }
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023c00 	.word	0x40023c00

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e159      	b.n	8001d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8148 	bne.w	8001d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a2 	beq.w	8001d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c36:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x2f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x202>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x1fe>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_GPIO_Init+0x2f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x1fa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_GPIO_Init+0x2fc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x1f6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_GPIO_Init+0x300>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x1f2>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a2f      	ldr	r2, [pc, #188]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_GPIO_Init+0x304>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f aea2 	bls.w	8001ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e267      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d075      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e242      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x74>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e34:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff f8f4 	bl	8001040 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f8f0 	bl	8001040 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e207      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f8e0 	bl	8001040 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f8dc 	bl	8001040 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1f3      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4937      	ldr	r1, [pc, #220]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f895 	bl	8001040 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f891 	bl	8001040 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a8      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4925      	ldr	r1, [pc, #148]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f874 	bl	8001040 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff f870 	bl	8001040 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e187      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f854 	bl	8001040 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f850 	bl	8001040 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e167      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f83d 	bl	8001040 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff f839 	bl	8001040 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d907      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e150      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470000 	.word	0x42470000
 8001fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ea      	bne.n	8001fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b7d      	ldr	r3, [pc, #500]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a7c      	ldr	r2, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b7a      	ldr	r3, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b77      	ldr	r3, [pc, #476]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7fe fff9 	bl	8001040 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fff5 	bl	8001040 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e10c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ea>
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4a63      	ldr	r2, [pc, #396]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	; 0x70
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x30c>
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	; 0x70
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 80020a8:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffba 	bl	8001040 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe ffb6 	bl	8001040 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0cb      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	4b49      	ldr	r3, [pc, #292]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ee      	beq.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7fe ffa4 	bl	8001040 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe ffa0 	bl	8001040 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0b5      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4a38      	ldr	r2, [pc, #224]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a1 	beq.w	800227c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d05c      	beq.n	8002200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d141      	bne.n	80021d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe ff74 	bl	8001040 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe ff70 	bl	8001040 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e087      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x478>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe ff49 	bl	8001040 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe ff45 	bl	8001040 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x416>
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff32 	bl	8001040 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff2e 	bl	8001040 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e038      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x4ec>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d121      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fe60 	bl	8001040 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fe5c 	bl	8001040 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f821 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fdc0 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	080030cc 	.word	0x080030cc
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b090      	sub	sp, #64	; 0x40
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
 8002464:	2300      	movs	r3, #0
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002468:	2300      	movs	r3, #0
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x40>
 800247c:	2b08      	cmp	r3, #8
 800247e:	f200 80a1 	bhi.w	80025c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e09b      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_GetSysClockFreq+0x184>)
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002490:	e09b      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002492:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002496:	e098      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a2:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d028      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	627a      	str	r2, [r7, #36]	; 0x24
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024c0:	2100      	movs	r1, #0
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024c4:	fb03 f201 	mul.w	r2, r3, r1
 80024c8:	2300      	movs	r3, #0
 80024ca:	fb00 f303 	mul.w	r3, r0, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	4a43      	ldr	r2, [pc, #268]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024d2:	fba0 1202 	umull	r1, r2, r0, r2
 80024d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d8:	460a      	mov	r2, r1
 80024da:	62ba      	str	r2, [r7, #40]	; 0x28
 80024dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024de:	4413      	add	r3, r2
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	2200      	movs	r2, #0
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	61fa      	str	r2, [r7, #28]
 80024ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024f2:	f7fd fe6f 	bl	80001d4 <__aeabi_uldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4613      	mov	r3, r2
 80024fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fe:	e053      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	2200      	movs	r2, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	617a      	str	r2, [r7, #20]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002512:	f04f 0b00 	mov.w	fp, #0
 8002516:	4652      	mov	r2, sl
 8002518:	465b      	mov	r3, fp
 800251a:	f04f 0000 	mov.w	r0, #0
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	0159      	lsls	r1, r3, #5
 8002524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002528:	0150      	lsls	r0, r2, #5
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	ebb2 080a 	subs.w	r8, r2, sl
 8002532:	eb63 090b 	sbc.w	r9, r3, fp
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002542:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002546:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800254a:	ebb2 0408 	subs.w	r4, r2, r8
 800254e:	eb63 0509 	sbc.w	r5, r3, r9
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	00eb      	lsls	r3, r5, #3
 800255c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002560:	00e2      	lsls	r2, r4, #3
 8002562:	4614      	mov	r4, r2
 8002564:	461d      	mov	r5, r3
 8002566:	eb14 030a 	adds.w	r3, r4, sl
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	eb45 030b 	adc.w	r3, r5, fp
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800257e:	4629      	mov	r1, r5
 8002580:	028b      	lsls	r3, r1, #10
 8002582:	4621      	mov	r1, r4
 8002584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002588:	4621      	mov	r1, r4
 800258a:	028a      	lsls	r2, r1, #10
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	2200      	movs	r2, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	60fa      	str	r2, [r7, #12]
 8002598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800259c:	f7fd fe1a 	bl	80001d4 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c2:	e002      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetSysClockFreq+0x184>)
 80025c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3740      	adds	r7, #64	; 0x40
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	017d7840 	.word	0x017d7840

080025e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000000 	.word	0x20000000

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff0 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	080030dc 	.word	0x080030dc

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002628:	f7ff ffdc 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0b5b      	lsrs	r3, r3, #13
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	080030dc 	.word	0x080030dc

0800264c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e03f      	b.n	80026de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fbd0 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fa05 	bl	8002aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b08a      	sub	sp, #40	; 0x28
 80026ea:	af02      	add	r7, sp, #8
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	d17c      	bne.n	8002800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_UART_Transmit+0x2c>
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e075      	b.n	8002802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_UART_Transmit+0x3e>
 8002720:	2302      	movs	r3, #2
 8002722:	e06e      	b.n	8002802 <HAL_UART_Transmit+0x11c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2221      	movs	r2, #33	; 0x21
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800273a:	f7fe fc81 	bl	8001040 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	d108      	bne.n	8002768 <HAL_UART_Transmit+0x82>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e003      	b.n	8002770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002778:	e02a      	b.n	80027d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f91d 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e036      	b.n	8002802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3302      	adds	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e007      	b.n	80027c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1cf      	bne.n	800277a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2140      	movs	r1, #64	; 0x40
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f8ed 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e006      	b.n	8002802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b088      	sub	sp, #32
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 80c9 	bne.w	80029ba <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0c1      	b.n	80029bc <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_UARTEx_ReceiveToIdle+0x3c>
 8002842:	2302      	movs	r3, #2
 8002844:	e0ba      	b.n	80029bc <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2222      	movs	r2, #34	; 0x22
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002862:	f7fe fbed 	bl	8001040 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287c:	d108      	bne.n	8002890 <HAL_UARTEx_ReceiveToIdle+0x86>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e003      	b.n	8002898 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028a6:	e074      	b.n	8002992 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d114      	bne.n	80028e0 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e06d      	b.n	80029bc <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d13c      	bne.n	8002968 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	b29a      	uxth	r2, r3
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3302      	adds	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e01f      	b.n	800294e <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d007      	beq.n	8002928 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e008      	b.n	8002948 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002942:	b2da      	uxtb	r2, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d010      	beq.n	8002992 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002970:	f7fe fb66 	bl	8001040 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <HAL_UARTEx_ReceiveToIdle+0x17c>
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e014      	b.n	80029bc <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d185      	bne.n	80028a8 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b090      	sub	sp, #64	; 0x40
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d4:	e050      	b.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d04c      	beq.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029e4:	f7fe fb2c 	bl	8001040 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d241      	bcs.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a14:	637a      	str	r2, [r7, #52]	; 0x34
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e5      	bne.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	613b      	str	r3, [r7, #16]
   return(result);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a48:	623a      	str	r2, [r7, #32]
 8002a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	69f9      	ldr	r1, [r7, #28]
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e5      	bne.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e00f      	b.n	8002a98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d09f      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3740      	adds	r7, #64	; 0x40
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b0c0      	sub	sp, #256	; 0x100
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	68d9      	ldr	r1, [r3, #12]
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	ea40 0301 	orr.w	r3, r0, r1
 8002ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002af8:	f021 010c 	bic.w	r1, r1, #12
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b06:	430b      	orrs	r3, r1
 8002b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1a:	6999      	ldr	r1, [r3, #24]
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	ea40 0301 	orr.w	r3, r0, r1
 8002b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <UART_SetConfig+0x2cc>)
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d005      	beq.n	8002b40 <UART_SetConfig+0xa0>
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b8d      	ldr	r3, [pc, #564]	; (8002d70 <UART_SetConfig+0x2d0>)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d104      	bne.n	8002b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b40:	f7ff fd70 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 8002b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b48:	e003      	b.n	8002b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b4a:	f7ff fd57 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8002b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5c:	f040 810c 	bne.w	8002d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	1891      	adds	r1, r2, r2
 8002b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b7a:	415b      	adcs	r3, r3
 8002b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b82:	4621      	mov	r1, r4
 8002b84:	eb12 0801 	adds.w	r8, r2, r1
 8002b88:	4629      	mov	r1, r5
 8002b8a:	eb43 0901 	adc.w	r9, r3, r1
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba2:	4690      	mov	r8, r2
 8002ba4:	4699      	mov	r9, r3
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	eb18 0303 	adds.w	r3, r8, r3
 8002bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	eb49 0303 	adc.w	r3, r9, r3
 8002bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bce:	460b      	mov	r3, r1
 8002bd0:	18db      	adds	r3, r3, r3
 8002bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	eb42 0303 	adc.w	r3, r2, r3
 8002bda:	657b      	str	r3, [r7, #84]	; 0x54
 8002bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002be4:	f7fd faf6 	bl	80001d4 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <UART_SetConfig+0x2d4>)
 8002bee:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	011c      	lsls	r4, r3, #4
 8002bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c08:	4642      	mov	r2, r8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	1891      	adds	r1, r2, r2
 8002c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c10:	415b      	adcs	r3, r3
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c18:	4641      	mov	r1, r8
 8002c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c1e:	4649      	mov	r1, r9
 8002c20:	eb43 0b01 	adc.w	fp, r3, r1
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c38:	4692      	mov	sl, r2
 8002c3a:	469b      	mov	fp, r3
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c46:	464b      	mov	r3, r9
 8002c48:	eb4b 0303 	adc.w	r3, fp, r3
 8002c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c64:	460b      	mov	r3, r1
 8002c66:	18db      	adds	r3, r3, r3
 8002c68:	643b      	str	r3, [r7, #64]	; 0x40
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	eb42 0303 	adc.w	r3, r2, r3
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
 8002c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c7a:	f7fd faab 	bl	80001d4 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <UART_SetConfig+0x2d4>)
 8002c86:	fba3 2301 	umull	r2, r3, r3, r1
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2264      	movs	r2, #100	; 0x64
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	1acb      	subs	r3, r1, r3
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c9a:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <UART_SetConfig+0x2d4>)
 8002c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca8:	441c      	add	r4, r3
 8002caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	1891      	adds	r1, r2, r2
 8002cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cc4:	415b      	adcs	r3, r3
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ccc:	4641      	mov	r1, r8
 8002cce:	1851      	adds	r1, r2, r1
 8002cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	414b      	adcs	r3, r1
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	00cb      	lsls	r3, r1, #3
 8002ce8:	4651      	mov	r1, sl
 8002cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cee:	4651      	mov	r1, sl
 8002cf0:	00ca      	lsls	r2, r1, #3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	189b      	adds	r3, r3, r2
 8002cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d00:	464b      	mov	r3, r9
 8002d02:	460a      	mov	r2, r1
 8002d04:	eb42 0303 	adc.w	r3, r2, r3
 8002d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d20:	460b      	mov	r3, r1
 8002d22:	18db      	adds	r3, r3, r3
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d26:	4613      	mov	r3, r2
 8002d28:	eb42 0303 	adc.w	r3, r2, r3
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d36:	f7fd fa4d 	bl	80001d4 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <UART_SetConfig+0x2d4>)
 8002d40:	fba3 1302 	umull	r1, r3, r3, r2
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	2164      	movs	r1, #100	; 0x64
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	3332      	adds	r3, #50	; 0x32
 8002d52:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <UART_SetConfig+0x2d4>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	f003 0207 	and.w	r2, r3, #7
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4422      	add	r2, r4
 8002d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d68:	e105      	b.n	8002f76 <UART_SetConfig+0x4d6>
 8002d6a:	bf00      	nop
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40011400 	.word	0x40011400
 8002d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	1891      	adds	r1, r2, r2
 8002d90:	6239      	str	r1, [r7, #32]
 8002d92:	415b      	adcs	r3, r3
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
 8002d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	1854      	adds	r4, r2, r1
 8002d9e:	4649      	mov	r1, r9
 8002da0:	eb43 0501 	adc.w	r5, r3, r1
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	00eb      	lsls	r3, r5, #3
 8002dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db2:	00e2      	lsls	r2, r4, #3
 8002db4:	4614      	mov	r4, r2
 8002db6:	461d      	mov	r5, r3
 8002db8:	4643      	mov	r3, r8
 8002dba:	18e3      	adds	r3, r4, r3
 8002dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	eb45 0303 	adc.w	r3, r5, r3
 8002dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002de6:	4629      	mov	r1, r5
 8002de8:	008b      	lsls	r3, r1, #2
 8002dea:	4621      	mov	r1, r4
 8002dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df0:	4621      	mov	r1, r4
 8002df2:	008a      	lsls	r2, r1, #2
 8002df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002df8:	f7fd f9ec 	bl	80001d4 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <UART_SetConfig+0x4e4>)
 8002e02:	fba3 2302 	umull	r2, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	011c      	lsls	r4, r3, #4
 8002e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	464b      	mov	r3, r9
 8002e20:	1891      	adds	r1, r2, r2
 8002e22:	61b9      	str	r1, [r7, #24]
 8002e24:	415b      	adcs	r3, r3
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	1851      	adds	r1, r2, r1
 8002e30:	6139      	str	r1, [r7, #16]
 8002e32:	4649      	mov	r1, r9
 8002e34:	414b      	adcs	r3, r1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e44:	4659      	mov	r1, fp
 8002e46:	00cb      	lsls	r3, r1, #3
 8002e48:	4651      	mov	r1, sl
 8002e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4e:	4651      	mov	r1, sl
 8002e50:	00ca      	lsls	r2, r1, #3
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	4642      	mov	r2, r8
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e60:	464b      	mov	r3, r9
 8002e62:	460a      	mov	r2, r1
 8002e64:	eb42 0303 	adc.w	r3, r2, r3
 8002e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e84:	4649      	mov	r1, r9
 8002e86:	008b      	lsls	r3, r1, #2
 8002e88:	4641      	mov	r1, r8
 8002e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e8e:	4641      	mov	r1, r8
 8002e90:	008a      	lsls	r2, r1, #2
 8002e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e96:	f7fd f99d 	bl	80001d4 <__aeabi_uldivmod>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <UART_SetConfig+0x4e4>)
 8002ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	2164      	movs	r1, #100	; 0x64
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	3332      	adds	r3, #50	; 0x32
 8002eb2:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <UART_SetConfig+0x4e4>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebe:	441c      	add	r4, r3
 8002ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ec8:	677a      	str	r2, [r7, #116]	; 0x74
 8002eca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ece:	4642      	mov	r2, r8
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ede:	4641      	mov	r1, r8
 8002ee0:	1851      	adds	r1, r2, r1
 8002ee2:	6039      	str	r1, [r7, #0]
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	414b      	adcs	r3, r1
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	00cb      	lsls	r3, r1, #3
 8002efa:	4651      	mov	r1, sl
 8002efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f00:	4651      	mov	r1, sl
 8002f02:	00ca      	lsls	r2, r1, #3
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4642      	mov	r2, r8
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f10:	464b      	mov	r3, r9
 8002f12:	460a      	mov	r2, r1
 8002f14:	eb42 0303 	adc.w	r3, r2, r3
 8002f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	663b      	str	r3, [r7, #96]	; 0x60
 8002f24:	667a      	str	r2, [r7, #100]	; 0x64
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f32:	4649      	mov	r1, r9
 8002f34:	008b      	lsls	r3, r1, #2
 8002f36:	4641      	mov	r1, r8
 8002f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	008a      	lsls	r2, r1, #2
 8002f40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f44:	f7fd f946 	bl	80001d4 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <UART_SetConfig+0x4e4>)
 8002f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2164      	movs	r1, #100	; 0x64
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	3332      	adds	r3, #50	; 0x32
 8002f60:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <UART_SetConfig+0x4e4>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4422      	add	r2, r4
 8002f74:	609a      	str	r2, [r3, #8]
}
 8002f76:	bf00      	nop
 8002f78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f82:	bf00      	nop
 8002f84:	51eb851f 	.word	0x51eb851f

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4d0d      	ldr	r5, [pc, #52]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8c:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	2600      	movs	r6, #0
 8002f94:	42a6      	cmp	r6, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	4d0b      	ldr	r5, [pc, #44]	; (8002fc8 <__libc_init_array+0x40>)
 8002f9a:	4c0c      	ldr	r4, [pc, #48]	; (8002fcc <__libc_init_array+0x44>)
 8002f9c:	f000 f820 	bl	8002fe0 <_init>
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb0:	4798      	blx	r3
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fba:	4798      	blx	r3
 8002fbc:	3601      	adds	r6, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	080030ec 	.word	0x080030ec
 8002fc4:	080030ec 	.word	0x080030ec
 8002fc8:	080030ec 	.word	0x080030ec
 8002fcc:	080030f0 	.word	0x080030f0

08002fd0 <memset>:
 8002fd0:	4402      	add	r2, r0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	f803 1b01 	strb.w	r1, [r3], #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
