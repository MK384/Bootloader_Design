
Bootloader_design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800c468  0800c468  0001c468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c974  0800c974  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c97c  0800c97c  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c97c  0800c97c  0001c97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  200002d0  0800cc54  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001710  0800cc54  00021710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9c9  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c80  00000000  00000000  0002ecc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00031950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019655  00000000  00000000  00033088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a3  00000000  00000000  0004c6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a50  00000000  00000000  0005cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e55d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004620  00000000  00000000  000e5620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c450 	.word	0x0800c450

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800c450 	.word	0x0800c450

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fa52 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f820 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f88a 	bl	800112c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001018:	f006 f854 	bl	80070c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	480a      	ldr	r0, [pc, #40]	; (800104c <main+0x44>)
 8001024:	f000 fd72 	bl	8001b0c <HAL_GPIO_WritePin>
//		 println("Hello world !");

		 HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f000 fab4 	bl	8001598 <HAL_Delay>

		 print("Hello world!");
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <main+0x48>)
 8001032:	f006 fa4c 	bl	80074ce <print>

		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <main+0x44>)
 800103e:	f000 fd65 	bl	8001b0c <HAL_GPIO_WritePin>

		 HAL_Delay(1000);
 8001042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001046:	f000 faa7 	bl	8001598 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800104a:	e7e7      	b.n	800101c <main+0x14>
 800104c:	40020800 	.word	0x40020800
 8001050:	0800c468 	.word	0x0800c468

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f006 fd86 	bl	8007b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <SystemClock_Config+0xd0>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a28      	ldr	r2, [pc, #160]	; (8001124 <SystemClock_Config+0xd0>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <SystemClock_Config+0xd0>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <SystemClock_Config+0xd4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <SystemClock_Config+0xd4>)
 80010a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SystemClock_Config+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010c8:	2319      	movs	r3, #25
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010d6:	2307      	movs	r3, #7
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 ffaa 	bl	8003038 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ea:	f000 f87f 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f2:	2302      	movs	r3, #2
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2102      	movs	r1, #2
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fa0c 	bl	8003528 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001116:	f000 f869 	bl	80011ec <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <MX_GPIO_Init+0xb4>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_GPIO_Init+0xb4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_GPIO_Init+0xb8>)
 800119e:	f000 fcb5 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	480a      	ldr	r0, [pc, #40]	; (80011e4 <MX_GPIO_Init+0xb8>)
 80011bc:	f000 fb22 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_GPIO_Init+0xbc>)
 80011d4:	f000 fb16 	bl	8001804 <HAL_GPIO_Init>

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020000 	.word	0x40020000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f960 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <OTG_FS_IRQHandler+0x10>)
 80012a2:	f000 fd9c 	bl	8001dde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000fd4 	.word	0x20000fd4

080012b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ca:	f006 fc21 	bl	8007b10 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2216      	movs	r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_exit>:

void _exit (int status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffe7 	bl	80012c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f2:	e7fe      	b.n	80012f2 <_exit+0x12>

080012f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00a      	b.n	800131c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001306:	f3af 8000 	nop.w
 800130a:	4601      	mov	r1, r0
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf0      	blt.n	8001306 <_read+0x12>
  }

  return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e009      	b.n	8001354 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf1      	blt.n	8001340 <_write+0x12>
  }
  return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_close>:

int _close(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	605a      	str	r2, [r3, #4]
  return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_isatty>:

int _isatty(int file)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f006 fb86 	bl	8007b10 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20010000 	.word	0x20010000
 8001430:	00000400 	.word	0x00000400
 8001434:	200002ec 	.word	0x200002ec
 8001438:	20001710 	.word	0x20001710

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800147c:	4c0b      	ldr	r4, [pc, #44]	; (80014ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148a:	f7ff ffd7 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f006 fb45 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fdb9 	bl	8001008 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80014a4:	0800c984 	.word	0x0800c984
  ldr r2, =_sbss
 80014a8:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80014ac:	20001710 	.word	0x20001710

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <HAL_Init+0x40>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_Init+0x40>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x40>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f94f 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fe86 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f967 	bl	80017ea <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f92f 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000000 	.word	0x20000000
 8001550:	20000008 	.word	0x20000008
 8001554:	20000004 	.word	0x20000004

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	200002f0 	.word	0x200002f0

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200002f0 	.word	0x200002f0

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e159      	b.n	8001ad4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8148 	bne.w	8001ace <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d005      	beq.n	8001856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	2b02      	cmp	r3, #2
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d017      	beq.n	80018f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a2 	beq.w	8001ace <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a56      	ldr	r2, [pc, #344]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_GPIO_Init+0x2ec>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x202>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2f4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x1fe>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <HAL_GPIO_Init+0x2f8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x1fa>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_GPIO_Init+0x2fc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x1f6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_GPIO_Init+0x300>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x1f2>
 80019f2:	2304      	movs	r3, #4
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 8001a06:	2300      	movs	r3, #0
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f002 0203 	and.w	r2, r2, #3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x2ec>)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9e:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	f67f aea2 	bls.w	8001820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b40:	b08f      	sub	sp, #60	; 0x3c
 8001b42:	af0a      	add	r7, sp, #40	; 0x28
 8001b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e10f      	b.n	8001d70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f005 fcc6 	bl	80074fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 ff97 	bl	8003ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	687e      	ldr	r6, [r7, #4]
 8001b9c:	466d      	mov	r5, sp
 8001b9e:	f106 0410 	add.w	r4, r6, #16
 8001ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bb2:	1d33      	adds	r3, r6, #4
 8001bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb6:	6838      	ldr	r0, [r7, #0]
 8001bb8:	f001 fe6e 	bl	8003898 <USB_CoreInit>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0d0      	b.n	8001d70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 ff85 	bl	8003ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e04a      	b.n	8001c76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	333d      	adds	r3, #61	; 0x3d
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	333c      	adds	r3, #60	; 0x3c
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3344      	adds	r3, #68	; 0x44
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3340      	adds	r3, #64	; 0x40
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	3348      	adds	r3, #72	; 0x48
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	334c      	adds	r3, #76	; 0x4c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	3354      	adds	r3, #84	; 0x54
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3301      	adds	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3af      	bcc.n	8001be0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e044      	b.n	8001d10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3b5      	bcc.n	8001c86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	687e      	ldr	r6, [r7, #4]
 8001d22:	466d      	mov	r5, sp
 8001d24:	f106 0410 	add.w	r4, r6, #16
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d38:	1d33      	adds	r3, r6, #4
 8001d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f001 ff1d 	bl	8003b7c <USB_DevInit>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e00d      	b.n	8001d70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 f86c 	bl	8004e46 <USB_DevDisconnect>

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_PCD_Start+0x1c>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e020      	b.n	8001dd6 <HAL_PCD_Start+0x5e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d109      	bne.n	8001db8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d005      	beq.n	8001db8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fe6f 	bl	8003aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 f81c 	bl	8004e04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dde:	b590      	push	{r4, r7, lr}
 8001de0:	b08d      	sub	sp, #52	; 0x34
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 f8da 	bl	8004fae <USB_GetMode>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 848a 	bne.w	8002716 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 f83e 	bl	8004e88 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8480 	beq.w	8002714 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f82b 	bl	8004e88 <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d107      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f002 0202 	and.w	r2, r2, #2
 8001e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 f819 	bl	8004e88 <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d161      	bne.n	8001f24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 020f 	and.w	r2, r3, #15
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	0c5b      	lsrs	r3, r3, #17
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d124      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d035      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6a38      	ldr	r0, [r7, #32]
 8001ebc:	f002 fe50 	bl	8004b60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ecc:	441a      	add	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ede:	441a      	add	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	621a      	str	r2, [r3, #32]
 8001ee4:	e016      	b.n	8001f14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	0c5b      	lsrs	r3, r3, #17
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d110      	bne.n	8001f14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ef8:	2208      	movs	r2, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	6a38      	ldr	r0, [r7, #32]
 8001efe:	f002 fe2f 	bl	8004b60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f0e:	441a      	add	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0210 	orr.w	r2, r2, #16
 8001f22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 ffad 	bl	8004e88 <USB_ReadInterrupts>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f38:	f040 80a7 	bne.w	800208a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 ffb2 	bl	8004eae <USB_ReadDevAllOutEpInterrupt>
 8001f4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f4c:	e099      	b.n	8002082 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 808e 	beq.w	8002076 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 ffd6 	bl	8004f16 <USB_ReadDevOutEPInterrupt>
 8001f6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f82:	461a      	mov	r2, r3
 8001f84:	2301      	movs	r3, #1
 8001f86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fec2 	bl	8002d14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2308      	movs	r3, #8
 8001faa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 ff98 	bl	8002ee4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2310      	movs	r3, #16
 8001fce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d030      	beq.n	800203c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b80      	cmp	r3, #128	; 0x80
 8001fe4:	d109      	bne.n	8001ffa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	78db      	ldrb	r3, [r3, #3]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d108      	bne.n	800202a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2200      	movs	r2, #0
 800201c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f005 fb65 	bl	80076f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	2302      	movs	r3, #2
 800203a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002052:	461a      	mov	r2, r3
 8002054:	2320      	movs	r3, #32
 8002056:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002074:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3301      	adds	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f af62 	bne.w	8001f4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fefa 	bl	8004e88 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800209e:	f040 80db 	bne.w	8002258 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 ff1b 	bl	8004ee2 <USB_ReadDevAllInEpInterrupt>
 80020ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020b2:	e0cd      	b.n	8002250 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80c2 	beq.w	8002244 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 ff41 	bl	8004f52 <USB_ReadDevInEPInterrupt>
 80020d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d057      	beq.n	800218c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	2201      	movs	r2, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69f9      	ldr	r1, [r7, #28]
 80020f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020fc:	4013      	ands	r3, r2
 80020fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800210c:	461a      	mov	r2, r3
 800210e:	2301      	movs	r3, #1
 8002110:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d132      	bne.n	8002180 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	334c      	adds	r3, #76	; 0x4c
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4403      	add	r3, r0
 800213a:	3348      	adds	r3, #72	; 0x48
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4419      	add	r1, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4403      	add	r3, r0
 800214e:	334c      	adds	r3, #76	; 0x4c
 8002150:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	2b00      	cmp	r3, #0
 8002156:	d113      	bne.n	8002180 <HAL_PCD_IRQHandler+0x3a2>
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3354      	adds	r3, #84	; 0x54
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002178:	461a      	mov	r2, r3
 800217a:	2101      	movs	r1, #1
 800217c:	f002 ff48 	bl	8005010 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f005 fa39 	bl	80075fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a2:	461a      	mov	r2, r3
 80021a4:	2308      	movs	r3, #8
 80021a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021be:	461a      	mov	r2, r3
 80021c0:	2310      	movs	r3, #16
 80021c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021da:	461a      	mov	r2, r3
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d023      	beq.n	8002232 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ec:	6a38      	ldr	r0, [r7, #32]
 80021ee:	f001 fe29 	bl	8003e44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	78db      	ldrb	r3, [r3, #3]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2200      	movs	r2, #0
 8002212:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f005 fa7c 	bl	8007718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222c:	461a      	mov	r2, r3
 800222e:	2302      	movs	r3, #2
 8002230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800223c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fcdb 	bl	8002bfa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	3301      	adds	r3, #1
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	f47f af2e 	bne.w	80020b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fe13 	bl	8004e88 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800226c:	d122      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002288:	2b01      	cmp	r3, #1
 800228a:	d108      	bne.n	800229e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002294:	2100      	movs	r1, #0
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fec2 	bl	8003020 <HAL_PCDEx_LPM_Callback>
 800229c:	e002      	b.n	80022a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f005 fa1a 	bl	80076d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 fde5 	bl	8004e88 <USB_ReadInterrupts>
 80022be:	4603      	mov	r3, r0
 80022c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c8:	d112      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f005 f9d6 	bl	800768c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fdc7 	bl	8004e88 <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002304:	f040 80b7 	bne.w	8002476 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2110      	movs	r1, #16
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fd8e 	bl	8003e44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232c:	e046      	b.n	80023bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233a:	461a      	mov	r2, r3
 800233c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002340:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002352:	0151      	lsls	r1, r2, #5
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	440a      	add	r2, r1
 8002358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800235c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002360:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002374:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002386:	0151      	lsls	r1, r2, #5
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	440a      	add	r2, r1
 800238c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002394:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a6:	0151      	lsls	r1, r2, #5
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	440a      	add	r2, r1
 80023ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	3301      	adds	r3, #1
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d3b3      	bcc.n	800232e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f2:	f043 030b 	orr.w	r3, r3, #11
 80023f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002408:	f043 030b 	orr.w	r3, r3, #11
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	e015      	b.n	800243c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002422:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002426:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002436:	f043 030b 	orr.w	r3, r3, #11
 800243a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800244a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800244e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002460:	461a      	mov	r2, r3
 8002462:	f002 fdd5 	bl	8005010 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fd04 	bl	8004e88 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	d124      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fd9a 	bl	8004fca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fd4f 	bl	8003f3e <USB_GetDevSpeed>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681c      	ldr	r4, [r3, #0]
 80024ac:	f001 f9e8 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80024b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4620      	mov	r0, r4
 80024bc:	f001 fa4e 	bl	800395c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f005 f8c4 	bl	800764e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fcd4 	bl	8004e88 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d10a      	bne.n	8002500 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f005 f8a1 	bl	8007632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f002 0208 	and.w	r2, r2, #8
 80024fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fcbf 	bl	8004e88 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d122      	bne.n	800255a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002520:	2301      	movs	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	e014      	b.n	8002550 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fb27 	bl	8002b98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	429a      	cmp	r2, r3
 8002558:	d3e5      	bcc.n	8002526 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fc92 	bl	8004e88 <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d13b      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002570:	2301      	movs	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e02b      	b.n	80025ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	3340      	adds	r3, #64	; 0x40
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800259c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da12      	bge.n	80025c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	333f      	adds	r3, #63	; 0x3f
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fae8 	bl	8002b98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	3301      	adds	r3, #1
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3ce      	bcc.n	8002576 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 fc4b 	bl	8004e88 <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fc:	d155      	bne.n	80026aa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025fe:	2301      	movs	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	e045      	b.n	8002690 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d12e      	bne.n	800268a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800262c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	da2b      	bge.n	800268a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800263e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002642:	429a      	cmp	r2, r3
 8002644:	d121      	bne.n	800268a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	6053      	str	r3, [r2, #4]
            break;
 8002688:	e007      	b.n	800269a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	429a      	cmp	r2, r3
 8002698:	d3b4      	bcc.n	8002604 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fbea 	bl	8004e88 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d10a      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f005 f83b 	bl	800773c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fbd4 	bl	8004e88 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d115      	bne.n	8002716 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 f82b 	bl	8007758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	e000      	b.n	8002716 <HAL_PCD_IRQHandler+0x938>
      return;
 8002714:	bf00      	nop
    }
  }
}
 8002716:	3734      	adds	r7, #52	; 0x34
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}

0800271c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_PCD_SetAddress+0x1a>
 8002732:	2302      	movs	r3, #2
 8002734:	e013      	b.n	800275e <HAL_PCD_SetAddress+0x42>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fb32 	bl	8004db8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	4608      	mov	r0, r1
 8002770:	4611      	mov	r1, r2
 8002772:	461a      	mov	r2, r3
 8002774:	4603      	mov	r3, r0
 8002776:	70fb      	strb	r3, [r7, #3]
 8002778:	460b      	mov	r3, r1
 800277a:	803b      	strh	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002788:	2b00      	cmp	r3, #0
 800278a:	da0f      	bge.n	80027ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	3338      	adds	r3, #56	; 0x38
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	705a      	strb	r2, [r3, #1]
 80027aa:	e00f      	b.n	80027cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 020f 	and.w	r2, r3, #15
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	3304      	adds	r3, #4
 80027c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027d8:	883a      	ldrh	r2, [r7, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	78ba      	ldrb	r2, [r7, #2]
 80027e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027f6:	78bb      	ldrb	r3, [r7, #2]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d102      	bne.n	8002802 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_PCD_EP_Open+0xaa>
 800280c:	2302      	movs	r3, #2
 800280e:	e00e      	b.n	800282e <HAL_PCD_EP_Open+0xc8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fbb2 	bl	8003f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800282c:	7afb      	ldrb	r3, [r7, #11]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002846:	2b00      	cmp	r3, #0
 8002848:	da0f      	bge.n	800286a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	3338      	adds	r3, #56	; 0x38
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	3304      	adds	r3, #4
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	705a      	strb	r2, [r3, #1]
 8002868:	e00f      	b.n	800288a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_PCD_EP_Close+0x6e>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e00e      	b.n	80028c2 <HAL_PCD_EP_Close+0x8c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fbf0 	bl	8004098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	460b      	mov	r3, r1
 80028d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	f003 020f 	and.w	r2, r3, #15
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	b2da      	uxtb	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	f001 fecf 	bl	80046e0 <USB_EP0StartXfer>
 8002942:	e008      	b.n	8002956 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6979      	ldr	r1, [r7, #20]
 8002952:	f001 fc7d 	bl	8004250 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	460b      	mov	r3, r1
 800299e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a0:	7afb      	ldrb	r3, [r7, #11]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3338      	adds	r3, #56	; 0x38
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2201      	movs	r2, #1
 80029ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d0:	7afb      	ldrb	r3, [r7, #11]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	f001 fe6d 	bl	80046e0 <USB_EP0StartXfer>
 8002a06:	e008      	b.n	8002a1a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6979      	ldr	r1, [r7, #20]
 8002a16:	f001 fc1b 	bl	8004250 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d901      	bls.n	8002a42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e050      	b.n	8002ae4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da0f      	bge.n	8002a6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3338      	adds	r3, #56	; 0x38
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	705a      	strb	r2, [r3, #1]
 8002a68:	e00d      	b.n	8002a86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_EP_SetStall+0x82>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e01e      	b.n	8002ae4 <HAL_PCD_EP_SetStall+0xc0>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 f8ab 	bl	8004c10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	b2d9      	uxtb	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f002 fa9b 	bl	8005010 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	f003 020f 	and.w	r2, r3, #15
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d901      	bls.n	8002b0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e042      	b.n	8002b90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da0f      	bge.n	8002b32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	3338      	adds	r3, #56	; 0x38
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	705a      	strb	r2, [r3, #1]
 8002b30:	e00f      	b.n	8002b52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_PCD_EP_ClrStall+0x86>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e00e      	b.n	8002b90 <HAL_PCD_EP_ClrStall+0xa4>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 f8b3 	bl	8004cec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da0c      	bge.n	8002bc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3338      	adds	r3, #56	; 0x38
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e00c      	b.n	8002be0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 fed2 	bl	8004990 <USB_EPStopXfer>
 8002bec:	4603      	mov	r3, r0
 8002bee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b08a      	sub	sp, #40	; 0x28
 8002bfe:	af02      	add	r7, sp, #8
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	3338      	adds	r3, #56	; 0x38
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d901      	bls.n	8002c32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06c      	b.n	8002d0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d902      	bls.n	8002c4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3303      	adds	r3, #3
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c56:	e02b      	b.n	8002cb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d902      	bls.n	8002c74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3303      	adds	r3, #3
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6919      	ldr	r1, [r3, #16]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4603      	mov	r3, r0
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f001 ff26 	bl	8004ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	441a      	add	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	441a      	add	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d809      	bhi.n	8002cda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d203      	bcs.n	8002cda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1be      	bne.n	8002c58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d811      	bhi.n	8002d0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	2201      	movs	r2, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	6939      	ldr	r1, [r7, #16]
 8002d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d06:	4013      	ands	r3, r2
 8002d08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	333c      	adds	r3, #60	; 0x3c
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d17b      	bne.n	8002e42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4a61      	ldr	r2, [pc, #388]	; (8002edc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f240 80b9 	bls.w	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80b3 	beq.w	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d76:	461a      	mov	r2, r3
 8002d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7c:	6093      	str	r3, [r2, #8]
 8002d7e:	e0a7      	b.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	461a      	mov	r2, r3
 8002d98:	2320      	movs	r3, #32
 8002d9a:	6093      	str	r3, [r2, #8]
 8002d9c:	e098      	b.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f040 8093 	bne.w	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d90f      	bls.n	8002dd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	e07e      	b.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	3304      	adds	r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d114      	bne.n	8002e34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2101      	movs	r1, #1
 8002e20:	f002 f8f6 	bl	8005010 <USB_EP0_OutStart>
 8002e24:	e006      	b.n	8002e34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f004 fbc4 	bl	80075c8 <HAL_PCD_DataOutStageCallback>
 8002e40:	e046      	b.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d124      	bne.n	8002e94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e66:	6093      	str	r3, [r2, #8]
 8002e68:	e032      	b.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	461a      	mov	r2, r3
 8002e82:	2320      	movs	r3, #32
 8002e84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f004 fb9b 	bl	80075c8 <HAL_PCD_DataOutStageCallback>
 8002e92:	e01d      	b.n	8002ed0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d114      	bne.n	8002ec4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	f002 f8a6 	bl	8005010 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f004 fb7c 	bl	80075c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	4f54300a 	.word	0x4f54300a
 8002ee0:	4f54310a 	.word	0x4f54310a

08002ee4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	333c      	adds	r3, #60	; 0x3c
 8002efc:	3304      	adds	r3, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90e      	bls.n	8002f38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f004 fb33 	bl	80075a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d90c      	bls.n	8002f60 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d108      	bne.n	8002f60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	f002 f858 	bl	8005010 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	4f54300a 	.word	0x4f54300a

08002f70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f8e:	883b      	ldrh	r3, [r7, #0]
 8002f90:	0419      	lsls	r1, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f9c:	e028      	b.n	8002ff0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e00d      	b.n	8002fce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	3340      	adds	r3, #64	; 0x40
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3ec      	bcc.n	8002fb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fd8:	883b      	ldrh	r3, [r7, #0]
 8002fda:	0418      	lsls	r0, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4302      	orrs	r2, r0
 8002fe8:	3340      	adds	r3, #64	; 0x40
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e267      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d075      	beq.n	8003142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003056:	4b88      	ldr	r3, [pc, #544]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d00c      	beq.n	800307c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4b85      	ldr	r3, [pc, #532]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306a:	2b08      	cmp	r3, #8
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b82      	ldr	r3, [pc, #520]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	d10b      	bne.n	8003094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b7e      	ldr	r3, [pc, #504]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05b      	beq.n	8003140 <HAL_RCC_OscConfig+0x108>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d157      	bne.n	8003140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e242      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x74>
 800309e:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a75      	ldr	r2, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x98>
 80030b6:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6f      	ldr	r2, [pc, #444]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6c      	ldr	r2, [pc, #432]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xb0>
 80030d0:	4b69      	ldr	r3, [pc, #420]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a68      	ldr	r2, [pc, #416]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fa46 	bl	8001580 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe fa42 	bl	8001580 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e207      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xc0>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fa32 	bl	8001580 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fa2e 	bl	8001580 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1f3      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b51      	ldr	r3, [pc, #324]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0xe8>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314e:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b44      	ldr	r3, [pc, #272]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b41      	ldr	r3, [pc, #260]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1c7      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCC_OscConfig+0x244>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe f9e7 	bl	8001580 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe f9e3 	bl	8001580 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1a8      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4925      	ldr	r1, [pc, #148]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_OscConfig+0x244>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe f9c6 	bl	8001580 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe f9c2 	bl	8001580 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e187      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d036      	beq.n	8003290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_RCC_OscConfig+0x248>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe f9a6 	bl	8001580 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe f9a2 	bl	8001580 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e167      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x240>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x200>
 8003256:	e01b      	b.n	8003290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_OscConfig+0x248>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe f98f 	bl	8001580 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	e00e      	b.n	8003284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003266:	f7fe f98b 	bl	8001580 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d907      	bls.n	8003284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e150      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
 8003278:	40023800 	.word	0x40023800
 800327c:	42470000 	.word	0x42470000
 8003280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ea      	bne.n	8003266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8097 	beq.w	80033cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4b81      	ldr	r3, [pc, #516]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	4b7d      	ldr	r3, [pc, #500]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a7c      	ldr	r2, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b7a      	ldr	r3, [pc, #488]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ca:	2301      	movs	r3, #1
 80032cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b77      	ldr	r3, [pc, #476]	; (80034ac <HAL_RCC_OscConfig+0x474>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d118      	bne.n	800330c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032da:	4b74      	ldr	r3, [pc, #464]	; (80034ac <HAL_RCC_OscConfig+0x474>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a73      	ldr	r2, [pc, #460]	; (80034ac <HAL_RCC_OscConfig+0x474>)
 80032e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e6:	f7fe f94b 	bl	8001580 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ee:	f7fe f947 	bl	8001580 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e10c      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_OscConfig+0x474>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x2ea>
 8003314:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a63      	ldr	r2, [pc, #396]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	e01c      	b.n	800335c <HAL_RCC_OscConfig+0x324>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b05      	cmp	r3, #5
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x30c>
 800332a:	4b5f      	ldr	r3, [pc, #380]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a5e      	ldr	r2, [pc, #376]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003330:	f043 0304 	orr.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	4b5c      	ldr	r3, [pc, #368]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0x324>
 8003344:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a57      	ldr	r2, [pc, #348]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a54      	ldr	r2, [pc, #336]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 0304 	bic.w	r3, r3, #4
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d015      	beq.n	8003390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe f90c 	bl	8001580 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe f908 	bl	8001580 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0cb      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ee      	beq.n	800336c <HAL_RCC_OscConfig+0x334>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003390:	f7fe f8f6 	bl	8001580 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fe f8f2 	bl	8001580 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0b5      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ee      	bne.n	8003398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	4a38      	ldr	r2, [pc, #224]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80033c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a1 	beq.w	8003518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033d6:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d05c      	beq.n	800349c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d141      	bne.n	800346e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCC_OscConfig+0x478>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe f8c6 	bl	8001580 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe f8c2 	bl	8001580 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e087      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	3b01      	subs	r3, #1
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	491b      	ldr	r1, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x478>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fe f89b 	bl	8001580 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe f897 	bl	8001580 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e05c      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x416>
 800346c:	e054      	b.n	8003518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RCC_OscConfig+0x478>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe f884 	bl	8001580 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe f880 	bl	8001580 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e045      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x470>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x444>
 800349a:	e03d      	b.n	8003518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e038      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40007000 	.word	0x40007000
 80034b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x4ec>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d028      	beq.n	8003514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d121      	bne.n	8003514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d11a      	bne.n	8003514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034e4:	4013      	ands	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d111      	bne.n	8003514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	3b01      	subs	r3, #1
 80034fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800

08003528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0cc      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800353c:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d90c      	bls.n	8003564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0b8      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003594:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800359e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a0:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	494d      	ldr	r1, [pc, #308]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d044      	beq.n	8003648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d119      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e07f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e067      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4934      	ldr	r1, [pc, #208]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fd ffb2 	bl	8001580 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fd ffae 	bl	8001580 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e04f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d20c      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e032      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4916      	ldr	r1, [pc, #88]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	490e      	ldr	r1, [pc, #56]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ae:	f000 f821 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4602      	mov	r2, r0
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	490a      	ldr	r1, [pc, #40]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	5ccb      	ldrb	r3, [r1, r3]
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd ff12 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00
 80036e4:	40023800 	.word	0x40023800
 80036e8:	0800c4c0 	.word	0x0800c4c0
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f8:	b090      	sub	sp, #64	; 0x40
 80036fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003700:	2300      	movs	r3, #0
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	2300      	movs	r3, #0
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b08      	cmp	r3, #8
 8003716:	d00d      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x40>
 8003718:	2b08      	cmp	r3, #8
 800371a:	f200 80a1 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x16c>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x34>
 8003722:	2b04      	cmp	r3, #4
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x3a>
 8003726:	e09b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_GetSysClockFreq+0x184>)
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800372c:	e09b      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_RCC_GetSysClockFreq+0x188>)
 8003730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003732:	e098      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d028      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374a:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	2200      	movs	r2, #0
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	627a      	str	r2, [r7, #36]	; 0x24
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800375c:	2100      	movs	r1, #0
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_GetSysClockFreq+0x188>)
 8003760:	fb03 f201 	mul.w	r2, r3, r1
 8003764:	2300      	movs	r3, #0
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	4413      	add	r3, r2
 800376c:	4a43      	ldr	r2, [pc, #268]	; (800387c <HAL_RCC_GetSysClockFreq+0x188>)
 800376e:	fba0 1202 	umull	r1, r2, r0, r2
 8003772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003774:	460a      	mov	r2, r1
 8003776:	62ba      	str	r2, [r7, #40]	; 0x28
 8003778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377a:	4413      	add	r3, r2
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	2200      	movs	r2, #0
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	61fa      	str	r2, [r7, #28]
 8003786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800378a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800378e:	f7fd fa83 	bl	8000c98 <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4613      	mov	r3, r2
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379a:	e053      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b35      	ldr	r3, [pc, #212]	; (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	2200      	movs	r2, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	617a      	str	r2, [r7, #20]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037ae:	f04f 0b00 	mov.w	fp, #0
 80037b2:	4652      	mov	r2, sl
 80037b4:	465b      	mov	r3, fp
 80037b6:	f04f 0000 	mov.w	r0, #0
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	0159      	lsls	r1, r3, #5
 80037c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c4:	0150      	lsls	r0, r2, #5
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	ebb2 080a 	subs.w	r8, r2, sl
 80037ce:	eb63 090b 	sbc.w	r9, r3, fp
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037e6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ea:	eb63 0509 	sbc.w	r5, r3, r9
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	00eb      	lsls	r3, r5, #3
 80037f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fc:	00e2      	lsls	r2, r4, #3
 80037fe:	4614      	mov	r4, r2
 8003800:	461d      	mov	r5, r3
 8003802:	eb14 030a 	adds.w	r3, r4, sl
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	eb45 030b 	adc.w	r3, r5, fp
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800381a:	4629      	mov	r1, r5
 800381c:	028b      	lsls	r3, r1, #10
 800381e:	4621      	mov	r1, r4
 8003820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003824:	4621      	mov	r1, r4
 8003826:	028a      	lsls	r2, r1, #10
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382e:	2200      	movs	r2, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	60fa      	str	r2, [r7, #12]
 8003834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003838:	f7fd fa2e 	bl	8000c98 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetSysClockFreq+0x184>)
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003868:	4618      	mov	r0, r3
 800386a:	3740      	adds	r7, #64	; 0x40
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	017d7840 	.word	0x017d7840

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000

08003898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003898:	b084      	sub	sp, #16
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	f107 001c 	add.w	r0, r7, #28
 80038a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d122      	bne.n	80038f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f001 fbee 	bl	80050cc <USB_CoreReset>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e01a      	b.n	800392c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f001 fbe2 	bl	80050cc <USB_CoreReset>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
 800391e:	e005      	b.n	800392c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10b      	bne.n	800394a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f043 0206 	orr.w	r2, r3, #6
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003956:	b004      	add	sp, #16
 8003958:	4770      	bx	lr
	...

0800395c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d165      	bne.n	8003a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <USB_SetTurnaroundTime+0x11c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d906      	bls.n	8003986 <USB_SetTurnaroundTime+0x2a>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <USB_SetTurnaroundTime+0x120>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d202      	bcs.n	8003986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003980:	230f      	movs	r3, #15
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e062      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <USB_SetTurnaroundTime+0x120>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d306      	bcc.n	800399c <USB_SetTurnaroundTime+0x40>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <USB_SetTurnaroundTime+0x124>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d202      	bcs.n	800399c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003996:	230e      	movs	r3, #14
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e057      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4a38      	ldr	r2, [pc, #224]	; (8003a80 <USB_SetTurnaroundTime+0x124>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d306      	bcc.n	80039b2 <USB_SetTurnaroundTime+0x56>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4a37      	ldr	r2, [pc, #220]	; (8003a84 <USB_SetTurnaroundTime+0x128>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d202      	bcs.n	80039b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039ac:	230d      	movs	r3, #13
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e04c      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4a33      	ldr	r2, [pc, #204]	; (8003a84 <USB_SetTurnaroundTime+0x128>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d306      	bcc.n	80039c8 <USB_SetTurnaroundTime+0x6c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <USB_SetTurnaroundTime+0x12c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d802      	bhi.n	80039c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039c2:	230c      	movs	r3, #12
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e041      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <USB_SetTurnaroundTime+0x12c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d906      	bls.n	80039de <USB_SetTurnaroundTime+0x82>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <USB_SetTurnaroundTime+0x130>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d802      	bhi.n	80039de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039d8:	230b      	movs	r3, #11
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e036      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <USB_SetTurnaroundTime+0x130>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d906      	bls.n	80039f4 <USB_SetTurnaroundTime+0x98>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <USB_SetTurnaroundTime+0x134>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d802      	bhi.n	80039f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039ee:	230a      	movs	r3, #10
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e02b      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <USB_SetTurnaroundTime+0x134>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d906      	bls.n	8003a0a <USB_SetTurnaroundTime+0xae>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <USB_SetTurnaroundTime+0x138>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d202      	bcs.n	8003a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a04:	2309      	movs	r3, #9
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e020      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <USB_SetTurnaroundTime+0x138>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d306      	bcc.n	8003a20 <USB_SetTurnaroundTime+0xc4>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4a20      	ldr	r2, [pc, #128]	; (8003a98 <USB_SetTurnaroundTime+0x13c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d802      	bhi.n	8003a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e015      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <USB_SetTurnaroundTime+0x13c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d906      	bls.n	8003a36 <USB_SetTurnaroundTime+0xda>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <USB_SetTurnaroundTime+0x140>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d202      	bcs.n	8003a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a30:	2307      	movs	r3, #7
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00a      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a36:	2306      	movs	r3, #6
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e007      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a42:	2309      	movs	r3, #9
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e001      	b.n	8003a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a48:	2309      	movs	r3, #9
 8003a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	00d8acbf 	.word	0x00d8acbf
 8003a7c:	00e4e1c0 	.word	0x00e4e1c0
 8003a80:	00f42400 	.word	0x00f42400
 8003a84:	01067380 	.word	0x01067380
 8003a88:	011a499f 	.word	0x011a499f
 8003a8c:	01312cff 	.word	0x01312cff
 8003a90:	014ca43f 	.word	0x014ca43f
 8003a94:	016e3600 	.word	0x016e3600
 8003a98:	01a6ab1f 	.word	0x01a6ab1f
 8003a9c:	01e84800 	.word	0x01e84800

08003aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d115      	bne.n	8003b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f7fd fd40 	bl	8001598 <HAL_Delay>
      ms++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f001 fa45 	bl	8004fae <USB_GetMode>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d01e      	beq.n	8003b68 <USB_SetCurrentMode+0x84>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b31      	cmp	r3, #49	; 0x31
 8003b2e:	d9f0      	bls.n	8003b12 <USB_SetCurrentMode+0x2e>
 8003b30:	e01a      	b.n	8003b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d115      	bne.n	8003b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fd fd27 	bl	8001598 <HAL_Delay>
      ms++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f001 fa2c 	bl	8004fae <USB_GetMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <USB_SetCurrentMode+0x84>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b31      	cmp	r3, #49	; 0x31
 8003b60:	d9f0      	bls.n	8003b44 <USB_SetCurrentMode+0x60>
 8003b62:	e001      	b.n	8003b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e005      	b.n	8003b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b32      	cmp	r3, #50	; 0x32
 8003b6c:	d101      	bne.n	8003b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	e009      	b.n	8003bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3340      	adds	r3, #64	; 0x40
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0e      	cmp	r3, #14
 8003bb4:	d9f2      	bls.n	8003b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11c      	bne.n	8003bf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8003bf4:	e00b      	b.n	8003c0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c20:	4619      	mov	r1, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c28:	461a      	mov	r2, r3
 8003c2a:	680b      	ldr	r3, [r1, #0]
 8003c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10c      	bne.n	8003c4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f965 	bl	8003f0c <USB_SetDevSpeed>
 8003c42:	e008      	b.n	8003c56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c44:	2101      	movs	r1, #1
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f960 	bl	8003f0c <USB_SetDevSpeed>
 8003c4c:	e003      	b.n	8003c56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c4e:	2103      	movs	r1, #3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f95b 	bl	8003f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c56:	2110      	movs	r1, #16
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f8f3 	bl	8003e44 <USB_FlushTxFifo>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f91f 	bl	8003eac <USB_FlushRxFifo>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	461a      	mov	r2, r3
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	e043      	b.n	8003d2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb8:	d118      	bne.n	8003cec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e013      	b.n	8003cfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e008      	b.n	8003cfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	3301      	adds	r3, #1
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3b7      	bcc.n	8003ca2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e043      	b.n	8003dc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d4e:	d118      	bne.n	8003d82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e013      	b.n	8003d94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e008      	b.n	8003d94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da0:	461a      	mov	r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	461a      	mov	r2, r3
 8003db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3b7      	bcc.n	8003d38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f043 0210 	orr.w	r2, r3, #16
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <USB_DevInit+0x2c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f043 0208 	orr.w	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e3c:	b004      	add	sp, #16
 8003e3e:	4770      	bx	lr
 8003e40:	803c3800 	.word	0x803c3800

08003e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <USB_FlushTxFifo+0x64>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e01b      	b.n	8003e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	daf2      	bge.n	8003e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <USB_FlushTxFifo+0x64>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e006      	b.n	8003e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d0f0      	beq.n	8003e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	00030d40 	.word	0x00030d40

08003eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <USB_FlushRxFifo+0x5c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e018      	b.n	8003efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	daf2      	bge.n	8003eb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <USB_FlushRxFifo+0x5c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e006      	b.n	8003efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d0f0      	beq.n	8003edc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	00030d40 	.word	0x00030d40

08003f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b087      	sub	sp, #28
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
 8003f62:	e00a      	b.n	8003f7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d002      	beq.n	8003f70 <USB_GetDevSpeed+0x32>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d102      	bne.n	8003f76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f70:	2302      	movs	r3, #2
 8003f72:	75fb      	strb	r3, [r7, #23]
 8003f74:	e001      	b.n	8003f7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f76:	230f      	movs	r3, #15
 8003f78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d13a      	bne.n	800401a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d155      	bne.n	8004088 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	791b      	ldrb	r3, [r3, #4]
 8003ff6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ff8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	059b      	lsls	r3, r3, #22
 8003ffe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004000:	4313      	orrs	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e036      	b.n	8004088 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004038:	4313      	orrs	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11a      	bne.n	8004088 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800406e:	430b      	orrs	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d161      	bne.n	8004178 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ca:	d11f      	bne.n	800410c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	b29b      	uxth	r3, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800412c:	4013      	ands	r3, r2
 800412e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004150:	4013      	ands	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	0159      	lsls	r1, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	440b      	add	r3, r1
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	4619      	mov	r1, r3
 8004170:	4b35      	ldr	r3, [pc, #212]	; (8004248 <USB_DeactivateEndpoint+0x1b0>)
 8004172:	4013      	ands	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
 8004176:	e060      	b.n	800423a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800418a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800418e:	d11f      	bne.n	80041d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	43db      	mvns	r3, r3
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f0:	4013      	ands	r3, r2
 80041f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	43db      	mvns	r3, r3
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004214:	4013      	ands	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0159      	lsls	r1, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	440b      	add	r3, r1
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	4619      	mov	r1, r3
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <USB_DeactivateEndpoint+0x1b4>)
 8004236:	4013      	ands	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	ec337800 	.word	0xec337800
 800424c:	eff37800 	.word	0xeff37800

08004250 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b01      	cmp	r3, #1
 800426e:	f040 815c 	bne.w	800452a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d132      	bne.n	80042e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800429c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	0cdb      	lsrs	r3, r3, #19
 80042da:	04db      	lsls	r3, r3, #19
 80042dc:	6113      	str	r3, [r2, #16]
 80042de:	e074      	b.n	80043ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	0cdb      	lsrs	r3, r3, #19
 80042fc:	04db      	lsls	r3, r3, #19
 80042fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800431e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6999      	ldr	r1, [r3, #24]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	440b      	add	r3, r1
 800433c:	1e59      	subs	r1, r3, #1
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	fbb1 f3f3 	udiv	r3, r1, r3
 8004346:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004348:	4b9d      	ldr	r3, [pc, #628]	; (80045c0 <USB_EPStartXfer+0x370>)
 800434a:	400b      	ands	r3, r1
 800434c:	69b9      	ldr	r1, [r7, #24]
 800434e:	0148      	lsls	r0, r1, #5
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	4401      	add	r1, r0
 8004354:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004358:	4313      	orrs	r3, r2
 800435a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	69b9      	ldr	r1, [r7, #24]
 8004374:	0148      	lsls	r0, r1, #5
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	4401      	add	r1, r0
 800437a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800437e:	4313      	orrs	r3, r2
 8004380:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	791b      	ldrb	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d11f      	bne.n	80043ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d14b      	bne.n	8004468 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	791b      	ldrb	r3, [r3, #4]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d128      	bne.n	8004446 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d110      	bne.n	8004426 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e00f      	b.n	8004446 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e133      	b.n	80046d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004486:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	791b      	ldrb	r3, [r3, #4]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d015      	beq.n	80044bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 811b 	beq.w	80046d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	2101      	movs	r1, #1
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	69f9      	ldr	r1, [r7, #28]
 80044b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b6:	4313      	orrs	r3, r2
 80044b8:	634b      	str	r3, [r1, #52]	; 0x34
 80044ba:	e109      	b.n	80046d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d110      	bne.n	80044ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e00f      	b.n	800450e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	440a      	add	r2, r1
 8004504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6919      	ldr	r1, [r3, #16]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	b298      	uxth	r0, r3
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4603      	mov	r3, r0
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fade 	bl	8004ae4 <USB_WritePacket>
 8004528:	e0d2      	b.n	80046d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004544:	0cdb      	lsrs	r3, r3, #19
 8004546:	04db      	lsls	r3, r3, #19
 8004548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800456c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d126      	bne.n	80045c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458c:	69b9      	ldr	r1, [r7, #24]
 800458e:	0148      	lsls	r0, r1, #5
 8004590:	69f9      	ldr	r1, [r7, #28]
 8004592:	4401      	add	r1, r0
 8004594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045ba:	6113      	str	r3, [r2, #16]
 80045bc:	e03a      	b.n	8004634 <USB_EPStartXfer+0x3e4>
 80045be:	bf00      	nop
 80045c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	1e5a      	subs	r2, r3, #1
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	8afa      	ldrh	r2, [r7, #22]
 80045e0:	fb03 f202 	mul.w	r2, r3, r2
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	8afb      	ldrh	r3, [r7, #22]
 80045f8:	04d9      	lsls	r1, r3, #19
 80045fa:	4b38      	ldr	r3, [pc, #224]	; (80046dc <USB_EPStartXfer+0x48c>)
 80045fc:	400b      	ands	r3, r1
 80045fe:	69b9      	ldr	r1, [r7, #24]
 8004600:	0148      	lsls	r0, r1, #5
 8004602:	69f9      	ldr	r1, [r7, #28]
 8004604:	4401      	add	r1, r0
 8004606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	0148      	lsls	r0, r1, #5
 8004628:	69f9      	ldr	r1, [r7, #28]
 800462a:	4401      	add	r1, r0
 800462c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004630:	4313      	orrs	r3, r2
 8004632:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d10d      	bne.n	8004656 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6919      	ldr	r1, [r3, #16]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	460a      	mov	r2, r1
 8004654:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	791b      	ldrb	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d128      	bne.n	80046b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d110      	bne.n	8004690 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00f      	b.n	80046b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	1ff80000 	.word	0x1ff80000

080046e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f040 80ce 	bne.w	800489e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d132      	bne.n	8004770 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	440a      	add	r2, r1
 8004720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800472c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	440a      	add	r2, r1
 8004744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800474c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	0cdb      	lsrs	r3, r3, #19
 800476a:	04db      	lsls	r3, r3, #19
 800476c:	6113      	str	r3, [r2, #16]
 800476e:	e04e      	b.n	800480e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	0cdb      	lsrs	r3, r3, #19
 800478c:	04db      	lsls	r3, r3, #19
 800478e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d903      	bls.n	80047c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	0148      	lsls	r0, r1, #5
 8004802:	6979      	ldr	r1, [r7, #20]
 8004804:	4401      	add	r1, r0
 8004806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800480a:	4313      	orrs	r3, r2
 800480c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d11e      	bne.n	8004852 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	461a      	mov	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e097      	b.n	8004982 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004870:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8083 	beq.w	8004982 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004898:	4313      	orrs	r3, r2
 800489a:	634b      	str	r3, [r1, #52]	; 0x34
 800489c:	e071      	b.n	8004982 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	0cdb      	lsrs	r3, r3, #19
 80048ba:	04db      	lsls	r3, r3, #19
 80048bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	6939      	ldr	r1, [r7, #16]
 8004932:	0148      	lsls	r0, r1, #5
 8004934:	6979      	ldr	r1, [r7, #20]
 8004936:	4401      	add	r1, r0
 8004938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800493c:	4313      	orrs	r3, r2
 800493e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10d      	bne.n	8004962 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6919      	ldr	r1, [r3, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	460a      	mov	r2, r1
 8004960:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d14a      	bne.n	8004a44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c6:	f040 8086 	bne.w	8004ad6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d902      	bls.n	8004a28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
          break;
 8004a26:	e056      	b.n	8004ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a40:	d0e7      	beq.n	8004a12 <USB_EPStopXfer+0x82>
 8004a42:	e048      	b.n	8004ad6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5c:	d13b      	bne.n	8004ad6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	7812      	ldrb	r2, [r2, #0]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d902      	bls.n	8004abc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8004aba:	e00c      	b.n	8004ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad4:	d0e7      	beq.n	8004aa6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	460b      	mov	r3, r1
 8004af4:	71fb      	strb	r3, [r7, #7]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d123      	bne.n	8004b52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b0a:	88bb      	ldrh	r3, [r7, #4]
 8004b0c:	3303      	adds	r3, #3
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e018      	b.n	8004b4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	031a      	lsls	r2, r3, #12
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b24:	461a      	mov	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3e2      	bcc.n	8004b18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3724      	adds	r7, #36	; 0x24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b08b      	sub	sp, #44	; 0x2c
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e014      	b.n	8004bb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	3301      	adds	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	6a3a      	ldr	r2, [r7, #32]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d3e6      	bcc.n	8004b8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004bbe:	8bfb      	ldrh	r3, [r7, #30]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01e      	beq.n	8004c02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	701a      	strb	r2, [r3, #0]
      i++;
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	3301      	adds	r3, #1
 8004bee:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004bf6:	8bfb      	ldrh	r3, [r7, #30]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bfc:	8bfb      	ldrh	r3, [r7, #30]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ea      	bne.n	8004bd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	372c      	adds	r7, #44	; 0x2c
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d12c      	bne.n	8004c86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db12      	blt.n	8004c64 <USB_EPSetStall+0x54>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00f      	beq.n	8004c64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e02b      	b.n	8004cde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	db12      	blt.n	8004cbe <USB_EPSetStall+0xae>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00f      	beq.n	8004cbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d128      	bne.n	8004d5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	791b      	ldrb	r3, [r3, #4]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d003      	beq.n	8004d38 <USB_EPClearStall+0x4c>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	791b      	ldrb	r3, [r3, #4]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d138      	bne.n	8004daa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e027      	b.n	8004daa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	791b      	ldrb	r3, [r3, #4]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d003      	beq.n	8004d8a <USB_EPClearStall+0x9e>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	791b      	ldrb	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d10f      	bne.n	8004daa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f023 0302 	bic.w	r3, r3, #2
 8004e36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e60:	f023 0303 	bic.w	r3, r3, #3
 8004e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	b29b      	uxth	r3, r3
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4013      	ands	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f44:	68bb      	ldr	r3, [r7, #8]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b087      	sub	sp, #28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f82:	01db      	lsls	r3, r3, #7
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0301 	and.w	r3, r3, #1
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fe8:	f023 0307 	bic.w	r3, r3, #7
 8004fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	460b      	mov	r3, r1
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	333c      	adds	r3, #60	; 0x3c
 8005026:	3304      	adds	r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <USB_EP0_OutStart+0xb8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d90a      	bls.n	800504a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005044:	d101      	bne.n	800504a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e037      	b.n	80050ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	461a      	mov	r2, r3
 8005052:	2300      	movs	r3, #0
 8005054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005078:	f043 0318 	orr.w	r3, r3, #24
 800507c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005090:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10f      	bne.n	80050b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80050b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	4f54300a 	.word	0x4f54300a

080050cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a13      	ldr	r2, [pc, #76]	; (8005130 <USB_CoreReset+0x64>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e01b      	b.n	8005122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	daf2      	bge.n	80050d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <USB_CoreReset+0x64>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e006      	b.n	8005122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d0f0      	beq.n	8005102 <USB_CoreReset+0x36>

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	00030d40 	.word	0x00030d40

08005134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005144:	f002 fca0 	bl	8007a88 <USBD_static_malloc>
 8005148:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	32b0      	adds	r2, #176	; 0xb0
 800515a:	2100      	movs	r1, #0
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005160:	2302      	movs	r3, #2
 8005162:	e0d4      	b.n	800530e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005164:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f002 fd02 	bl	8007b74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	32b0      	adds	r2, #176	; 0xb0
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	32b0      	adds	r2, #176	; 0xb0
 800518a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7c1b      	ldrb	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d138      	bne.n	800520e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800519c:	4b5e      	ldr	r3, [pc, #376]	; (8005318 <USBD_CDC_Init+0x1e4>)
 800519e:	7819      	ldrb	r1, [r3, #0]
 80051a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a4:	2202      	movs	r2, #2
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f002 fb4b 	bl	8007842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051ac:	4b5a      	ldr	r3, [pc, #360]	; (8005318 <USBD_CDC_Init+0x1e4>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3324      	adds	r3, #36	; 0x24
 80051c2:	2201      	movs	r2, #1
 80051c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051c6:	4b55      	ldr	r3, [pc, #340]	; (800531c <USBD_CDC_Init+0x1e8>)
 80051c8:	7819      	ldrb	r1, [r3, #0]
 80051ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ce:	2202      	movs	r2, #2
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f002 fb36 	bl	8007842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051d6:	4b51      	ldr	r3, [pc, #324]	; (800531c <USBD_CDC_Init+0x1e8>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051ee:	2201      	movs	r2, #1
 80051f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80051f2:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <USBD_CDC_Init+0x1ec>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3326      	adds	r3, #38	; 0x26
 8005208:	2210      	movs	r2, #16
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e035      	b.n	800527a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800520e:	4b42      	ldr	r3, [pc, #264]	; (8005318 <USBD_CDC_Init+0x1e4>)
 8005210:	7819      	ldrb	r1, [r3, #0]
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	2202      	movs	r2, #2
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f002 fb13 	bl	8007842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800521c:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <USBD_CDC_Init+0x1e4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3324      	adds	r3, #36	; 0x24
 8005232:	2201      	movs	r2, #1
 8005234:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <USBD_CDC_Init+0x1e8>)
 8005238:	7819      	ldrb	r1, [r3, #0]
 800523a:	2340      	movs	r3, #64	; 0x40
 800523c:	2202      	movs	r2, #2
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f002 faff 	bl	8007842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005244:	4b35      	ldr	r3, [pc, #212]	; (800531c <USBD_CDC_Init+0x1e8>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800525c:	2201      	movs	r2, #1
 800525e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005260:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <USBD_CDC_Init+0x1ec>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	f003 020f 	and.w	r2, r3, #15
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3326      	adds	r3, #38	; 0x26
 8005276:	2210      	movs	r2, #16
 8005278:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <USBD_CDC_Init+0x1ec>)
 800527c:	7819      	ldrb	r1, [r3, #0]
 800527e:	2308      	movs	r3, #8
 8005280:	2203      	movs	r2, #3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f002 fadd 	bl	8007842 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <USBD_CDC_Init+0x1ec>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 020f 	and.w	r2, r3, #15
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	2201      	movs	r2, #1
 80052a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	33b0      	adds	r3, #176	; 0xb0
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052d8:	2302      	movs	r3, #2
 80052da:	e018      	b.n	800530e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7c1b      	ldrb	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <USBD_CDC_Init+0x1e8>)
 80052e6:	7819      	ldrb	r1, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f002 fb94 	bl	8007a20 <USBD_LL_PrepareReceive>
 80052f8:	e008      	b.n	800530c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <USBD_CDC_Init+0x1e8>)
 80052fc:	7819      	ldrb	r1, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005304:	2340      	movs	r3, #64	; 0x40
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f002 fb8a 	bl	8007a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000093 	.word	0x20000093
 800531c:	20000094 	.word	0x20000094
 8005320:	20000095 	.word	0x20000095

08005324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005330:	4b3a      	ldr	r3, [pc, #232]	; (800541c <USBD_CDC_DeInit+0xf8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f002 faa9 	bl	800788e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800533c:	4b37      	ldr	r3, [pc, #220]	; (800541c <USBD_CDC_DeInit+0xf8>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f003 020f 	and.w	r2, r3, #15
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	3324      	adds	r3, #36	; 0x24
 8005352:	2200      	movs	r2, #0
 8005354:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005356:	4b32      	ldr	r3, [pc, #200]	; (8005420 <USBD_CDC_DeInit+0xfc>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f002 fa96 	bl	800788e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <USBD_CDC_DeInit+0xfc>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800537a:	2200      	movs	r2, #0
 800537c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <USBD_CDC_DeInit+0x100>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f002 fa82 	bl	800788e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800538a:	4b26      	ldr	r3, [pc, #152]	; (8005424 <USBD_CDC_DeInit+0x100>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 020f 	and.w	r2, r3, #15
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3324      	adds	r3, #36	; 0x24
 80053a0:	2200      	movs	r2, #0
 80053a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053a4:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <USBD_CDC_DeInit+0x100>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f003 020f 	and.w	r2, r3, #15
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3326      	adds	r3, #38	; 0x26
 80053ba:	2200      	movs	r2, #0
 80053bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	32b0      	adds	r2, #176	; 0xb0
 80053c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01f      	beq.n	8005410 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	33b0      	adds	r3, #176	; 0xb0
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	32b0      	adds	r2, #176	; 0xb0
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fb56 	bl	8007aa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	32b0      	adds	r2, #176	; 0xb0
 8005402:	2100      	movs	r1, #0
 8005404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000093 	.word	0x20000093
 8005420:	20000094 	.word	0x20000094
 8005424:	20000095 	.word	0x20000095

08005428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32b0      	adds	r2, #176	; 0xb0
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005454:	2303      	movs	r3, #3
 8005456:	e0bf      	b.n	80055d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005460:	2b00      	cmp	r3, #0
 8005462:	d050      	beq.n	8005506 <USBD_CDC_Setup+0xde>
 8005464:	2b20      	cmp	r3, #32
 8005466:	f040 80af 	bne.w	80055c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	88db      	ldrh	r3, [r3, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d03a      	beq.n	80054e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b25b      	sxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	da1b      	bge.n	80054b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	33b0      	adds	r3, #176	; 0xb0
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005492:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	88d2      	ldrh	r2, [r2, #6]
 8005498:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	88db      	ldrh	r3, [r3, #6]
 800549e:	2b07      	cmp	r3, #7
 80054a0:	bf28      	it	cs
 80054a2:	2307      	movcs	r3, #7
 80054a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	89fa      	ldrh	r2, [r7, #14]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 fd89 	bl	8006fc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054b2:	e090      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785a      	ldrb	r2, [r3, #1]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	88db      	ldrh	r3, [r3, #6]
 80054c2:	2b3f      	cmp	r3, #63	; 0x3f
 80054c4:	d803      	bhi.n	80054ce <USBD_CDC_Setup+0xa6>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	88db      	ldrh	r3, [r3, #6]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	e000      	b.n	80054d0 <USBD_CDC_Setup+0xa8>
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054de:	461a      	mov	r2, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fd9b 	bl	800701c <USBD_CtlPrepareRx>
      break;
 80054e6:	e076      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	33b0      	adds	r3, #176	; 0xb0
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	7850      	ldrb	r0, [r2, #1]
 80054fe:	2200      	movs	r2, #0
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	4798      	blx	r3
      break;
 8005504:	e067      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b0b      	cmp	r3, #11
 800550c:	d851      	bhi.n	80055b2 <USBD_CDC_Setup+0x18a>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <USBD_CDC_Setup+0xec>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005545 	.word	0x08005545
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055b3 	.word	0x080055b3
 8005520:	080055b3 	.word	0x080055b3
 8005524:	080055b3 	.word	0x080055b3
 8005528:	080055b3 	.word	0x080055b3
 800552c:	080055b3 	.word	0x080055b3
 8005530:	080055b3 	.word	0x080055b3
 8005534:	080055b3 	.word	0x080055b3
 8005538:	080055b3 	.word	0x080055b3
 800553c:	0800556f 	.word	0x0800556f
 8005540:	08005599 	.word	0x08005599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b03      	cmp	r3, #3
 800554e:	d107      	bne.n	8005560 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005550:	f107 030a 	add.w	r3, r7, #10
 8005554:	2202      	movs	r2, #2
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fd33 	bl	8006fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800555e:	e032      	b.n	80055c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fcbd 	bl	8006ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005568:	2303      	movs	r3, #3
 800556a:	75fb      	strb	r3, [r7, #23]
          break;
 800556c:	e02b      	b.n	80055c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b03      	cmp	r3, #3
 8005578:	d107      	bne.n	800558a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800557a:	f107 030d 	add.w	r3, r7, #13
 800557e:	2201      	movs	r2, #1
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fd1e 	bl	8006fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005588:	e01d      	b.n	80055c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fca8 	bl	8006ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	75fb      	strb	r3, [r7, #23]
          break;
 8005596:	e016      	b.n	80055c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d00f      	beq.n	80055c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fc9b 	bl	8006ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 80055ac:	2303      	movs	r3, #3
 80055ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055b0:	e008      	b.n	80055c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fc94 	bl	8006ee2 <USBD_CtlError>
          ret = USBD_FAIL;
 80055ba:	2303      	movs	r3, #3
 80055bc:	75fb      	strb	r3, [r7, #23]
          break;
 80055be:	e002      	b.n	80055c6 <USBD_CDC_Setup+0x19e>
          break;
 80055c0:	bf00      	nop
 80055c2:	e008      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>
          break;
 80055c4:	bf00      	nop
      }
      break;
 80055c6:	e006      	b.n	80055d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fc89 	bl	8006ee2 <USBD_CtlError>
      ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	75fb      	strb	r3, [r7, #23]
      break;
 80055d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80055f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	32b0      	adds	r2, #176	; 0xb0
 80055fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005606:	2303      	movs	r3, #3
 8005608:	e065      	b.n	80056d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32b0      	adds	r2, #176	; 0xb0
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	f003 020f 	and.w	r2, r3, #15
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3318      	adds	r3, #24
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3318      	adds	r3, #24
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 010f 	and.w	r1, r3, #15
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	460b      	mov	r3, r1
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4403      	add	r3, r0
 800565c:	3348      	adds	r3, #72	; 0x48
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	fbb2 f1f3 	udiv	r1, r2, r3
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800566a:	2b00      	cmp	r3, #0
 800566c:	d112      	bne.n	8005694 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3318      	adds	r3, #24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005686:	78f9      	ldrb	r1, [r7, #3]
 8005688:	2300      	movs	r3, #0
 800568a:	2200      	movs	r2, #0
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f002 f9a6 	bl	80079de <USBD_LL_Transmit>
 8005692:	e01f      	b.n	80056d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	33b0      	adds	r3, #176	; 0xb0
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	33b0      	adds	r3, #176	; 0xb0
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	32b0      	adds	r2, #176	; 0xb0
 80056f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	32b0      	adds	r2, #176	; 0xb0
 8005704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	e01a      	b.n	8005746 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f002 f9a4 	bl	8007a62 <USBD_LL_GetRxDataSize>
 800571a:	4602      	mov	r2, r0
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	33b0      	adds	r3, #176	; 0xb0
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005740:	4611      	mov	r1, r2
 8005742:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	32b0      	adds	r2, #176	; 0xb0
 8005760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800576c:	2303      	movs	r3, #3
 800576e:	e025      	b.n	80057bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	33b0      	adds	r3, #176	; 0xb0
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01a      	beq.n	80057ba <USBD_CDC_EP0_RxReady+0x6c>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800578a:	2bff      	cmp	r3, #255	; 0xff
 800578c:	d015      	beq.n	80057ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	33b0      	adds	r3, #176	; 0xb0
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80057a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057ae:	b292      	uxth	r2, r2
 80057b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057cc:	2182      	movs	r1, #130	; 0x82
 80057ce:	4818      	ldr	r0, [pc, #96]	; (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057d0:	f000 fd4f 	bl	8006272 <USBD_GetEpDesc>
 80057d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057d6:	2101      	movs	r1, #1
 80057d8:	4815      	ldr	r0, [pc, #84]	; (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057da:	f000 fd4a 	bl	8006272 <USBD_GetEpDesc>
 80057de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057e0:	2181      	movs	r1, #129	; 0x81
 80057e2:	4813      	ldr	r0, [pc, #76]	; (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057e4:	f000 fd45 	bl	8006272 <USBD_GetEpDesc>
 80057e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2210      	movs	r2, #16
 80057f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2200      	movs	r2, #0
 8005800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005804:	711a      	strb	r2, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d006      	beq.n	800581e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005818:	711a      	strb	r2, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2243      	movs	r2, #67	; 0x43
 8005822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000050 	.word	0x20000050

08005834 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800583c:	2182      	movs	r1, #130	; 0x82
 800583e:	4818      	ldr	r0, [pc, #96]	; (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005840:	f000 fd17 	bl	8006272 <USBD_GetEpDesc>
 8005844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005846:	2101      	movs	r1, #1
 8005848:	4815      	ldr	r0, [pc, #84]	; (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800584a:	f000 fd12 	bl	8006272 <USBD_GetEpDesc>
 800584e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005850:	2181      	movs	r1, #129	; 0x81
 8005852:	4813      	ldr	r0, [pc, #76]	; (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005854:	f000 fd0d 	bl	8006272 <USBD_GetEpDesc>
 8005858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2210      	movs	r2, #16
 8005864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d006      	beq.n	800587a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2200      	movs	r2, #0
 8005870:	711a      	strb	r2, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f042 0202 	orr.w	r2, r2, #2
 8005878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	711a      	strb	r2, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f042 0202 	orr.w	r2, r2, #2
 800588c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2243      	movs	r2, #67	; 0x43
 8005892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005894:	4b02      	ldr	r3, [pc, #8]	; (80058a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000050 	.word	0x20000050

080058a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058ac:	2182      	movs	r1, #130	; 0x82
 80058ae:	4818      	ldr	r0, [pc, #96]	; (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058b0:	f000 fcdf 	bl	8006272 <USBD_GetEpDesc>
 80058b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058b6:	2101      	movs	r1, #1
 80058b8:	4815      	ldr	r0, [pc, #84]	; (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058ba:	f000 fcda 	bl	8006272 <USBD_GetEpDesc>
 80058be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058c0:	2181      	movs	r1, #129	; 0x81
 80058c2:	4813      	ldr	r0, [pc, #76]	; (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058c4:	f000 fcd5 	bl	8006272 <USBD_GetEpDesc>
 80058c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2210      	movs	r2, #16
 80058d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2200      	movs	r2, #0
 80058e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e4:	711a      	strb	r2, [r3, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d006      	beq.n	80058fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f8:	711a      	strb	r2, [r3, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2243      	movs	r2, #67	; 0x43
 8005902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000050 	.word	0x20000050

08005914 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	220a      	movs	r2, #10
 8005920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005922:	4b03      	ldr	r3, [pc, #12]	; (8005930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	2000000c 	.word	0x2000000c

08005934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	e009      	b.n	800595c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	33b0      	adds	r3, #176	; 0xb0
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	32b0      	adds	r2, #176	; 0xb0
 800597e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005982:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800598a:	2303      	movs	r3, #3
 800598c:	e008      	b.n	80059a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	32b0      	adds	r2, #176	; 0xb0
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e004      	b.n	80059da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32b0      	adds	r2, #176	; 0xb0
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	32b0      	adds	r2, #176	; 0xb0
 8005a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e025      	b.n	8005a66 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11f      	bne.n	8005a64 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <USBD_CDC_TransmitPacket+0x88>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 020f 	and.w	r2, r3, #15
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4403      	add	r3, r0
 8005a46:	3318      	adds	r3, #24
 8005a48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <USBD_CDC_TransmitPacket+0x88>)
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 ffbf 	bl	80079de <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000093 	.word	0x20000093

08005a74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	32b0      	adds	r2, #176	; 0xb0
 8005a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	32b0      	adds	r2, #176	; 0xb0
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e018      	b.n	8005ad4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7c1b      	ldrb	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <USBD_CDC_ReceivePacket+0x68>)
 8005aac:	7819      	ldrb	r1, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 ffb1 	bl	8007a20 <USBD_LL_PrepareReceive>
 8005abe:	e008      	b.n	8005ad2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <USBD_CDC_ReceivePacket+0x68>)
 8005ac2:	7819      	ldrb	r1, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 ffa7 	bl	8007a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000094 	.word	0x20000094

08005ae0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e01f      	b.n	8005b38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	79fa      	ldrb	r2, [r7, #7]
 8005b2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f001 fe21 	bl	8007774 <USBD_LL_Init>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e025      	b.n	8005ba4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	32ae      	adds	r2, #174	; 0xae
 8005b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00f      	beq.n	8005b94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	32ae      	adds	r2, #174	; 0xae
 8005b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f107 020e 	add.w	r2, r7, #14
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fe29 	bl	800780c <USBD_LL_Start>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	78fa      	ldrb	r2, [r7, #3]
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f908 	bl	8006e6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d01a      	beq.n	8005cb8 <USBD_LL_SetupStage+0x72>
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d822      	bhi.n	8005ccc <USBD_LL_SetupStage+0x86>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <USBD_LL_SetupStage+0x4a>
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d00a      	beq.n	8005ca4 <USBD_LL_SetupStage+0x5e>
 8005c8e:	e01d      	b.n	8005ccc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fb5f 	bl	800635c <USBD_StdDevReq>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca2:	e020      	b.n	8005ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fbc7 	bl	8006440 <USBD_StdItfReq>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb6:	e016      	b.n	8005ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fc29 	bl	8006518 <USBD_StdEPReq>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	e00c      	b.n	8005ce6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fdf6 	bl	80078cc <USBD_LL_StallEP>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce4:	bf00      	nop
  }

  return ret;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d02:	7afb      	ldrb	r3, [r7, #11]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d16e      	bne.n	8005de6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	f040 8098 	bne.w	8005e4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d913      	bls.n	8005d50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	1ad2      	subs	r2, r2, r3
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	bf28      	it	cs
 8005d42:	4613      	movcs	r3, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f001 f984 	bl	8007056 <USBD_CtlContinueRx>
 8005d4e:	e07d      	b.n	8005e4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d014      	beq.n	8005d88 <USBD_LL_DataOutStage+0x98>
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d81d      	bhi.n	8005d9e <USBD_LL_DataOutStage+0xae>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <USBD_LL_DataOutStage+0x7c>
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d003      	beq.n	8005d72 <USBD_LL_DataOutStage+0x82>
 8005d6a:	e018      	b.n	8005d9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8005d70:	e018      	b.n	8005da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fa5e 	bl	800623e <USBD_CoreFindIF>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75bb      	strb	r3, [r7, #22]
            break;
 8005d86:	e00d      	b.n	8005da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	4619      	mov	r1, r3
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa60 	bl	8006258 <USBD_CoreFindEP>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8005d9c:	e002      	b.n	8005da4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75bb      	strb	r3, [r7, #22]
            break;
 8005da2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005da4:	7dbb      	ldrb	r3, [r7, #22]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d119      	bne.n	8005dde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d113      	bne.n	8005dde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005db6:	7dba      	ldrb	r2, [r7, #22]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	32ae      	adds	r2, #174	; 0xae
 8005dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005dc6:	7dba      	ldrb	r2, [r7, #22]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005dce:	7dba      	ldrb	r2, [r7, #22]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	32ae      	adds	r2, #174	; 0xae
 8005dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f001 f94a 	bl	8007078 <USBD_CtlSendStatus>
 8005de4:	e032      	b.n	8005e4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fa31 	bl	8006258 <USBD_CoreFindEP>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dfa:	7dbb      	ldrb	r3, [r7, #22]
 8005dfc:	2bff      	cmp	r3, #255	; 0xff
 8005dfe:	d025      	beq.n	8005e4c <USBD_LL_DataOutStage+0x15c>
 8005e00:	7dbb      	ldrb	r3, [r7, #22]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d122      	bne.n	8005e4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d117      	bne.n	8005e42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e12:	7dba      	ldrb	r2, [r7, #22]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	32ae      	adds	r2, #174	; 0xae
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e22:	7dba      	ldrb	r2, [r7, #22]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e2a:	7dba      	ldrb	r2, [r7, #22]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	32ae      	adds	r2, #174	; 0xae
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	7afa      	ldrb	r2, [r7, #11]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	4798      	blx	r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	e000      	b.n	8005e4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b086      	sub	sp, #24
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d16f      	bne.n	8005f4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d15a      	bne.n	8005f30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d914      	bls.n	8005eb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f001 f8ac 	bl	8006ffa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f001 fdb9 	bl	8007a20 <USBD_LL_PrepareReceive>
 8005eae:	e03f      	b.n	8005f30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d11c      	bne.n	8005ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d316      	bcc.n	8005ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20f      	bcs.n	8005ef6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2100      	movs	r1, #0
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f001 f88d 	bl	8006ffa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2200      	movs	r2, #0
 8005eec:	2100      	movs	r1, #0
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f001 fd96 	bl	8007a20 <USBD_LL_PrepareReceive>
 8005ef4:	e01c      	b.n	8005f30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d10f      	bne.n	8005f22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f001 fcd1 	bl	80078cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f001 f8b7 	bl	800709e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d03a      	beq.n	8005fb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff fe42 	bl	8005bc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f48:	e032      	b.n	8005fb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	4619      	mov	r1, r3
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f97f 	bl	8006258 <USBD_CoreFindEP>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	2bff      	cmp	r3, #255	; 0xff
 8005f62:	d025      	beq.n	8005fb0 <USBD_LL_DataInStage+0x15a>
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d122      	bne.n	8005fb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d11c      	bne.n	8005fb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f76:	7dfa      	ldrb	r2, [r7, #23]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	32ae      	adds	r2, #174	; 0xae
 8005f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d014      	beq.n	8005fb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f86:	7dfa      	ldrb	r2, [r7, #23]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f8e:	7dfa      	ldrb	r2, [r7, #23]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	32ae      	adds	r2, #174	; 0xae
 8005f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	7afa      	ldrb	r2, [r7, #11]
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	4798      	blx	r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005fa6:	7dbb      	ldrb	r3, [r7, #22]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005fac:	7dbb      	ldrb	r3, [r7, #22]
 8005fae:	e000      	b.n	8005fb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6852      	ldr	r2, [r2, #4]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	4611      	mov	r1, r2
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800601c:	2303      	movs	r3, #3
 800601e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006020:	2340      	movs	r3, #64	; 0x40
 8006022:	2200      	movs	r2, #0
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fc0b 	bl	8007842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	2180      	movs	r1, #128	; 0x80
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fbfd 	bl	8007842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2240      	movs	r2, #64	; 0x40
 8006052:	621a      	str	r2, [r3, #32]

  return ret;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608c:	b2da      	uxtb	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2204      	movs	r2, #4
 8006098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d106      	bne.n	80060cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d110      	bne.n	8006110 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	32ae      	adds	r2, #174	; 0xae
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006138:	2303      	movs	r3, #3
 800613a:	e01c      	b.n	8006176 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d115      	bne.n	8006174 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32ae      	adds	r2, #174	; 0xae
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32ae      	adds	r2, #174	; 0xae
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4611      	mov	r1, r2
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	32ae      	adds	r2, #174	; 0xae
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e01c      	b.n	80061da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d115      	bne.n	80061d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	32ae      	adds	r2, #174	; 0xae
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32ae      	adds	r2, #174	; 0xae
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	4611      	mov	r1, r2
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6852      	ldr	r2, [r2, #4]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800624a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006264:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	885b      	ldrh	r3, [r3, #2]
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	429a      	cmp	r2, r3
 8006298:	d920      	bls.n	80062dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80062a2:	e013      	b.n	80062cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062a4:	f107 030a 	add.w	r3, r7, #10
 80062a8:	4619      	mov	r1, r3
 80062aa:	6978      	ldr	r0, [r7, #20]
 80062ac:	f000 f81b 	bl	80062e6 <USBD_GetNextDesc>
 80062b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d108      	bne.n	80062cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	789b      	ldrb	r3, [r3, #2]
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d008      	beq.n	80062da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	885b      	ldrh	r3, [r3, #2]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d8e5      	bhi.n	80062a4 <USBD_GetEpDesc+0x32>
 80062d8:	e000      	b.n	80062dc <USBD_GetEpDesc+0x6a>
          break;
 80062da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80062dc:	693b      	ldr	r3, [r7, #16]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	881a      	ldrh	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	4413      	add	r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4413      	add	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006312:	68fb      	ldr	r3, [r7, #12]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	3301      	adds	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800633e:	8a3b      	ldrh	r3, [r7, #16]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	b21a      	sxth	r2, r3
 8006344:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006348:	4313      	orrs	r3, r2
 800634a:	b21b      	sxth	r3, r3
 800634c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800634e:	89fb      	ldrh	r3, [r7, #14]
}
 8006350:	4618      	mov	r0, r3
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d005      	beq.n	8006382 <USBD_StdDevReq+0x26>
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d857      	bhi.n	800642a <USBD_StdDevReq+0xce>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00f      	beq.n	800639e <USBD_StdDevReq+0x42>
 800637e:	2b20      	cmp	r3, #32
 8006380:	d153      	bne.n	800642a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	32ae      	adds	r2, #174	; 0xae
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	e04a      	b.n	8006434 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b09      	cmp	r3, #9
 80063a4:	d83b      	bhi.n	800641e <USBD_StdDevReq+0xc2>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <USBD_StdDevReq+0x50>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	08006401 	.word	0x08006401
 80063b0:	08006415 	.word	0x08006415
 80063b4:	0800641f 	.word	0x0800641f
 80063b8:	0800640b 	.word	0x0800640b
 80063bc:	0800641f 	.word	0x0800641f
 80063c0:	080063df 	.word	0x080063df
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	0800641f 	.word	0x0800641f
 80063cc:	080063f7 	.word	0x080063f7
 80063d0:	080063e9 	.word	0x080063e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa3c 	bl	8006854 <USBD_GetDescriptor>
          break;
 80063dc:	e024      	b.n	8006428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fba1 	bl	8006b28 <USBD_SetAddress>
          break;
 80063e6:	e01f      	b.n	8006428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fbe0 	bl	8006bb0 <USBD_SetConfig>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]
          break;
 80063f4:	e018      	b.n	8006428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fc83 	bl	8006d04 <USBD_GetConfig>
          break;
 80063fe:	e013      	b.n	8006428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fcb4 	bl	8006d70 <USBD_GetStatus>
          break;
 8006408:	e00e      	b.n	8006428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fce3 	bl	8006dd8 <USBD_SetFeature>
          break;
 8006412:	e009      	b.n	8006428 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd07 	bl	8006e2a <USBD_ClrFeature>
          break;
 800641c:	e004      	b.n	8006428 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fd5e 	bl	8006ee2 <USBD_CtlError>
          break;
 8006426:	bf00      	nop
      }
      break;
 8006428:	e004      	b.n	8006434 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fd58 	bl	8006ee2 <USBD_CtlError>
      break;
 8006432:	bf00      	nop
  }

  return ret;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop

08006440 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d005      	beq.n	8006466 <USBD_StdItfReq+0x26>
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d852      	bhi.n	8006504 <USBD_StdItfReq+0xc4>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <USBD_StdItfReq+0x26>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d14e      	bne.n	8006504 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646c:	b2db      	uxtb	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	2b02      	cmp	r3, #2
 8006472:	d840      	bhi.n	80064f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	889b      	ldrh	r3, [r3, #4]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	d836      	bhi.n	80064ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	889b      	ldrh	r3, [r3, #4]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fed9 	bl	800623e <USBD_CoreFindIF>
 800648c:	4603      	mov	r3, r0
 800648e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2bff      	cmp	r3, #255	; 0xff
 8006494:	d01d      	beq.n	80064d2 <USBD_StdItfReq+0x92>
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11a      	bne.n	80064d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800649c:	7bba      	ldrb	r2, [r7, #14]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	32ae      	adds	r2, #174	; 0xae
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00f      	beq.n	80064cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80064ac:	7bba      	ldrb	r2, [r7, #14]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064b4:	7bba      	ldrb	r2, [r7, #14]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	32ae      	adds	r2, #174	; 0xae
 80064ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064ca:	e004      	b.n	80064d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80064cc:	2303      	movs	r3, #3
 80064ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064d0:	e001      	b.n	80064d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064d2:	2303      	movs	r3, #3
 80064d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	88db      	ldrh	r3, [r3, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d110      	bne.n	8006500 <USBD_StdItfReq+0xc0>
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10d      	bne.n	8006500 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fdc7 	bl	8007078 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064ea:	e009      	b.n	8006500 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fcf7 	bl	8006ee2 <USBD_CtlError>
          break;
 80064f4:	e004      	b.n	8006500 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fcf2 	bl	8006ee2 <USBD_CtlError>
          break;
 80064fe:	e000      	b.n	8006502 <USBD_StdItfReq+0xc2>
          break;
 8006500:	bf00      	nop
      }
      break;
 8006502:	e004      	b.n	800650e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fceb 	bl	8006ee2 <USBD_CtlError>
      break;
 800650c:	bf00      	nop
  }

  return ret;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	889b      	ldrh	r3, [r3, #4]
 800652a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d007      	beq.n	8006548 <USBD_StdEPReq+0x30>
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	f200 817f 	bhi.w	800683c <USBD_StdEPReq+0x324>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d02a      	beq.n	8006598 <USBD_StdEPReq+0x80>
 8006542:	2b20      	cmp	r3, #32
 8006544:	f040 817a 	bne.w	800683c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fe83 	bl	8006258 <USBD_CoreFindEP>
 8006552:	4603      	mov	r3, r0
 8006554:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006556:	7b7b      	ldrb	r3, [r7, #13]
 8006558:	2bff      	cmp	r3, #255	; 0xff
 800655a:	f000 8174 	beq.w	8006846 <USBD_StdEPReq+0x32e>
 800655e:	7b7b      	ldrb	r3, [r7, #13]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 8170 	bne.w	8006846 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006566:	7b7a      	ldrb	r2, [r7, #13]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800656e:	7b7a      	ldrb	r2, [r7, #13]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	32ae      	adds	r2, #174	; 0xae
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8163 	beq.w	8006846 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006580:	7b7a      	ldrb	r2, [r7, #13]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	32ae      	adds	r2, #174	; 0xae
 8006586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006596:	e156      	b.n	8006846 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d008      	beq.n	80065b2 <USBD_StdEPReq+0x9a>
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	f300 8145 	bgt.w	8006830 <USBD_StdEPReq+0x318>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 809b 	beq.w	80066e2 <USBD_StdEPReq+0x1ca>
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d03c      	beq.n	800662a <USBD_StdEPReq+0x112>
 80065b0:	e13e      	b.n	8006830 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d002      	beq.n	80065c4 <USBD_StdEPReq+0xac>
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d016      	beq.n	80065f0 <USBD_StdEPReq+0xd8>
 80065c2:	e02c      	b.n	800661e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <USBD_StdEPReq+0xce>
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d00a      	beq.n	80065e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 f979 	bl	80078cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 f975 	bl	80078cc <USBD_LL_StallEP>
 80065e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e4:	e020      	b.n	8006628 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc7a 	bl	8006ee2 <USBD_CtlError>
              break;
 80065ee:	e01b      	b.n	8006628 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	885b      	ldrh	r3, [r3, #2]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10e      	bne.n	8006616 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <USBD_StdEPReq+0xfe>
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d008      	beq.n	8006616 <USBD_StdEPReq+0xfe>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	88db      	ldrh	r3, [r3, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f95b 	bl	80078cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fd2e 	bl	8007078 <USBD_CtlSendStatus>

              break;
 800661c:	e004      	b.n	8006628 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fc5e 	bl	8006ee2 <USBD_CtlError>
              break;
 8006626:	bf00      	nop
          }
          break;
 8006628:	e107      	b.n	800683a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d002      	beq.n	800663c <USBD_StdEPReq+0x124>
 8006636:	2b03      	cmp	r3, #3
 8006638:	d016      	beq.n	8006668 <USBD_StdEPReq+0x150>
 800663a:	e04b      	b.n	80066d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <USBD_StdEPReq+0x146>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d00a      	beq.n	800665e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f93d 	bl	80078cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 f939 	bl	80078cc <USBD_LL_StallEP>
 800665a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800665c:	e040      	b.n	80066e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fc3e 	bl	8006ee2 <USBD_CtlError>
              break;
 8006666:	e03b      	b.n	80066e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	885b      	ldrh	r3, [r3, #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d136      	bne.n	80066de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f943 	bl	800790a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fcf7 	bl	8007078 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fde2 	bl	8006258 <USBD_CoreFindEP>
 8006694:	4603      	mov	r3, r0
 8006696:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006698:	7b7b      	ldrb	r3, [r7, #13]
 800669a:	2bff      	cmp	r3, #255	; 0xff
 800669c:	d01f      	beq.n	80066de <USBD_StdEPReq+0x1c6>
 800669e:	7b7b      	ldrb	r3, [r7, #13]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11c      	bne.n	80066de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066a4:	7b7a      	ldrb	r2, [r7, #13]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80066ac:	7b7a      	ldrb	r2, [r7, #13]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	32ae      	adds	r2, #174	; 0xae
 80066b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d010      	beq.n	80066de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066bc:	7b7a      	ldrb	r2, [r7, #13]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32ae      	adds	r2, #174	; 0xae
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066d2:	e004      	b.n	80066de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fc03 	bl	8006ee2 <USBD_CtlError>
              break;
 80066dc:	e000      	b.n	80066e0 <USBD_StdEPReq+0x1c8>
              break;
 80066de:	bf00      	nop
          }
          break;
 80066e0:	e0ab      	b.n	800683a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d002      	beq.n	80066f4 <USBD_StdEPReq+0x1dc>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d032      	beq.n	8006758 <USBD_StdEPReq+0x240>
 80066f2:	e097      	b.n	8006824 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <USBD_StdEPReq+0x1f2>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d004      	beq.n	800670a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbed 	bl	8006ee2 <USBD_CtlError>
                break;
 8006708:	e091      	b.n	800682e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	da0b      	bge.n	800672a <USBD_StdEPReq+0x212>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	3310      	adds	r3, #16
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	3304      	adds	r3, #4
 8006728:	e00b      	b.n	8006742 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4413      	add	r3, r2
 8006740:	3304      	adds	r3, #4
 8006742:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2202      	movs	r2, #2
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc37 	bl	8006fc4 <USBD_CtlSendData>
              break;
 8006756:	e06a      	b.n	800682e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800675c:	2b00      	cmp	r3, #0
 800675e:	da11      	bge.n	8006784 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	f003 020f 	and.w	r2, r3, #15
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d117      	bne.n	80067aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fbb0 	bl	8006ee2 <USBD_CtlError>
                  break;
 8006782:	e054      	b.n	800682e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb9d 	bl	8006ee2 <USBD_CtlError>
                  break;
 80067a8:	e041      	b.n	800682e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da0b      	bge.n	80067ca <USBD_StdEPReq+0x2b2>
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	3310      	adds	r3, #16
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	3304      	adds	r3, #4
 80067c8:	e00b      	b.n	80067e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4413      	add	r3, r2
 80067e0:	3304      	adds	r3, #4
 80067e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <USBD_StdEPReq+0x2d8>
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d103      	bne.n	80067f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e00e      	b.n	8006816 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f8a3 	bl	8007948 <USBD_LL_IsStallEP>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e002      	b.n	8006816 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2202      	movs	r2, #2
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fbd1 	bl	8006fc4 <USBD_CtlSendData>
              break;
 8006822:	e004      	b.n	800682e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fb5b 	bl	8006ee2 <USBD_CtlError>
              break;
 800682c:	bf00      	nop
          }
          break;
 800682e:	e004      	b.n	800683a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb55 	bl	8006ee2 <USBD_CtlError>
          break;
 8006838:	bf00      	nop
      }
      break;
 800683a:	e005      	b.n	8006848 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fb4f 	bl	8006ee2 <USBD_CtlError>
      break;
 8006844:	e000      	b.n	8006848 <USBD_StdEPReq+0x330>
      break;
 8006846:	bf00      	nop
  }

  return ret;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	885b      	ldrh	r3, [r3, #2]
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	2b06      	cmp	r3, #6
 8006876:	f200 8128 	bhi.w	8006aca <USBD_GetDescriptor+0x276>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <USBD_GetDescriptor+0x2c>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	0800689d 	.word	0x0800689d
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068f5 	.word	0x080068f5
 800688c:	08006acb 	.word	0x08006acb
 8006890:	08006acb 	.word	0x08006acb
 8006894:	08006a6b 	.word	0x08006a6b
 8006898:	08006a97 	.word	0x08006a97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	7c12      	ldrb	r2, [r2, #16]
 80068a8:	f107 0108 	add.w	r1, r7, #8
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	60f8      	str	r0, [r7, #12]
      break;
 80068b2:	e112      	b.n	8006ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7c1b      	ldrb	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	f107 0208 	add.w	r2, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068d6:	e100      	b.n	8006ada <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	f107 0208 	add.w	r2, r7, #8
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	2202      	movs	r2, #2
 80068f0:	701a      	strb	r2, [r3, #0]
      break;
 80068f2:	e0f2      	b.n	8006ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	885b      	ldrh	r3, [r3, #2]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b05      	cmp	r3, #5
 80068fc:	f200 80ac 	bhi.w	8006a58 <USBD_GetDescriptor+0x204>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <USBD_GetDescriptor+0xb4>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	08006921 	.word	0x08006921
 800690c:	08006955 	.word	0x08006955
 8006910:	08006989 	.word	0x08006989
 8006914:	080069bd 	.word	0x080069bd
 8006918:	080069f1 	.word	0x080069f1
 800691c:	08006a25 	.word	0x08006a25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006942:	e091      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 facb 	bl	8006ee2 <USBD_CtlError>
            err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
          break;
 8006952:	e089      	b.n	8006a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006976:	e077      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fab1 	bl	8006ee2 <USBD_CtlError>
            err++;
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	3301      	adds	r3, #1
 8006984:	72fb      	strb	r3, [r7, #11]
          break;
 8006986:	e06f      	b.n	8006a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7c12      	ldrb	r2, [r2, #16]
 80069a0:	f107 0108 	add.w	r1, r7, #8
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069aa:	e05d      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa97 	bl	8006ee2 <USBD_CtlError>
            err++;
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	3301      	adds	r3, #1
 80069b8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ba:	e055      	b.n	8006a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7c12      	ldrb	r2, [r2, #16]
 80069d4:	f107 0108 	add.w	r1, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069de:	e043      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa7d 	bl	8006ee2 <USBD_CtlError>
            err++;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	3301      	adds	r3, #1
 80069ec:	72fb      	strb	r3, [r7, #11]
          break;
 80069ee:	e03b      	b.n	8006a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7c12      	ldrb	r2, [r2, #16]
 8006a08:	f107 0108 	add.w	r1, r7, #8
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a12:	e029      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa63 	bl	8006ee2 <USBD_CtlError>
            err++;
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	72fb      	strb	r3, [r7, #11]
          break;
 8006a22:	e021      	b.n	8006a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	f107 0108 	add.w	r1, r7, #8
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
 8006a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a46:	e00f      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa49 	bl	8006ee2 <USBD_CtlError>
            err++;
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	3301      	adds	r3, #1
 8006a54:	72fb      	strb	r3, [r7, #11]
          break;
 8006a56:	e007      	b.n	8006a68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fa41 	bl	8006ee2 <USBD_CtlError>
          err++;
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	3301      	adds	r3, #1
 8006a64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a66:	bf00      	nop
      }
      break;
 8006a68:	e037      	b.n	8006ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7c1b      	ldrb	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	f107 0208 	add.w	r2, r7, #8
 8006a7e:	4610      	mov	r0, r2
 8006a80:	4798      	blx	r3
 8006a82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a84:	e029      	b.n	8006ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa2a 	bl	8006ee2 <USBD_CtlError>
        err++;
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	3301      	adds	r3, #1
 8006a92:	72fb      	strb	r3, [r7, #11]
      break;
 8006a94:	e021      	b.n	8006ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7c1b      	ldrb	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f107 0208 	add.w	r2, r7, #8
 8006aaa:	4610      	mov	r0, r2
 8006aac:	4798      	blx	r3
 8006aae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	2207      	movs	r2, #7
 8006ab6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ab8:	e00f      	b.n	8006ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fa10 	bl	8006ee2 <USBD_CtlError>
        err++;
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ac8:	e007      	b.n	8006ada <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa08 	bl	8006ee2 <USBD_CtlError>
      err++;
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad8:	bf00      	nop
  }

  if (err != 0U)
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11e      	bne.n	8006b1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	88db      	ldrh	r3, [r3, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d016      	beq.n	8006b16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ae8:	893b      	ldrh	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00e      	beq.n	8006b0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	88da      	ldrh	r2, [r3, #6]
 8006af2:	893b      	ldrh	r3, [r7, #8]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	bf28      	it	cs
 8006af8:	4613      	movcs	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006afe:	893b      	ldrh	r3, [r7, #8]
 8006b00:	461a      	mov	r2, r3
 8006b02:	68f9      	ldr	r1, [r7, #12]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fa5d 	bl	8006fc4 <USBD_CtlSendData>
 8006b0a:	e009      	b.n	8006b20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f9e7 	bl	8006ee2 <USBD_CtlError>
 8006b14:	e004      	b.n	8006b20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 faae 	bl	8007078 <USBD_CtlSendStatus>
 8006b1c:	e000      	b.n	8006b20 <USBD_GetDescriptor+0x2cc>
    return;
 8006b1e:	bf00      	nop
  }
}
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop

08006b28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	889b      	ldrh	r3, [r3, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d131      	bne.n	8006b9e <USBD_SetAddress+0x76>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d12d      	bne.n	8006b9e <USBD_SetAddress+0x76>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	2b7f      	cmp	r3, #127	; 0x7f
 8006b48:	d829      	bhi.n	8006b9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d104      	bne.n	8006b6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f9bc 	bl	8006ee2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6a:	e01d      	b.n	8006ba8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7bfa      	ldrb	r2, [r7, #15]
 8006b70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 ff11 	bl	80079a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa7a 	bl	8007078 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	e009      	b.n	8006ba8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9c:	e004      	b.n	8006ba8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f99e 	bl	8006ee2 <USBD_CtlError>
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	4b4e      	ldr	r3, [pc, #312]	; (8006d00 <USBD_SetConfig+0x150>)
 8006bc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bc8:	4b4d      	ldr	r3, [pc, #308]	; (8006d00 <USBD_SetConfig+0x150>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d905      	bls.n	8006bdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f985 	bl	8006ee2 <USBD_CtlError>
    return USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e08c      	b.n	8006cf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d002      	beq.n	8006bee <USBD_SetConfig+0x3e>
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d029      	beq.n	8006c40 <USBD_SetConfig+0x90>
 8006bec:	e075      	b.n	8006cda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bee:	4b44      	ldr	r3, [pc, #272]	; (8006d00 <USBD_SetConfig+0x150>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d020      	beq.n	8006c38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006bf6:	4b42      	ldr	r3, [pc, #264]	; (8006d00 <USBD_SetConfig+0x150>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c00:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fe ffe7 	bl	8005bda <USBD_SetClassConfig>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f962 	bl	8006ee2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c26:	e065      	b.n	8006cf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa25 	bl	8007078 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2203      	movs	r2, #3
 8006c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c36:	e05d      	b.n	8006cf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa1d 	bl	8007078 <USBD_CtlSendStatus>
      break;
 8006c3e:	e059      	b.n	8006cf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c40:	4b2f      	ldr	r3, [pc, #188]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d112      	bne.n	8006c6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c50:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5a:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7fe ffd6 	bl	8005c12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa06 	bl	8007078 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c6c:	e042      	b.n	8006cf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c6e:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d02a      	beq.n	8006cd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fe ffc4 	bl	8005c12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c94:	4b1a      	ldr	r3, [pc, #104]	; (8006d00 <USBD_SetConfig+0x150>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fe ff9d 	bl	8005bda <USBD_SetClassConfig>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00f      	beq.n	8006cca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f918 	bl	8006ee2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fe ffa9 	bl	8005c12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cc8:	e014      	b.n	8006cf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f9d4 	bl	8007078 <USBD_CtlSendStatus>
      break;
 8006cd0:	e010      	b.n	8006cf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9d0 	bl	8007078 <USBD_CtlSendStatus>
      break;
 8006cd8:	e00c      	b.n	8006cf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f900 	bl	8006ee2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <USBD_SetConfig+0x150>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fe ff92 	bl	8005c12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf2:	bf00      	nop
  }

  return ret;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200002f4 	.word	0x200002f4

08006d04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	88db      	ldrh	r3, [r3, #6]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d004      	beq.n	8006d20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f8e2 	bl	8006ee2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d1e:	e023      	b.n	8006d68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	dc02      	bgt.n	8006d32 <USBD_GetConfig+0x2e>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dc03      	bgt.n	8006d38 <USBD_GetConfig+0x34>
 8006d30:	e015      	b.n	8006d5e <USBD_GetConfig+0x5a>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d00b      	beq.n	8006d4e <USBD_GetConfig+0x4a>
 8006d36:	e012      	b.n	8006d5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3308      	adds	r3, #8
 8006d42:	2201      	movs	r2, #1
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f93c 	bl	8006fc4 <USBD_CtlSendData>
        break;
 8006d4c:	e00c      	b.n	8006d68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2201      	movs	r2, #1
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f934 	bl	8006fc4 <USBD_CtlSendData>
        break;
 8006d5c:	e004      	b.n	8006d68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f8be 	bl	8006ee2 <USBD_CtlError>
        break;
 8006d66:	bf00      	nop
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d81e      	bhi.n	8006dc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	88db      	ldrh	r3, [r3, #6]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d004      	beq.n	8006d9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8a5 	bl	8006ee2 <USBD_CtlError>
        break;
 8006d98:	e01a      	b.n	8006dd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f043 0202 	orr.w	r2, r3, #2
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	330c      	adds	r3, #12
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f900 	bl	8006fc4 <USBD_CtlSendData>
      break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f88a 	bl	8006ee2 <USBD_CtlError>
      break;
 8006dce:	bf00      	nop
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d107      	bne.n	8006dfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f940 	bl	8007078 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006df8:	e013      	b.n	8006e22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	885b      	ldrh	r3, [r3, #2]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d10b      	bne.n	8006e1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	889b      	ldrh	r3, [r3, #4]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f930 	bl	8007078 <USBD_CtlSendStatus>
}
 8006e18:	e003      	b.n	8006e22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f860 	bl	8006ee2 <USBD_CtlError>
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d80b      	bhi.n	8006e5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10c      	bne.n	8006e64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f910 	bl	8007078 <USBD_CtlSendStatus>
      }
      break;
 8006e58:	e004      	b.n	8006e64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f840 	bl	8006ee2 <USBD_CtlError>
      break;
 8006e62:	e000      	b.n	8006e66 <USBD_ClrFeature+0x3c>
      break;
 8006e64:	bf00      	nop
  }
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	781a      	ldrb	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3301      	adds	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff fa41 	bl	8006320 <SWAPBYTE>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff fa34 	bl	8006320 <SWAPBYTE>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	461a      	mov	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff fa27 	bl	8006320 <SWAPBYTE>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	80da      	strh	r2, [r3, #6]
}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eec:	2180      	movs	r1, #128	; 0x80
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fcec 	bl	80078cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fce8 	bl	80078cc <USBD_LL_StallEP>
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d036      	beq.n	8006f88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f1e:	6938      	ldr	r0, [r7, #16]
 8006f20:	f000 f836 	bl	8006f90 <USBD_GetLen>
 8006f24:	4603      	mov	r3, r0
 8006f26:	3301      	adds	r3, #1
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	4413      	add	r3, r2
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	3301      	adds	r3, #1
 8006f42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	3301      	adds	r3, #1
 8006f52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f54:	e013      	b.n	8006f7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	7812      	ldrb	r2, [r2, #0]
 8006f60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
    idx++;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	4413      	add	r3, r2
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e7      	bne.n	8006f56 <USBD_GetString+0x52>
 8006f86:	e000      	b.n	8006f8a <USBD_GetString+0x86>
    return;
 8006f88:	bf00      	nop
  }
}
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006fa0:	e005      	b.n	8006fae <USBD_GetLen+0x1e>
  {
    len++;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f5      	bne.n	8006fa2 <USBD_GetLen+0x12>
  }

  return len;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fcf7 	bl	80079de <USBD_LL_Transmit>

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	2100      	movs	r1, #0
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fce6 	bl	80079de <USBD_LL_Transmit>

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2203      	movs	r2, #3
 800702c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	2100      	movs	r1, #0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fcea 	bl	8007a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	2100      	movs	r1, #0
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fcd9 	bl	8007a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2204      	movs	r2, #4
 8007084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fca5 	bl	80079de <USBD_LL_Transmit>

  return USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2205      	movs	r2, #5
 80070aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fcb3 	bl	8007a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070c8:	2200      	movs	r2, #0
 80070ca:	4912      	ldr	r1, [pc, #72]	; (8007114 <MX_USB_DEVICE_Init+0x50>)
 80070cc:	4812      	ldr	r0, [pc, #72]	; (8007118 <MX_USB_DEVICE_Init+0x54>)
 80070ce:	f7fe fd07 	bl	8005ae0 <USBD_Init>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070d8:	f7fa f888 	bl	80011ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070dc:	490f      	ldr	r1, [pc, #60]	; (800711c <MX_USB_DEVICE_Init+0x58>)
 80070de:	480e      	ldr	r0, [pc, #56]	; (8007118 <MX_USB_DEVICE_Init+0x54>)
 80070e0:	f7fe fd2e 	bl	8005b40 <USBD_RegisterClass>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070ea:	f7fa f87f 	bl	80011ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070ee:	490c      	ldr	r1, [pc, #48]	; (8007120 <MX_USB_DEVICE_Init+0x5c>)
 80070f0:	4809      	ldr	r0, [pc, #36]	; (8007118 <MX_USB_DEVICE_Init+0x54>)
 80070f2:	f7fe fc1f 	bl	8005934 <USBD_CDC_RegisterInterface>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070fc:	f7fa f876 	bl	80011ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007100:	4805      	ldr	r0, [pc, #20]	; (8007118 <MX_USB_DEVICE_Init+0x54>)
 8007102:	f7fe fd53 	bl	8005bac <USBD_Start>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800710c:	f7fa f86e 	bl	80011ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007110:	bf00      	nop
 8007112:	bd80      	pop	{r7, pc}
 8007114:	200000ac 	.word	0x200000ac
 8007118:	200002f8 	.word	0x200002f8
 800711c:	20000018 	.word	0x20000018
 8007120:	20000098 	.word	0x20000098

08007124 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007128:	2200      	movs	r2, #0
 800712a:	4905      	ldr	r1, [pc, #20]	; (8007140 <CDC_Init_FS+0x1c>)
 800712c:	4805      	ldr	r0, [pc, #20]	; (8007144 <CDC_Init_FS+0x20>)
 800712e:	f7fe fc1b 	bl	8005968 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007132:	4905      	ldr	r1, [pc, #20]	; (8007148 <CDC_Init_FS+0x24>)
 8007134:	4803      	ldr	r0, [pc, #12]	; (8007144 <CDC_Init_FS+0x20>)
 8007136:	f7fe fc39 	bl	80059ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800713a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800713c:	4618      	mov	r0, r3
 800713e:	bd80      	pop	{r7, pc}
 8007140:	200009d4 	.word	0x200009d4
 8007144:	200002f8 	.word	0x200002f8
 8007148:	200005d4 	.word	0x200005d4

0800714c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007152:	4618      	mov	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
 8007168:	4613      	mov	r3, r2
 800716a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	2b23      	cmp	r3, #35	; 0x23
 8007170:	d84a      	bhi.n	8007208 <CDC_Control_FS+0xac>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <CDC_Control_FS+0x1c>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007209 	.word	0x08007209
 800717c:	08007209 	.word	0x08007209
 8007180:	08007209 	.word	0x08007209
 8007184:	08007209 	.word	0x08007209
 8007188:	08007209 	.word	0x08007209
 800718c:	08007209 	.word	0x08007209
 8007190:	08007209 	.word	0x08007209
 8007194:	08007209 	.word	0x08007209
 8007198:	08007209 	.word	0x08007209
 800719c:	08007209 	.word	0x08007209
 80071a0:	08007209 	.word	0x08007209
 80071a4:	08007209 	.word	0x08007209
 80071a8:	08007209 	.word	0x08007209
 80071ac:	08007209 	.word	0x08007209
 80071b0:	08007209 	.word	0x08007209
 80071b4:	08007209 	.word	0x08007209
 80071b8:	08007209 	.word	0x08007209
 80071bc:	08007209 	.word	0x08007209
 80071c0:	08007209 	.word	0x08007209
 80071c4:	08007209 	.word	0x08007209
 80071c8:	08007209 	.word	0x08007209
 80071cc:	08007209 	.word	0x08007209
 80071d0:	08007209 	.word	0x08007209
 80071d4:	08007209 	.word	0x08007209
 80071d8:	08007209 	.word	0x08007209
 80071dc:	08007209 	.word	0x08007209
 80071e0:	08007209 	.word	0x08007209
 80071e4:	08007209 	.word	0x08007209
 80071e8:	08007209 	.word	0x08007209
 80071ec:	08007209 	.word	0x08007209
 80071f0:	08007209 	.word	0x08007209
 80071f4:	08007209 	.word	0x08007209
 80071f8:	08007209 	.word	0x08007209
 80071fc:	08007209 	.word	0x08007209
 8007200:	08007209 	.word	0x08007209
 8007204:	08007209 	.word	0x08007209
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007208:	bf00      	nop
  }

  return (USBD_OK);
 800720a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	4805      	ldr	r0, [pc, #20]	; (800723c <CDC_Receive_FS+0x24>)
 8007226:	f7fe fbc1 	bl	80059ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800722a:	4804      	ldr	r0, [pc, #16]	; (800723c <CDC_Receive_FS+0x24>)
 800722c:	f7fe fc22 	bl	8005a74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007230:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	200002f8 	.word	0x200002f8

08007240 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007250:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <CDC_Transmit_FS+0x48>)
 8007252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007256:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007262:	2301      	movs	r3, #1
 8007264:	e00b      	b.n	800727e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	461a      	mov	r2, r3
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4806      	ldr	r0, [pc, #24]	; (8007288 <CDC_Transmit_FS+0x48>)
 800726e:	f7fe fb7b 	bl	8005968 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007272:	4805      	ldr	r0, [pc, #20]	; (8007288 <CDC_Transmit_FS+0x48>)
 8007274:	f7fe fbb8 	bl	80059e8 <USBD_CDC_TransmitPacket>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	200002f8 	.word	0x200002f8

0800728c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800729e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2212      	movs	r2, #18
 80072c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072c2:	4b03      	ldr	r3, [pc, #12]	; (80072d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	200000c8 	.word	0x200000c8

080072d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	6039      	str	r1, [r7, #0]
 80072de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2204      	movs	r2, #4
 80072e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072e6:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	200000dc 	.word	0x200000dc

080072f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	4907      	ldr	r1, [pc, #28]	; (800732c <USBD_FS_ProductStrDescriptor+0x34>)
 800730e:	4808      	ldr	r0, [pc, #32]	; (8007330 <USBD_FS_ProductStrDescriptor+0x38>)
 8007310:	f7ff fdf8 	bl	8006f04 <USBD_GetString>
 8007314:	e004      	b.n	8007320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	4904      	ldr	r1, [pc, #16]	; (800732c <USBD_FS_ProductStrDescriptor+0x34>)
 800731a:	4805      	ldr	r0, [pc, #20]	; (8007330 <USBD_FS_ProductStrDescriptor+0x38>)
 800731c:	f7ff fdf2 	bl	8006f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007320:	4b02      	ldr	r3, [pc, #8]	; (800732c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000dd4 	.word	0x20000dd4
 8007330:	0800c478 	.word	0x0800c478

08007334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	6039      	str	r1, [r7, #0]
 800733e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	4904      	ldr	r1, [pc, #16]	; (8007354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007344:	4804      	ldr	r0, [pc, #16]	; (8007358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007346:	f7ff fddd 	bl	8006f04 <USBD_GetString>
  return USBD_StrDesc;
 800734a:	4b02      	ldr	r3, [pc, #8]	; (8007354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000dd4 	.word	0x20000dd4
 8007358:	0800c490 	.word	0x0800c490

0800735c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	221a      	movs	r2, #26
 800736c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800736e:	f000 f843 	bl	80073f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007372:	4b02      	ldr	r3, [pc, #8]	; (800737c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	200000e0 	.word	0x200000e0

08007380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	4907      	ldr	r1, [pc, #28]	; (80073b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007396:	4808      	ldr	r0, [pc, #32]	; (80073b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007398:	f7ff fdb4 	bl	8006f04 <USBD_GetString>
 800739c:	e004      	b.n	80073a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	4904      	ldr	r1, [pc, #16]	; (80073b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073a2:	4805      	ldr	r0, [pc, #20]	; (80073b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073a4:	f7ff fdae 	bl	8006f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000dd4 	.word	0x20000dd4
 80073b8:	0800c4a4 	.word	0x0800c4a4

080073bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	4907      	ldr	r1, [pc, #28]	; (80073f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073d2:	4808      	ldr	r0, [pc, #32]	; (80073f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073d4:	f7ff fd96 	bl	8006f04 <USBD_GetString>
 80073d8:	e004      	b.n	80073e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4904      	ldr	r1, [pc, #16]	; (80073f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073de:	4805      	ldr	r0, [pc, #20]	; (80073f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073e0:	f7ff fd90 	bl	8006f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073e4:	4b02      	ldr	r3, [pc, #8]	; (80073f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000dd4 	.word	0x20000dd4
 80073f4:	0800c4b0 	.word	0x0800c4b0

080073f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <Get_SerialNum+0x44>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <Get_SerialNum+0x48>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <Get_SerialNum+0x4c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800741e:	2208      	movs	r2, #8
 8007420:	4909      	ldr	r1, [pc, #36]	; (8007448 <Get_SerialNum+0x50>)
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f814 	bl	8007450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007428:	2204      	movs	r2, #4
 800742a:	4908      	ldr	r1, [pc, #32]	; (800744c <Get_SerialNum+0x54>)
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f000 f80f 	bl	8007450 <IntToUnicode>
  }
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	1fff7a10 	.word	0x1fff7a10
 8007440:	1fff7a14 	.word	0x1fff7a14
 8007444:	1fff7a18 	.word	0x1fff7a18
 8007448:	200000e2 	.word	0x200000e2
 800744c:	200000f2 	.word	0x200000f2

08007450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]
 8007466:	e027      	b.n	80074b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	0f1b      	lsrs	r3, r3, #28
 800746c:	2b09      	cmp	r3, #9
 800746e:	d80b      	bhi.n	8007488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	0f1b      	lsrs	r3, r3, #28
 8007474:	b2da      	uxtb	r2, r3
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	4619      	mov	r1, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	440b      	add	r3, r1
 8007480:	3230      	adds	r2, #48	; 0x30
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e00a      	b.n	800749e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	0f1b      	lsrs	r3, r3, #28
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	4619      	mov	r1, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	440b      	add	r3, r1
 8007498:	3237      	adds	r2, #55	; 0x37
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	3301      	adds	r3, #1
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4413      	add	r3, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	3301      	adds	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]
 80074b8:	7dfa      	ldrb	r2, [r7, #23]
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d3d3      	bcc.n	8007468 <IntToUnicode+0x18>
  }
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <print>:
#include "usbdebug.h"




void print(char *message) {
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
	USBD_StatusTypeDef USBD_Status;
	do{
		USBD_Status = CDC_Transmit_FS((uint8_t*) message, strlen(message));
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7f8 fe82 	bl	80001e0 <strlen>
 80074dc:	4603      	mov	r3, r0
 80074de:	b29b      	uxth	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff feac 	bl	8007240 <CDC_Transmit_FS>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]
	   } while(USBD_Status != USBD_OK);
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f1      	bne.n	80074d6 <print+0x8>
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	60da      	str	r2, [r3, #12]
 8007512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800751c:	d13a      	bne.n	8007594 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	4b1e      	ldr	r3, [pc, #120]	; (800759c <HAL_PCD_MspInit+0xa0>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	4a1d      	ldr	r2, [pc, #116]	; (800759c <HAL_PCD_MspInit+0xa0>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6313      	str	r3, [r2, #48]	; 0x30
 800752e:	4b1b      	ldr	r3, [pc, #108]	; (800759c <HAL_PCD_MspInit+0xa0>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800753a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800753e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007540:	2302      	movs	r3, #2
 8007542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007548:	2303      	movs	r3, #3
 800754a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800754c:	230a      	movs	r3, #10
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007550:	f107 0314 	add.w	r3, r7, #20
 8007554:	4619      	mov	r1, r3
 8007556:	4812      	ldr	r0, [pc, #72]	; (80075a0 <HAL_PCD_MspInit+0xa4>)
 8007558:	f7fa f954 	bl	8001804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <HAL_PCD_MspInit+0xa0>)
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	4a0e      	ldr	r2, [pc, #56]	; (800759c <HAL_PCD_MspInit+0xa0>)
 8007562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007566:	6353      	str	r3, [r2, #52]	; 0x34
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <HAL_PCD_MspInit+0xa0>)
 800756e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007570:	4a0a      	ldr	r2, [pc, #40]	; (800759c <HAL_PCD_MspInit+0xa0>)
 8007572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007576:	6453      	str	r3, [r2, #68]	; 0x44
 8007578:	4b08      	ldr	r3, [pc, #32]	; (800759c <HAL_PCD_MspInit+0xa0>)
 800757a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007584:	2200      	movs	r2, #0
 8007586:	2100      	movs	r1, #0
 8007588:	2043      	movs	r0, #67	; 0x43
 800758a:	f7fa f904 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800758e:	2043      	movs	r0, #67	; 0x43
 8007590:	f7fa f91d 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007594:	bf00      	nop
 8007596:	3728      	adds	r7, #40	; 0x28
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40023800 	.word	0x40023800
 80075a0:	40020000 	.word	0x40020000

080075a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe fb43 	bl	8005c46 <USBD_LL_SetupStage>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	4619      	mov	r1, r3
 80075f2:	f7fe fb7d 	bl	8005cf0 <USBD_LL_DataOutStage>
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	334c      	adds	r3, #76	; 0x4c
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	4619      	mov	r1, r3
 8007626:	f7fe fc16 	bl	8005e56 <USBD_LL_DataInStage>
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fd4a 	bl	80060da <USBD_LL_SOF>
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007656:	2301      	movs	r3, #1
 8007658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d001      	beq.n	8007666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007662:	f7f9 fdc3 	bl	80011ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fcf4 	bl	800605e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fc9c 	bl	8005fba <USBD_LL_Reset>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fcef 	bl	800607e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <HAL_PCD_SuspendCallback+0x48>)
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	4a03      	ldr	r2, [pc, #12]	; (80076d4 <HAL_PCD_SuspendCallback+0x48>)
 80076c6:	f043 0306 	orr.w	r3, r3, #6
 80076ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	e000ed00 	.word	0xe000ed00

080076d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fcdf 	bl	80060aa <USBD_LL_Resume>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fd37 	bl	800617e <USBD_LL_IsoOUTIncomplete>
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fcf3 	bl	800611a <USBD_LL_IsoINIncomplete>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fd49 	bl	80061e2 <USBD_LL_DevConnected>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fd46 	bl	80061f8 <USBD_LL_DevDisconnected>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d13c      	bne.n	80077fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007784:	4a20      	ldr	r2, [pc, #128]	; (8007808 <USBD_LL_Init+0x94>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <USBD_LL_Init+0x94>)
 8007790:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007794:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <USBD_LL_Init+0x94>)
 8007796:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800779a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800779c:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <USBD_LL_Init+0x94>)
 800779e:	2204      	movs	r2, #4
 80077a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077a2:	4b19      	ldr	r3, [pc, #100]	; (8007808 <USBD_LL_Init+0x94>)
 80077a4:	2202      	movs	r2, #2
 80077a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <USBD_LL_Init+0x94>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077ae:	4b16      	ldr	r3, [pc, #88]	; (8007808 <USBD_LL_Init+0x94>)
 80077b0:	2202      	movs	r2, #2
 80077b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077b4:	4b14      	ldr	r3, [pc, #80]	; (8007808 <USBD_LL_Init+0x94>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077ba:	4b13      	ldr	r3, [pc, #76]	; (8007808 <USBD_LL_Init+0x94>)
 80077bc:	2200      	movs	r2, #0
 80077be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077c0:	4b11      	ldr	r3, [pc, #68]	; (8007808 <USBD_LL_Init+0x94>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <USBD_LL_Init+0x94>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <USBD_LL_Init+0x94>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077d2:	480d      	ldr	r0, [pc, #52]	; (8007808 <USBD_LL_Init+0x94>)
 80077d4:	f7fa f9b3 	bl	8001b3e <HAL_PCD_Init>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077de:	f7f9 fd05 	bl	80011ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077e2:	2180      	movs	r1, #128	; 0x80
 80077e4:	4808      	ldr	r0, [pc, #32]	; (8007808 <USBD_LL_Init+0x94>)
 80077e6:	f7fb fc0a 	bl	8002ffe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	2100      	movs	r1, #0
 80077ee:	4806      	ldr	r0, [pc, #24]	; (8007808 <USBD_LL_Init+0x94>)
 80077f0:	f7fb fbbe 	bl	8002f70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077f4:	2280      	movs	r2, #128	; 0x80
 80077f6:	2101      	movs	r1, #1
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <USBD_LL_Init+0x94>)
 80077fa:	f7fb fbb9 	bl	8002f70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000fd4 	.word	0x20000fd4

0800780c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007822:	4618      	mov	r0, r3
 8007824:	f7fa faa8 	bl	8001d78 <HAL_PCD_Start>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f942 	bl	8007ab8 <USBD_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	4608      	mov	r0, r1
 800784c:	4611      	mov	r1, r2
 800784e:	461a      	mov	r2, r3
 8007850:	4603      	mov	r3, r0
 8007852:	70fb      	strb	r3, [r7, #3]
 8007854:	460b      	mov	r3, r1
 8007856:	70bb      	strb	r3, [r7, #2]
 8007858:	4613      	mov	r3, r2
 800785a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800786a:	78bb      	ldrb	r3, [r7, #2]
 800786c:	883a      	ldrh	r2, [r7, #0]
 800786e:	78f9      	ldrb	r1, [r7, #3]
 8007870:	f7fa ff79 	bl	8002766 <HAL_PCD_EP_Open>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f91c 	bl	8007ab8 <USBD_Get_USB_Status>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007884:	7bbb      	ldrb	r3, [r7, #14]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fa ffc2 	bl	8002836 <HAL_PCD_EP_Close>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f8fd 	bl	8007ab8 <USBD_Get_USB_Status>
 80078be:	4603      	mov	r3, r0
 80078c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078e6:	78fa      	ldrb	r2, [r7, #3]
 80078e8:	4611      	mov	r1, r2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fb f89a 	bl	8002a24 <HAL_PCD_EP_SetStall>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f8de 	bl	8007ab8 <USBD_Get_USB_Status>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007900:	7bbb      	ldrb	r3, [r7, #14]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	4611      	mov	r1, r2
 8007928:	4618      	mov	r0, r3
 800792a:	f7fb f8df 	bl	8002aec <HAL_PCD_EP_ClrStall>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 f8bf 	bl	8007ab8 <USBD_Get_USB_Status>
 800793a:	4603      	mov	r3, r0
 800793c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800793e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800795a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800795c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007960:	2b00      	cmp	r3, #0
 8007962:	da0b      	bge.n	800797c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	4613      	mov	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	333e      	adds	r3, #62	; 0x3e
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	e00b      	b.n	8007994 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007992:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fa feac 	bl	800271c <HAL_PCD_SetAddress>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f874 	bl	8007ab8 <USBD_Get_USB_Status>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b086      	sub	sp, #24
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	460b      	mov	r3, r1
 80079ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079fc:	7af9      	ldrb	r1, [r7, #11]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	f7fa ffc5 	bl	8002990 <HAL_PCD_EP_Transmit>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 f853 	bl	8007ab8 <USBD_Get_USB_Status>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a16:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a3e:	7af9      	ldrb	r1, [r7, #11]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	f7fa ff41 	bl	80028ca <HAL_PCD_EP_Receive>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f832 	bl	8007ab8 <USBD_Get_USB_Status>
 8007a54:	4603      	mov	r3, r0
 8007a56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a58:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fa ff71 	bl	8002960 <HAL_PCD_EP_GetRxCount>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <USBD_static_malloc+0x18>)
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	200014e0 	.word	0x200014e0

08007aa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]

}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d817      	bhi.n	8007afc <USBD_Get_USB_Status+0x44>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <USBD_Get_USB_Status+0x1c>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007aeb 	.word	0x08007aeb
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007af7 	.word	0x08007af7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae8:	e00b      	b.n	8007b02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]
    break;
 8007aee:	e008      	b.n	8007b02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
    break;
 8007af4:	e005      	b.n	8007b02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	73fb      	strb	r3, [r7, #15]
    break;
 8007afa:	e002      	b.n	8007b02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	73fb      	strb	r3, [r7, #15]
    break;
 8007b00:	bf00      	nop
  }
  return usb_status;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <__errno>:
 8007b10:	4b01      	ldr	r3, [pc, #4]	; (8007b18 <__errno+0x8>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	200000fc 	.word	0x200000fc

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	; (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	; (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	; (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	; (8007b60 <__libc_init_array+0x44>)
 8007b30:	f004 fc8e 	bl	800c450 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	0800c97c 	.word	0x0800c97c
 8007b58:	0800c97c 	.word	0x0800c97c
 8007b5c:	0800c97c 	.word	0x0800c97c
 8007b60:	0800c980 	.word	0x0800c980

08007b64 <malloc>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <malloc+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f000 b877 	b.w	8007c5c <_malloc_r>
 8007b6e:	bf00      	nop
 8007b70:	200000fc 	.word	0x200000fc

08007b74 <memset>:
 8007b74:	4402      	add	r2, r0
 8007b76:	4603      	mov	r3, r0
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d100      	bne.n	8007b7e <memset+0xa>
 8007b7c:	4770      	bx	lr
 8007b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b82:	e7f9      	b.n	8007b78 <memset+0x4>

08007b84 <_free_r>:
 8007b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d044      	beq.n	8007c14 <_free_r+0x90>
 8007b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b8e:	9001      	str	r0, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f1a1 0404 	sub.w	r4, r1, #4
 8007b96:	bfb8      	it	lt
 8007b98:	18e4      	addlt	r4, r4, r3
 8007b9a:	f003 f83f 	bl	800ac1c <__malloc_lock>
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <_free_r+0x94>)
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	b933      	cbnz	r3, 8007bb4 <_free_r+0x30>
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6014      	str	r4, [r2, #0]
 8007baa:	b003      	add	sp, #12
 8007bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bb0:	f003 b83a 	b.w	800ac28 <__malloc_unlock>
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d908      	bls.n	8007bca <_free_r+0x46>
 8007bb8:	6825      	ldr	r5, [r4, #0]
 8007bba:	1961      	adds	r1, r4, r5
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	bf01      	itttt	eq
 8007bc0:	6819      	ldreq	r1, [r3, #0]
 8007bc2:	685b      	ldreq	r3, [r3, #4]
 8007bc4:	1949      	addeq	r1, r1, r5
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	e7ed      	b.n	8007ba6 <_free_r+0x22>
 8007bca:	461a      	mov	r2, r3
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b10b      	cbz	r3, 8007bd4 <_free_r+0x50>
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d9fa      	bls.n	8007bca <_free_r+0x46>
 8007bd4:	6811      	ldr	r1, [r2, #0]
 8007bd6:	1855      	adds	r5, r2, r1
 8007bd8:	42a5      	cmp	r5, r4
 8007bda:	d10b      	bne.n	8007bf4 <_free_r+0x70>
 8007bdc:	6824      	ldr	r4, [r4, #0]
 8007bde:	4421      	add	r1, r4
 8007be0:	1854      	adds	r4, r2, r1
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	d1e0      	bne.n	8007baa <_free_r+0x26>
 8007be8:	681c      	ldr	r4, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	6053      	str	r3, [r2, #4]
 8007bee:	4421      	add	r1, r4
 8007bf0:	6011      	str	r1, [r2, #0]
 8007bf2:	e7da      	b.n	8007baa <_free_r+0x26>
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x78>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	e7d6      	b.n	8007baa <_free_r+0x26>
 8007bfc:	6825      	ldr	r5, [r4, #0]
 8007bfe:	1961      	adds	r1, r4, r5
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf04      	itt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	bf04      	itt	eq
 8007c0c:	1949      	addeq	r1, r1, r5
 8007c0e:	6021      	streq	r1, [r4, #0]
 8007c10:	6054      	str	r4, [r2, #4]
 8007c12:	e7ca      	b.n	8007baa <_free_r+0x26>
 8007c14:	b003      	add	sp, #12
 8007c16:	bd30      	pop	{r4, r5, pc}
 8007c18:	20001700 	.word	0x20001700

08007c1c <sbrk_aligned>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	4e0e      	ldr	r6, [pc, #56]	; (8007c58 <sbrk_aligned+0x3c>)
 8007c20:	460c      	mov	r4, r1
 8007c22:	6831      	ldr	r1, [r6, #0]
 8007c24:	4605      	mov	r5, r0
 8007c26:	b911      	cbnz	r1, 8007c2e <sbrk_aligned+0x12>
 8007c28:	f000 ff06 	bl	8008a38 <_sbrk_r>
 8007c2c:	6030      	str	r0, [r6, #0]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 ff01 	bl	8008a38 <_sbrk_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d00a      	beq.n	8007c50 <sbrk_aligned+0x34>
 8007c3a:	1cc4      	adds	r4, r0, #3
 8007c3c:	f024 0403 	bic.w	r4, r4, #3
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d007      	beq.n	8007c54 <sbrk_aligned+0x38>
 8007c44:	1a21      	subs	r1, r4, r0
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 fef6 	bl	8008a38 <_sbrk_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d101      	bne.n	8007c54 <sbrk_aligned+0x38>
 8007c50:	f04f 34ff 	mov.w	r4, #4294967295
 8007c54:	4620      	mov	r0, r4
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	20001704 	.word	0x20001704

08007c5c <_malloc_r>:
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	1ccd      	adds	r5, r1, #3
 8007c62:	f025 0503 	bic.w	r5, r5, #3
 8007c66:	3508      	adds	r5, #8
 8007c68:	2d0c      	cmp	r5, #12
 8007c6a:	bf38      	it	cc
 8007c6c:	250c      	movcc	r5, #12
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	4607      	mov	r7, r0
 8007c72:	db01      	blt.n	8007c78 <_malloc_r+0x1c>
 8007c74:	42a9      	cmp	r1, r5
 8007c76:	d905      	bls.n	8007c84 <_malloc_r+0x28>
 8007c78:	230c      	movs	r3, #12
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	2600      	movs	r6, #0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c84:	4e2e      	ldr	r6, [pc, #184]	; (8007d40 <_malloc_r+0xe4>)
 8007c86:	f002 ffc9 	bl	800ac1c <__malloc_lock>
 8007c8a:	6833      	ldr	r3, [r6, #0]
 8007c8c:	461c      	mov	r4, r3
 8007c8e:	bb34      	cbnz	r4, 8007cde <_malloc_r+0x82>
 8007c90:	4629      	mov	r1, r5
 8007c92:	4638      	mov	r0, r7
 8007c94:	f7ff ffc2 	bl	8007c1c <sbrk_aligned>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	d14d      	bne.n	8007d3a <_malloc_r+0xde>
 8007c9e:	6834      	ldr	r4, [r6, #0]
 8007ca0:	4626      	mov	r6, r4
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d140      	bne.n	8007d28 <_malloc_r+0xcc>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	4631      	mov	r1, r6
 8007caa:	4638      	mov	r0, r7
 8007cac:	eb04 0803 	add.w	r8, r4, r3
 8007cb0:	f000 fec2 	bl	8008a38 <_sbrk_r>
 8007cb4:	4580      	cmp	r8, r0
 8007cb6:	d13a      	bne.n	8007d2e <_malloc_r+0xd2>
 8007cb8:	6821      	ldr	r1, [r4, #0]
 8007cba:	3503      	adds	r5, #3
 8007cbc:	1a6d      	subs	r5, r5, r1
 8007cbe:	f025 0503 	bic.w	r5, r5, #3
 8007cc2:	3508      	adds	r5, #8
 8007cc4:	2d0c      	cmp	r5, #12
 8007cc6:	bf38      	it	cc
 8007cc8:	250c      	movcc	r5, #12
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff ffa5 	bl	8007c1c <sbrk_aligned>
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d02b      	beq.n	8007d2e <_malloc_r+0xd2>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	442b      	add	r3, r5
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	e00e      	b.n	8007cfc <_malloc_r+0xa0>
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	1b52      	subs	r2, r2, r5
 8007ce2:	d41e      	bmi.n	8007d22 <_malloc_r+0xc6>
 8007ce4:	2a0b      	cmp	r2, #11
 8007ce6:	d916      	bls.n	8007d16 <_malloc_r+0xba>
 8007ce8:	1961      	adds	r1, r4, r5
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	6025      	str	r5, [r4, #0]
 8007cee:	bf18      	it	ne
 8007cf0:	6059      	strne	r1, [r3, #4]
 8007cf2:	6863      	ldr	r3, [r4, #4]
 8007cf4:	bf08      	it	eq
 8007cf6:	6031      	streq	r1, [r6, #0]
 8007cf8:	5162      	str	r2, [r4, r5]
 8007cfa:	604b      	str	r3, [r1, #4]
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f104 060b 	add.w	r6, r4, #11
 8007d02:	f002 ff91 	bl	800ac28 <__malloc_unlock>
 8007d06:	f026 0607 	bic.w	r6, r6, #7
 8007d0a:	1d23      	adds	r3, r4, #4
 8007d0c:	1af2      	subs	r2, r6, r3
 8007d0e:	d0b6      	beq.n	8007c7e <_malloc_r+0x22>
 8007d10:	1b9b      	subs	r3, r3, r6
 8007d12:	50a3      	str	r3, [r4, r2]
 8007d14:	e7b3      	b.n	8007c7e <_malloc_r+0x22>
 8007d16:	6862      	ldr	r2, [r4, #4]
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	bf0c      	ite	eq
 8007d1c:	6032      	streq	r2, [r6, #0]
 8007d1e:	605a      	strne	r2, [r3, #4]
 8007d20:	e7ec      	b.n	8007cfc <_malloc_r+0xa0>
 8007d22:	4623      	mov	r3, r4
 8007d24:	6864      	ldr	r4, [r4, #4]
 8007d26:	e7b2      	b.n	8007c8e <_malloc_r+0x32>
 8007d28:	4634      	mov	r4, r6
 8007d2a:	6876      	ldr	r6, [r6, #4]
 8007d2c:	e7b9      	b.n	8007ca2 <_malloc_r+0x46>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	603b      	str	r3, [r7, #0]
 8007d32:	4638      	mov	r0, r7
 8007d34:	f002 ff78 	bl	800ac28 <__malloc_unlock>
 8007d38:	e7a1      	b.n	8007c7e <_malloc_r+0x22>
 8007d3a:	6025      	str	r5, [r4, #0]
 8007d3c:	e7de      	b.n	8007cfc <_malloc_r+0xa0>
 8007d3e:	bf00      	nop
 8007d40:	20001700 	.word	0x20001700

08007d44 <__cvt>:
 8007d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	ec55 4b10 	vmov	r4, r5, d0
 8007d4c:	2d00      	cmp	r5, #0
 8007d4e:	460e      	mov	r6, r1
 8007d50:	4619      	mov	r1, r3
 8007d52:	462b      	mov	r3, r5
 8007d54:	bfbb      	ittet	lt
 8007d56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d5a:	461d      	movlt	r5, r3
 8007d5c:	2300      	movge	r3, #0
 8007d5e:	232d      	movlt	r3, #45	; 0x2d
 8007d60:	700b      	strb	r3, [r1, #0]
 8007d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d68:	4691      	mov	r9, r2
 8007d6a:	f023 0820 	bic.w	r8, r3, #32
 8007d6e:	bfbc      	itt	lt
 8007d70:	4622      	movlt	r2, r4
 8007d72:	4614      	movlt	r4, r2
 8007d74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d78:	d005      	beq.n	8007d86 <__cvt+0x42>
 8007d7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d7e:	d100      	bne.n	8007d82 <__cvt+0x3e>
 8007d80:	3601      	adds	r6, #1
 8007d82:	2102      	movs	r1, #2
 8007d84:	e000      	b.n	8007d88 <__cvt+0x44>
 8007d86:	2103      	movs	r1, #3
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	ab02      	add	r3, sp, #8
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	ec45 4b10 	vmov	d0, r4, r5
 8007d94:	4653      	mov	r3, sl
 8007d96:	4632      	mov	r2, r6
 8007d98:	f001 fdbe 	bl	8009918 <_dtoa_r>
 8007d9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007da0:	4607      	mov	r7, r0
 8007da2:	d102      	bne.n	8007daa <__cvt+0x66>
 8007da4:	f019 0f01 	tst.w	r9, #1
 8007da8:	d022      	beq.n	8007df0 <__cvt+0xac>
 8007daa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dae:	eb07 0906 	add.w	r9, r7, r6
 8007db2:	d110      	bne.n	8007dd6 <__cvt+0x92>
 8007db4:	783b      	ldrb	r3, [r7, #0]
 8007db6:	2b30      	cmp	r3, #48	; 0x30
 8007db8:	d10a      	bne.n	8007dd0 <__cvt+0x8c>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dc6:	b918      	cbnz	r0, 8007dd0 <__cvt+0x8c>
 8007dc8:	f1c6 0601 	rsb	r6, r6, #1
 8007dcc:	f8ca 6000 	str.w	r6, [sl]
 8007dd0:	f8da 3000 	ldr.w	r3, [sl]
 8007dd4:	4499      	add	r9, r3
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f7f8 fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007de2:	b108      	cbz	r0, 8007de8 <__cvt+0xa4>
 8007de4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007de8:	2230      	movs	r2, #48	; 0x30
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	454b      	cmp	r3, r9
 8007dee:	d307      	bcc.n	8007e00 <__cvt+0xbc>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df4:	1bdb      	subs	r3, r3, r7
 8007df6:	4638      	mov	r0, r7
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	b004      	add	sp, #16
 8007dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e00:	1c59      	adds	r1, r3, #1
 8007e02:	9103      	str	r1, [sp, #12]
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e7f0      	b.n	8007dea <__cvt+0xa6>

08007e08 <__exponent>:
 8007e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	bfb8      	it	lt
 8007e10:	4249      	neglt	r1, r1
 8007e12:	f803 2b02 	strb.w	r2, [r3], #2
 8007e16:	bfb4      	ite	lt
 8007e18:	222d      	movlt	r2, #45	; 0x2d
 8007e1a:	222b      	movge	r2, #43	; 0x2b
 8007e1c:	2909      	cmp	r1, #9
 8007e1e:	7042      	strb	r2, [r0, #1]
 8007e20:	dd2a      	ble.n	8007e78 <__exponent+0x70>
 8007e22:	f10d 0407 	add.w	r4, sp, #7
 8007e26:	46a4      	mov	ip, r4
 8007e28:	270a      	movs	r7, #10
 8007e2a:	46a6      	mov	lr, r4
 8007e2c:	460a      	mov	r2, r1
 8007e2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e32:	fb07 1516 	mls	r5, r7, r6, r1
 8007e36:	3530      	adds	r5, #48	; 0x30
 8007e38:	2a63      	cmp	r2, #99	; 0x63
 8007e3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e42:	4631      	mov	r1, r6
 8007e44:	dcf1      	bgt.n	8007e2a <__exponent+0x22>
 8007e46:	3130      	adds	r1, #48	; 0x30
 8007e48:	f1ae 0502 	sub.w	r5, lr, #2
 8007e4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e50:	1c44      	adds	r4, r0, #1
 8007e52:	4629      	mov	r1, r5
 8007e54:	4561      	cmp	r1, ip
 8007e56:	d30a      	bcc.n	8007e6e <__exponent+0x66>
 8007e58:	f10d 0209 	add.w	r2, sp, #9
 8007e5c:	eba2 020e 	sub.w	r2, r2, lr
 8007e60:	4565      	cmp	r5, ip
 8007e62:	bf88      	it	hi
 8007e64:	2200      	movhi	r2, #0
 8007e66:	4413      	add	r3, r2
 8007e68:	1a18      	subs	r0, r3, r0
 8007e6a:	b003      	add	sp, #12
 8007e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e76:	e7ed      	b.n	8007e54 <__exponent+0x4c>
 8007e78:	2330      	movs	r3, #48	; 0x30
 8007e7a:	3130      	adds	r1, #48	; 0x30
 8007e7c:	7083      	strb	r3, [r0, #2]
 8007e7e:	70c1      	strb	r1, [r0, #3]
 8007e80:	1d03      	adds	r3, r0, #4
 8007e82:	e7f1      	b.n	8007e68 <__exponent+0x60>

08007e84 <_printf_float>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	ed2d 8b02 	vpush	{d8}
 8007e8c:	b08d      	sub	sp, #52	; 0x34
 8007e8e:	460c      	mov	r4, r1
 8007e90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e94:	4616      	mov	r6, r2
 8007e96:	461f      	mov	r7, r3
 8007e98:	4605      	mov	r5, r0
 8007e9a:	f002 fe9b 	bl	800abd4 <_localeconv_r>
 8007e9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	f7f8 f99c 	bl	80001e0 <strlen>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007eb8:	3307      	adds	r3, #7
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	f103 0208 	add.w	r2, r3, #8
 8007ec2:	f8c8 2000 	str.w	r2, [r8]
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ece:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ed2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ed6:	9307      	str	r3, [sp, #28]
 8007ed8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007edc:	ee08 0a10 	vmov	s16, r0
 8007ee0:	4b9f      	ldr	r3, [pc, #636]	; (8008160 <_printf_float+0x2dc>)
 8007ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	f7f8 fe27 	bl	8000b3c <__aeabi_dcmpun>
 8007eee:	bb88      	cbnz	r0, 8007f54 <_printf_float+0xd0>
 8007ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef4:	4b9a      	ldr	r3, [pc, #616]	; (8008160 <_printf_float+0x2dc>)
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	f7f8 fe01 	bl	8000b00 <__aeabi_dcmple>
 8007efe:	bb48      	cbnz	r0, 8007f54 <_printf_float+0xd0>
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8007f0c:	b110      	cbz	r0, 8007f14 <_printf_float+0x90>
 8007f0e:	232d      	movs	r3, #45	; 0x2d
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f14:	4b93      	ldr	r3, [pc, #588]	; (8008164 <_printf_float+0x2e0>)
 8007f16:	4894      	ldr	r0, [pc, #592]	; (8008168 <_printf_float+0x2e4>)
 8007f18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f1c:	bf94      	ite	ls
 8007f1e:	4698      	movls	r8, r3
 8007f20:	4680      	movhi	r8, r0
 8007f22:	2303      	movs	r3, #3
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	9b05      	ldr	r3, [sp, #20]
 8007f28:	f023 0204 	bic.w	r2, r3, #4
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	f04f 0900 	mov.w	r9, #0
 8007f32:	9700      	str	r7, [sp, #0]
 8007f34:	4633      	mov	r3, r6
 8007f36:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f9d8 	bl	80082f0 <_printf_common>
 8007f40:	3001      	adds	r0, #1
 8007f42:	f040 8090 	bne.w	8008066 <_printf_float+0x1e2>
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4a:	b00d      	add	sp, #52	; 0x34
 8007f4c:	ecbd 8b02 	vpop	{d8}
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 fdee 	bl	8000b3c <__aeabi_dcmpun>
 8007f60:	b140      	cbz	r0, 8007f74 <_printf_float+0xf0>
 8007f62:	464b      	mov	r3, r9
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bfbc      	itt	lt
 8007f68:	232d      	movlt	r3, #45	; 0x2d
 8007f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f6e:	487f      	ldr	r0, [pc, #508]	; (800816c <_printf_float+0x2e8>)
 8007f70:	4b7f      	ldr	r3, [pc, #508]	; (8008170 <_printf_float+0x2ec>)
 8007f72:	e7d1      	b.n	8007f18 <_printf_float+0x94>
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f7a:	9206      	str	r2, [sp, #24]
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	d13f      	bne.n	8008000 <_printf_float+0x17c>
 8007f80:	2306      	movs	r3, #6
 8007f82:	6063      	str	r3, [r4, #4]
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	6861      	ldr	r1, [r4, #4]
 8007f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	ab0a      	add	r3, sp, #40	; 0x28
 8007f92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f96:	ab09      	add	r3, sp, #36	; 0x24
 8007f98:	ec49 8b10 	vmov	d0, r8, r9
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	6022      	str	r2, [r4, #0]
 8007fa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f7ff fecd 	bl	8007d44 <__cvt>
 8007faa:	9b06      	ldr	r3, [sp, #24]
 8007fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fae:	2b47      	cmp	r3, #71	; 0x47
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	d108      	bne.n	8007fc6 <_printf_float+0x142>
 8007fb4:	1cc8      	adds	r0, r1, #3
 8007fb6:	db02      	blt.n	8007fbe <_printf_float+0x13a>
 8007fb8:	6863      	ldr	r3, [r4, #4]
 8007fba:	4299      	cmp	r1, r3
 8007fbc:	dd41      	ble.n	8008042 <_printf_float+0x1be>
 8007fbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fc2:	fa5f fb8b 	uxtb.w	fp, fp
 8007fc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fca:	d820      	bhi.n	800800e <_printf_float+0x18a>
 8007fcc:	3901      	subs	r1, #1
 8007fce:	465a      	mov	r2, fp
 8007fd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fd4:	9109      	str	r1, [sp, #36]	; 0x24
 8007fd6:	f7ff ff17 	bl	8007e08 <__exponent>
 8007fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fdc:	1813      	adds	r3, r2, r0
 8007fde:	2a01      	cmp	r2, #1
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	dc02      	bgt.n	8007fec <_printf_float+0x168>
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	07d2      	lsls	r2, r2, #31
 8007fea:	d501      	bpl.n	8007ff0 <_printf_float+0x16c>
 8007fec:	3301      	adds	r3, #1
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d09c      	beq.n	8007f32 <_printf_float+0xae>
 8007ff8:	232d      	movs	r3, #45	; 0x2d
 8007ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffe:	e798      	b.n	8007f32 <_printf_float+0xae>
 8008000:	9a06      	ldr	r2, [sp, #24]
 8008002:	2a47      	cmp	r2, #71	; 0x47
 8008004:	d1be      	bne.n	8007f84 <_printf_float+0x100>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1bc      	bne.n	8007f84 <_printf_float+0x100>
 800800a:	2301      	movs	r3, #1
 800800c:	e7b9      	b.n	8007f82 <_printf_float+0xfe>
 800800e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008012:	d118      	bne.n	8008046 <_printf_float+0x1c2>
 8008014:	2900      	cmp	r1, #0
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	dd0b      	ble.n	8008032 <_printf_float+0x1ae>
 800801a:	6121      	str	r1, [r4, #16]
 800801c:	b913      	cbnz	r3, 8008024 <_printf_float+0x1a0>
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	07d0      	lsls	r0, r2, #31
 8008022:	d502      	bpl.n	800802a <_printf_float+0x1a6>
 8008024:	3301      	adds	r3, #1
 8008026:	440b      	add	r3, r1
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	65a1      	str	r1, [r4, #88]	; 0x58
 800802c:	f04f 0900 	mov.w	r9, #0
 8008030:	e7de      	b.n	8007ff0 <_printf_float+0x16c>
 8008032:	b913      	cbnz	r3, 800803a <_printf_float+0x1b6>
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	07d2      	lsls	r2, r2, #31
 8008038:	d501      	bpl.n	800803e <_printf_float+0x1ba>
 800803a:	3302      	adds	r3, #2
 800803c:	e7f4      	b.n	8008028 <_printf_float+0x1a4>
 800803e:	2301      	movs	r3, #1
 8008040:	e7f2      	b.n	8008028 <_printf_float+0x1a4>
 8008042:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008048:	4299      	cmp	r1, r3
 800804a:	db05      	blt.n	8008058 <_printf_float+0x1d4>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	6121      	str	r1, [r4, #16]
 8008050:	07d8      	lsls	r0, r3, #31
 8008052:	d5ea      	bpl.n	800802a <_printf_float+0x1a6>
 8008054:	1c4b      	adds	r3, r1, #1
 8008056:	e7e7      	b.n	8008028 <_printf_float+0x1a4>
 8008058:	2900      	cmp	r1, #0
 800805a:	bfd4      	ite	le
 800805c:	f1c1 0202 	rsble	r2, r1, #2
 8008060:	2201      	movgt	r2, #1
 8008062:	4413      	add	r3, r2
 8008064:	e7e0      	b.n	8008028 <_printf_float+0x1a4>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	055a      	lsls	r2, r3, #21
 800806a:	d407      	bmi.n	800807c <_printf_float+0x1f8>
 800806c:	6923      	ldr	r3, [r4, #16]
 800806e:	4642      	mov	r2, r8
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	d12c      	bne.n	80080d4 <_printf_float+0x250>
 800807a:	e764      	b.n	8007f46 <_printf_float+0xc2>
 800807c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008080:	f240 80e0 	bls.w	8008244 <_printf_float+0x3c0>
 8008084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008088:	2200      	movs	r2, #0
 800808a:	2300      	movs	r3, #0
 800808c:	f7f8 fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 8008090:	2800      	cmp	r0, #0
 8008092:	d034      	beq.n	80080fe <_printf_float+0x27a>
 8008094:	4a37      	ldr	r2, [pc, #220]	; (8008174 <_printf_float+0x2f0>)
 8008096:	2301      	movs	r3, #1
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	f43f af51 	beq.w	8007f46 <_printf_float+0xc2>
 80080a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a8:	429a      	cmp	r2, r3
 80080aa:	db02      	blt.n	80080b2 <_printf_float+0x22e>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	07d8      	lsls	r0, r3, #31
 80080b0:	d510      	bpl.n	80080d4 <_printf_float+0x250>
 80080b2:	ee18 3a10 	vmov	r3, s16
 80080b6:	4652      	mov	r2, sl
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	f43f af41 	beq.w	8007f46 <_printf_float+0xc2>
 80080c4:	f04f 0800 	mov.w	r8, #0
 80080c8:	f104 091a 	add.w	r9, r4, #26
 80080cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ce:	3b01      	subs	r3, #1
 80080d0:	4543      	cmp	r3, r8
 80080d2:	dc09      	bgt.n	80080e8 <_printf_float+0x264>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	079b      	lsls	r3, r3, #30
 80080d8:	f100 8105 	bmi.w	80082e6 <_printf_float+0x462>
 80080dc:	68e0      	ldr	r0, [r4, #12]
 80080de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e0:	4298      	cmp	r0, r3
 80080e2:	bfb8      	it	lt
 80080e4:	4618      	movlt	r0, r3
 80080e6:	e730      	b.n	8007f4a <_printf_float+0xc6>
 80080e8:	2301      	movs	r3, #1
 80080ea:	464a      	mov	r2, r9
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	f43f af27 	beq.w	8007f46 <_printf_float+0xc2>
 80080f8:	f108 0801 	add.w	r8, r8, #1
 80080fc:	e7e6      	b.n	80080cc <_printf_float+0x248>
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc39      	bgt.n	8008178 <_printf_float+0x2f4>
 8008104:	4a1b      	ldr	r2, [pc, #108]	; (8008174 <_printf_float+0x2f0>)
 8008106:	2301      	movs	r3, #1
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f af19 	beq.w	8007f46 <_printf_float+0xc2>
 8008114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008118:	4313      	orrs	r3, r2
 800811a:	d102      	bne.n	8008122 <_printf_float+0x29e>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	07d9      	lsls	r1, r3, #31
 8008120:	d5d8      	bpl.n	80080d4 <_printf_float+0x250>
 8008122:	ee18 3a10 	vmov	r3, s16
 8008126:	4652      	mov	r2, sl
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f af09 	beq.w	8007f46 <_printf_float+0xc2>
 8008134:	f04f 0900 	mov.w	r9, #0
 8008138:	f104 0a1a 	add.w	sl, r4, #26
 800813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813e:	425b      	negs	r3, r3
 8008140:	454b      	cmp	r3, r9
 8008142:	dc01      	bgt.n	8008148 <_printf_float+0x2c4>
 8008144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008146:	e792      	b.n	800806e <_printf_float+0x1ea>
 8008148:	2301      	movs	r3, #1
 800814a:	4652      	mov	r2, sl
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	f43f aef7 	beq.w	8007f46 <_printf_float+0xc2>
 8008158:	f109 0901 	add.w	r9, r9, #1
 800815c:	e7ee      	b.n	800813c <_printf_float+0x2b8>
 800815e:	bf00      	nop
 8008160:	7fefffff 	.word	0x7fefffff
 8008164:	0800c4d4 	.word	0x0800c4d4
 8008168:	0800c4d8 	.word	0x0800c4d8
 800816c:	0800c4e0 	.word	0x0800c4e0
 8008170:	0800c4dc 	.word	0x0800c4dc
 8008174:	0800c4e4 	.word	0x0800c4e4
 8008178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800817c:	429a      	cmp	r2, r3
 800817e:	bfa8      	it	ge
 8008180:	461a      	movge	r2, r3
 8008182:	2a00      	cmp	r2, #0
 8008184:	4691      	mov	r9, r2
 8008186:	dc37      	bgt.n	80081f8 <_printf_float+0x374>
 8008188:	f04f 0b00 	mov.w	fp, #0
 800818c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008190:	f104 021a 	add.w	r2, r4, #26
 8008194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008196:	9305      	str	r3, [sp, #20]
 8008198:	eba3 0309 	sub.w	r3, r3, r9
 800819c:	455b      	cmp	r3, fp
 800819e:	dc33      	bgt.n	8008208 <_printf_float+0x384>
 80081a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a4:	429a      	cmp	r2, r3
 80081a6:	db3b      	blt.n	8008220 <_printf_float+0x39c>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	07da      	lsls	r2, r3, #31
 80081ac:	d438      	bmi.n	8008220 <_printf_float+0x39c>
 80081ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b0:	9a05      	ldr	r2, [sp, #20]
 80081b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b4:	1a9a      	subs	r2, r3, r2
 80081b6:	eba3 0901 	sub.w	r9, r3, r1
 80081ba:	4591      	cmp	r9, r2
 80081bc:	bfa8      	it	ge
 80081be:	4691      	movge	r9, r2
 80081c0:	f1b9 0f00 	cmp.w	r9, #0
 80081c4:	dc35      	bgt.n	8008232 <_printf_float+0x3ae>
 80081c6:	f04f 0800 	mov.w	r8, #0
 80081ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ce:	f104 0a1a 	add.w	sl, r4, #26
 80081d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	eba3 0309 	sub.w	r3, r3, r9
 80081dc:	4543      	cmp	r3, r8
 80081de:	f77f af79 	ble.w	80080d4 <_printf_float+0x250>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4652      	mov	r2, sl
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	f43f aeaa 	beq.w	8007f46 <_printf_float+0xc2>
 80081f2:	f108 0801 	add.w	r8, r8, #1
 80081f6:	e7ec      	b.n	80081d2 <_printf_float+0x34e>
 80081f8:	4613      	mov	r3, r2
 80081fa:	4631      	mov	r1, r6
 80081fc:	4642      	mov	r2, r8
 80081fe:	4628      	mov	r0, r5
 8008200:	47b8      	blx	r7
 8008202:	3001      	adds	r0, #1
 8008204:	d1c0      	bne.n	8008188 <_printf_float+0x304>
 8008206:	e69e      	b.n	8007f46 <_printf_float+0xc2>
 8008208:	2301      	movs	r3, #1
 800820a:	4631      	mov	r1, r6
 800820c:	4628      	mov	r0, r5
 800820e:	9205      	str	r2, [sp, #20]
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f43f ae97 	beq.w	8007f46 <_printf_float+0xc2>
 8008218:	9a05      	ldr	r2, [sp, #20]
 800821a:	f10b 0b01 	add.w	fp, fp, #1
 800821e:	e7b9      	b.n	8008194 <_printf_float+0x310>
 8008220:	ee18 3a10 	vmov	r3, s16
 8008224:	4652      	mov	r2, sl
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	47b8      	blx	r7
 800822c:	3001      	adds	r0, #1
 800822e:	d1be      	bne.n	80081ae <_printf_float+0x32a>
 8008230:	e689      	b.n	8007f46 <_printf_float+0xc2>
 8008232:	9a05      	ldr	r2, [sp, #20]
 8008234:	464b      	mov	r3, r9
 8008236:	4442      	add	r2, r8
 8008238:	4631      	mov	r1, r6
 800823a:	4628      	mov	r0, r5
 800823c:	47b8      	blx	r7
 800823e:	3001      	adds	r0, #1
 8008240:	d1c1      	bne.n	80081c6 <_printf_float+0x342>
 8008242:	e680      	b.n	8007f46 <_printf_float+0xc2>
 8008244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008246:	2a01      	cmp	r2, #1
 8008248:	dc01      	bgt.n	800824e <_printf_float+0x3ca>
 800824a:	07db      	lsls	r3, r3, #31
 800824c:	d538      	bpl.n	80082c0 <_printf_float+0x43c>
 800824e:	2301      	movs	r3, #1
 8008250:	4642      	mov	r2, r8
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	f43f ae74 	beq.w	8007f46 <_printf_float+0xc2>
 800825e:	ee18 3a10 	vmov	r3, s16
 8008262:	4652      	mov	r2, sl
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	47b8      	blx	r7
 800826a:	3001      	adds	r0, #1
 800826c:	f43f ae6b 	beq.w	8007f46 <_printf_float+0xc2>
 8008270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008274:	2200      	movs	r2, #0
 8008276:	2300      	movs	r3, #0
 8008278:	f7f8 fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800827c:	b9d8      	cbnz	r0, 80082b6 <_printf_float+0x432>
 800827e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008280:	f108 0201 	add.w	r2, r8, #1
 8008284:	3b01      	subs	r3, #1
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d10e      	bne.n	80082ae <_printf_float+0x42a>
 8008290:	e659      	b.n	8007f46 <_printf_float+0xc2>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4631      	mov	r1, r6
 8008298:	4628      	mov	r0, r5
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae52 	beq.w	8007f46 <_printf_float+0xc2>
 80082a2:	f108 0801 	add.w	r8, r8, #1
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4543      	cmp	r3, r8
 80082ac:	dcf1      	bgt.n	8008292 <_printf_float+0x40e>
 80082ae:	464b      	mov	r3, r9
 80082b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082b4:	e6dc      	b.n	8008070 <_printf_float+0x1ec>
 80082b6:	f04f 0800 	mov.w	r8, #0
 80082ba:	f104 0a1a 	add.w	sl, r4, #26
 80082be:	e7f2      	b.n	80082a6 <_printf_float+0x422>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4642      	mov	r2, r8
 80082c4:	e7df      	b.n	8008286 <_printf_float+0x402>
 80082c6:	2301      	movs	r3, #1
 80082c8:	464a      	mov	r2, r9
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f ae38 	beq.w	8007f46 <_printf_float+0xc2>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	68e3      	ldr	r3, [r4, #12]
 80082dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082de:	1a5b      	subs	r3, r3, r1
 80082e0:	4543      	cmp	r3, r8
 80082e2:	dcf0      	bgt.n	80082c6 <_printf_float+0x442>
 80082e4:	e6fa      	b.n	80080dc <_printf_float+0x258>
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	f104 0919 	add.w	r9, r4, #25
 80082ee:	e7f4      	b.n	80082da <_printf_float+0x456>

080082f0 <_printf_common>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	4616      	mov	r6, r2
 80082f6:	4699      	mov	r9, r3
 80082f8:	688a      	ldr	r2, [r1, #8]
 80082fa:	690b      	ldr	r3, [r1, #16]
 80082fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008300:	4293      	cmp	r3, r2
 8008302:	bfb8      	it	lt
 8008304:	4613      	movlt	r3, r2
 8008306:	6033      	str	r3, [r6, #0]
 8008308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800830c:	4607      	mov	r7, r0
 800830e:	460c      	mov	r4, r1
 8008310:	b10a      	cbz	r2, 8008316 <_printf_common+0x26>
 8008312:	3301      	adds	r3, #1
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	0699      	lsls	r1, r3, #26
 800831a:	bf42      	ittt	mi
 800831c:	6833      	ldrmi	r3, [r6, #0]
 800831e:	3302      	addmi	r3, #2
 8008320:	6033      	strmi	r3, [r6, #0]
 8008322:	6825      	ldr	r5, [r4, #0]
 8008324:	f015 0506 	ands.w	r5, r5, #6
 8008328:	d106      	bne.n	8008338 <_printf_common+0x48>
 800832a:	f104 0a19 	add.w	sl, r4, #25
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	6832      	ldr	r2, [r6, #0]
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	42ab      	cmp	r3, r5
 8008336:	dc26      	bgt.n	8008386 <_printf_common+0x96>
 8008338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800833c:	1e13      	subs	r3, r2, #0
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	bf18      	it	ne
 8008342:	2301      	movne	r3, #1
 8008344:	0692      	lsls	r2, r2, #26
 8008346:	d42b      	bmi.n	80083a0 <_printf_common+0xb0>
 8008348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800834c:	4649      	mov	r1, r9
 800834e:	4638      	mov	r0, r7
 8008350:	47c0      	blx	r8
 8008352:	3001      	adds	r0, #1
 8008354:	d01e      	beq.n	8008394 <_printf_common+0xa4>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	68e5      	ldr	r5, [r4, #12]
 800835a:	6832      	ldr	r2, [r6, #0]
 800835c:	f003 0306 	and.w	r3, r3, #6
 8008360:	2b04      	cmp	r3, #4
 8008362:	bf08      	it	eq
 8008364:	1aad      	subeq	r5, r5, r2
 8008366:	68a3      	ldr	r3, [r4, #8]
 8008368:	6922      	ldr	r2, [r4, #16]
 800836a:	bf0c      	ite	eq
 800836c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008370:	2500      	movne	r5, #0
 8008372:	4293      	cmp	r3, r2
 8008374:	bfc4      	itt	gt
 8008376:	1a9b      	subgt	r3, r3, r2
 8008378:	18ed      	addgt	r5, r5, r3
 800837a:	2600      	movs	r6, #0
 800837c:	341a      	adds	r4, #26
 800837e:	42b5      	cmp	r5, r6
 8008380:	d11a      	bne.n	80083b8 <_printf_common+0xc8>
 8008382:	2000      	movs	r0, #0
 8008384:	e008      	b.n	8008398 <_printf_common+0xa8>
 8008386:	2301      	movs	r3, #1
 8008388:	4652      	mov	r2, sl
 800838a:	4649      	mov	r1, r9
 800838c:	4638      	mov	r0, r7
 800838e:	47c0      	blx	r8
 8008390:	3001      	adds	r0, #1
 8008392:	d103      	bne.n	800839c <_printf_common+0xac>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	3501      	adds	r5, #1
 800839e:	e7c6      	b.n	800832e <_printf_common+0x3e>
 80083a0:	18e1      	adds	r1, r4, r3
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	2030      	movs	r0, #48	; 0x30
 80083a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083aa:	4422      	add	r2, r4
 80083ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083b4:	3302      	adds	r3, #2
 80083b6:	e7c7      	b.n	8008348 <_printf_common+0x58>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4622      	mov	r2, r4
 80083bc:	4649      	mov	r1, r9
 80083be:	4638      	mov	r0, r7
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d0e6      	beq.n	8008394 <_printf_common+0xa4>
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7d9      	b.n	800837e <_printf_common+0x8e>
	...

080083cc <_printf_i>:
 80083cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	7e0f      	ldrb	r7, [r1, #24]
 80083d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083d4:	2f78      	cmp	r7, #120	; 0x78
 80083d6:	4691      	mov	r9, r2
 80083d8:	4680      	mov	r8, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	469a      	mov	sl, r3
 80083de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083e2:	d807      	bhi.n	80083f4 <_printf_i+0x28>
 80083e4:	2f62      	cmp	r7, #98	; 0x62
 80083e6:	d80a      	bhi.n	80083fe <_printf_i+0x32>
 80083e8:	2f00      	cmp	r7, #0
 80083ea:	f000 80d8 	beq.w	800859e <_printf_i+0x1d2>
 80083ee:	2f58      	cmp	r7, #88	; 0x58
 80083f0:	f000 80a3 	beq.w	800853a <_printf_i+0x16e>
 80083f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083fc:	e03a      	b.n	8008474 <_printf_i+0xa8>
 80083fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008402:	2b15      	cmp	r3, #21
 8008404:	d8f6      	bhi.n	80083f4 <_printf_i+0x28>
 8008406:	a101      	add	r1, pc, #4	; (adr r1, 800840c <_printf_i+0x40>)
 8008408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800840c:	08008465 	.word	0x08008465
 8008410:	08008479 	.word	0x08008479
 8008414:	080083f5 	.word	0x080083f5
 8008418:	080083f5 	.word	0x080083f5
 800841c:	080083f5 	.word	0x080083f5
 8008420:	080083f5 	.word	0x080083f5
 8008424:	08008479 	.word	0x08008479
 8008428:	080083f5 	.word	0x080083f5
 800842c:	080083f5 	.word	0x080083f5
 8008430:	080083f5 	.word	0x080083f5
 8008434:	080083f5 	.word	0x080083f5
 8008438:	08008585 	.word	0x08008585
 800843c:	080084a9 	.word	0x080084a9
 8008440:	08008567 	.word	0x08008567
 8008444:	080083f5 	.word	0x080083f5
 8008448:	080083f5 	.word	0x080083f5
 800844c:	080085a7 	.word	0x080085a7
 8008450:	080083f5 	.word	0x080083f5
 8008454:	080084a9 	.word	0x080084a9
 8008458:	080083f5 	.word	0x080083f5
 800845c:	080083f5 	.word	0x080083f5
 8008460:	0800856f 	.word	0x0800856f
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	1d1a      	adds	r2, r3, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	602a      	str	r2, [r5, #0]
 800846c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008474:	2301      	movs	r3, #1
 8008476:	e0a3      	b.n	80085c0 <_printf_i+0x1f4>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	6829      	ldr	r1, [r5, #0]
 800847c:	0606      	lsls	r6, r0, #24
 800847e:	f101 0304 	add.w	r3, r1, #4
 8008482:	d50a      	bpl.n	800849a <_printf_i+0xce>
 8008484:	680e      	ldr	r6, [r1, #0]
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	2e00      	cmp	r6, #0
 800848a:	da03      	bge.n	8008494 <_printf_i+0xc8>
 800848c:	232d      	movs	r3, #45	; 0x2d
 800848e:	4276      	negs	r6, r6
 8008490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008494:	485e      	ldr	r0, [pc, #376]	; (8008610 <_printf_i+0x244>)
 8008496:	230a      	movs	r3, #10
 8008498:	e019      	b.n	80084ce <_printf_i+0x102>
 800849a:	680e      	ldr	r6, [r1, #0]
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084a2:	bf18      	it	ne
 80084a4:	b236      	sxthne	r6, r6
 80084a6:	e7ef      	b.n	8008488 <_printf_i+0xbc>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	1d19      	adds	r1, r3, #4
 80084ae:	6029      	str	r1, [r5, #0]
 80084b0:	0601      	lsls	r1, r0, #24
 80084b2:	d501      	bpl.n	80084b8 <_printf_i+0xec>
 80084b4:	681e      	ldr	r6, [r3, #0]
 80084b6:	e002      	b.n	80084be <_printf_i+0xf2>
 80084b8:	0646      	lsls	r6, r0, #25
 80084ba:	d5fb      	bpl.n	80084b4 <_printf_i+0xe8>
 80084bc:	881e      	ldrh	r6, [r3, #0]
 80084be:	4854      	ldr	r0, [pc, #336]	; (8008610 <_printf_i+0x244>)
 80084c0:	2f6f      	cmp	r7, #111	; 0x6f
 80084c2:	bf0c      	ite	eq
 80084c4:	2308      	moveq	r3, #8
 80084c6:	230a      	movne	r3, #10
 80084c8:	2100      	movs	r1, #0
 80084ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ce:	6865      	ldr	r5, [r4, #4]
 80084d0:	60a5      	str	r5, [r4, #8]
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	bfa2      	ittt	ge
 80084d6:	6821      	ldrge	r1, [r4, #0]
 80084d8:	f021 0104 	bicge.w	r1, r1, #4
 80084dc:	6021      	strge	r1, [r4, #0]
 80084de:	b90e      	cbnz	r6, 80084e4 <_printf_i+0x118>
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	d04d      	beq.n	8008580 <_printf_i+0x1b4>
 80084e4:	4615      	mov	r5, r2
 80084e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ea:	fb03 6711 	mls	r7, r3, r1, r6
 80084ee:	5dc7      	ldrb	r7, [r0, r7]
 80084f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084f4:	4637      	mov	r7, r6
 80084f6:	42bb      	cmp	r3, r7
 80084f8:	460e      	mov	r6, r1
 80084fa:	d9f4      	bls.n	80084e6 <_printf_i+0x11a>
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d10b      	bne.n	8008518 <_printf_i+0x14c>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	07de      	lsls	r6, r3, #31
 8008504:	d508      	bpl.n	8008518 <_printf_i+0x14c>
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	6861      	ldr	r1, [r4, #4]
 800850a:	4299      	cmp	r1, r3
 800850c:	bfde      	ittt	le
 800850e:	2330      	movle	r3, #48	; 0x30
 8008510:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008514:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008518:	1b52      	subs	r2, r2, r5
 800851a:	6122      	str	r2, [r4, #16]
 800851c:	f8cd a000 	str.w	sl, [sp]
 8008520:	464b      	mov	r3, r9
 8008522:	aa03      	add	r2, sp, #12
 8008524:	4621      	mov	r1, r4
 8008526:	4640      	mov	r0, r8
 8008528:	f7ff fee2 	bl	80082f0 <_printf_common>
 800852c:	3001      	adds	r0, #1
 800852e:	d14c      	bne.n	80085ca <_printf_i+0x1fe>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	b004      	add	sp, #16
 8008536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853a:	4835      	ldr	r0, [pc, #212]	; (8008610 <_printf_i+0x244>)
 800853c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008540:	6829      	ldr	r1, [r5, #0]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	f851 6b04 	ldr.w	r6, [r1], #4
 8008548:	6029      	str	r1, [r5, #0]
 800854a:	061d      	lsls	r5, r3, #24
 800854c:	d514      	bpl.n	8008578 <_printf_i+0x1ac>
 800854e:	07df      	lsls	r7, r3, #31
 8008550:	bf44      	itt	mi
 8008552:	f043 0320 	orrmi.w	r3, r3, #32
 8008556:	6023      	strmi	r3, [r4, #0]
 8008558:	b91e      	cbnz	r6, 8008562 <_printf_i+0x196>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	f023 0320 	bic.w	r3, r3, #32
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	2310      	movs	r3, #16
 8008564:	e7b0      	b.n	80084c8 <_printf_i+0xfc>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	f043 0320 	orr.w	r3, r3, #32
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	2378      	movs	r3, #120	; 0x78
 8008570:	4828      	ldr	r0, [pc, #160]	; (8008614 <_printf_i+0x248>)
 8008572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008576:	e7e3      	b.n	8008540 <_printf_i+0x174>
 8008578:	0659      	lsls	r1, r3, #25
 800857a:	bf48      	it	mi
 800857c:	b2b6      	uxthmi	r6, r6
 800857e:	e7e6      	b.n	800854e <_printf_i+0x182>
 8008580:	4615      	mov	r5, r2
 8008582:	e7bb      	b.n	80084fc <_printf_i+0x130>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	6826      	ldr	r6, [r4, #0]
 8008588:	6961      	ldr	r1, [r4, #20]
 800858a:	1d18      	adds	r0, r3, #4
 800858c:	6028      	str	r0, [r5, #0]
 800858e:	0635      	lsls	r5, r6, #24
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	d501      	bpl.n	8008598 <_printf_i+0x1cc>
 8008594:	6019      	str	r1, [r3, #0]
 8008596:	e002      	b.n	800859e <_printf_i+0x1d2>
 8008598:	0670      	lsls	r0, r6, #25
 800859a:	d5fb      	bpl.n	8008594 <_printf_i+0x1c8>
 800859c:	8019      	strh	r1, [r3, #0]
 800859e:	2300      	movs	r3, #0
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	4615      	mov	r5, r2
 80085a4:	e7ba      	b.n	800851c <_printf_i+0x150>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	1d1a      	adds	r2, r3, #4
 80085aa:	602a      	str	r2, [r5, #0]
 80085ac:	681d      	ldr	r5, [r3, #0]
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	2100      	movs	r1, #0
 80085b2:	4628      	mov	r0, r5
 80085b4:	f7f7 fe1c 	bl	80001f0 <memchr>
 80085b8:	b108      	cbz	r0, 80085be <_printf_i+0x1f2>
 80085ba:	1b40      	subs	r0, r0, r5
 80085bc:	6060      	str	r0, [r4, #4]
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	6123      	str	r3, [r4, #16]
 80085c2:	2300      	movs	r3, #0
 80085c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c8:	e7a8      	b.n	800851c <_printf_i+0x150>
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	462a      	mov	r2, r5
 80085ce:	4649      	mov	r1, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	47d0      	blx	sl
 80085d4:	3001      	adds	r0, #1
 80085d6:	d0ab      	beq.n	8008530 <_printf_i+0x164>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	079b      	lsls	r3, r3, #30
 80085dc:	d413      	bmi.n	8008606 <_printf_i+0x23a>
 80085de:	68e0      	ldr	r0, [r4, #12]
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	4298      	cmp	r0, r3
 80085e4:	bfb8      	it	lt
 80085e6:	4618      	movlt	r0, r3
 80085e8:	e7a4      	b.n	8008534 <_printf_i+0x168>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4632      	mov	r2, r6
 80085ee:	4649      	mov	r1, r9
 80085f0:	4640      	mov	r0, r8
 80085f2:	47d0      	blx	sl
 80085f4:	3001      	adds	r0, #1
 80085f6:	d09b      	beq.n	8008530 <_printf_i+0x164>
 80085f8:	3501      	adds	r5, #1
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	9903      	ldr	r1, [sp, #12]
 80085fe:	1a5b      	subs	r3, r3, r1
 8008600:	42ab      	cmp	r3, r5
 8008602:	dcf2      	bgt.n	80085ea <_printf_i+0x21e>
 8008604:	e7eb      	b.n	80085de <_printf_i+0x212>
 8008606:	2500      	movs	r5, #0
 8008608:	f104 0619 	add.w	r6, r4, #25
 800860c:	e7f5      	b.n	80085fa <_printf_i+0x22e>
 800860e:	bf00      	nop
 8008610:	0800c4e6 	.word	0x0800c4e6
 8008614:	0800c4f7 	.word	0x0800c4f7

08008618 <_scanf_float>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	b087      	sub	sp, #28
 800861e:	4617      	mov	r7, r2
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	688b      	ldr	r3, [r1, #8]
 8008624:	1e5a      	subs	r2, r3, #1
 8008626:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800862a:	bf83      	ittte	hi
 800862c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008630:	195b      	addhi	r3, r3, r5
 8008632:	9302      	strhi	r3, [sp, #8]
 8008634:	2300      	movls	r3, #0
 8008636:	bf86      	itte	hi
 8008638:	f240 135d 	movwhi	r3, #349	; 0x15d
 800863c:	608b      	strhi	r3, [r1, #8]
 800863e:	9302      	strls	r3, [sp, #8]
 8008640:	680b      	ldr	r3, [r1, #0]
 8008642:	468b      	mov	fp, r1
 8008644:	2500      	movs	r5, #0
 8008646:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800864a:	f84b 3b1c 	str.w	r3, [fp], #28
 800864e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008652:	4680      	mov	r8, r0
 8008654:	460c      	mov	r4, r1
 8008656:	465e      	mov	r6, fp
 8008658:	46aa      	mov	sl, r5
 800865a:	46a9      	mov	r9, r5
 800865c:	9501      	str	r5, [sp, #4]
 800865e:	68a2      	ldr	r2, [r4, #8]
 8008660:	b152      	cbz	r2, 8008678 <_scanf_float+0x60>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b4e      	cmp	r3, #78	; 0x4e
 8008668:	d864      	bhi.n	8008734 <_scanf_float+0x11c>
 800866a:	2b40      	cmp	r3, #64	; 0x40
 800866c:	d83c      	bhi.n	80086e8 <_scanf_float+0xd0>
 800866e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008672:	b2c8      	uxtb	r0, r1
 8008674:	280e      	cmp	r0, #14
 8008676:	d93a      	bls.n	80086ee <_scanf_float+0xd6>
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	d003      	beq.n	8008686 <_scanf_float+0x6e>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800868a:	f1ba 0f01 	cmp.w	sl, #1
 800868e:	f200 8113 	bhi.w	80088b8 <_scanf_float+0x2a0>
 8008692:	455e      	cmp	r6, fp
 8008694:	f200 8105 	bhi.w	80088a2 <_scanf_float+0x28a>
 8008698:	2501      	movs	r5, #1
 800869a:	4628      	mov	r0, r5
 800869c:	b007      	add	sp, #28
 800869e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80086a6:	2a0d      	cmp	r2, #13
 80086a8:	d8e6      	bhi.n	8008678 <_scanf_float+0x60>
 80086aa:	a101      	add	r1, pc, #4	; (adr r1, 80086b0 <_scanf_float+0x98>)
 80086ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086b0:	080087ef 	.word	0x080087ef
 80086b4:	08008679 	.word	0x08008679
 80086b8:	08008679 	.word	0x08008679
 80086bc:	08008679 	.word	0x08008679
 80086c0:	0800884f 	.word	0x0800884f
 80086c4:	08008827 	.word	0x08008827
 80086c8:	08008679 	.word	0x08008679
 80086cc:	08008679 	.word	0x08008679
 80086d0:	080087fd 	.word	0x080087fd
 80086d4:	08008679 	.word	0x08008679
 80086d8:	08008679 	.word	0x08008679
 80086dc:	08008679 	.word	0x08008679
 80086e0:	08008679 	.word	0x08008679
 80086e4:	080087b5 	.word	0x080087b5
 80086e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80086ec:	e7db      	b.n	80086a6 <_scanf_float+0x8e>
 80086ee:	290e      	cmp	r1, #14
 80086f0:	d8c2      	bhi.n	8008678 <_scanf_float+0x60>
 80086f2:	a001      	add	r0, pc, #4	; (adr r0, 80086f8 <_scanf_float+0xe0>)
 80086f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086f8:	080087a7 	.word	0x080087a7
 80086fc:	08008679 	.word	0x08008679
 8008700:	080087a7 	.word	0x080087a7
 8008704:	0800883b 	.word	0x0800883b
 8008708:	08008679 	.word	0x08008679
 800870c:	08008755 	.word	0x08008755
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008791 	.word	0x08008791
 8008720:	08008791 	.word	0x08008791
 8008724:	08008791 	.word	0x08008791
 8008728:	08008791 	.word	0x08008791
 800872c:	08008791 	.word	0x08008791
 8008730:	08008791 	.word	0x08008791
 8008734:	2b6e      	cmp	r3, #110	; 0x6e
 8008736:	d809      	bhi.n	800874c <_scanf_float+0x134>
 8008738:	2b60      	cmp	r3, #96	; 0x60
 800873a:	d8b2      	bhi.n	80086a2 <_scanf_float+0x8a>
 800873c:	2b54      	cmp	r3, #84	; 0x54
 800873e:	d077      	beq.n	8008830 <_scanf_float+0x218>
 8008740:	2b59      	cmp	r3, #89	; 0x59
 8008742:	d199      	bne.n	8008678 <_scanf_float+0x60>
 8008744:	2d07      	cmp	r5, #7
 8008746:	d197      	bne.n	8008678 <_scanf_float+0x60>
 8008748:	2508      	movs	r5, #8
 800874a:	e029      	b.n	80087a0 <_scanf_float+0x188>
 800874c:	2b74      	cmp	r3, #116	; 0x74
 800874e:	d06f      	beq.n	8008830 <_scanf_float+0x218>
 8008750:	2b79      	cmp	r3, #121	; 0x79
 8008752:	e7f6      	b.n	8008742 <_scanf_float+0x12a>
 8008754:	6821      	ldr	r1, [r4, #0]
 8008756:	05c8      	lsls	r0, r1, #23
 8008758:	d51a      	bpl.n	8008790 <_scanf_float+0x178>
 800875a:	9b02      	ldr	r3, [sp, #8]
 800875c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008760:	6021      	str	r1, [r4, #0]
 8008762:	f109 0901 	add.w	r9, r9, #1
 8008766:	b11b      	cbz	r3, 8008770 <_scanf_float+0x158>
 8008768:	3b01      	subs	r3, #1
 800876a:	3201      	adds	r2, #1
 800876c:	9302      	str	r3, [sp, #8]
 800876e:	60a2      	str	r2, [r4, #8]
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	3b01      	subs	r3, #1
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3b01      	subs	r3, #1
 8008780:	2b00      	cmp	r3, #0
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	f340 8084 	ble.w	8008890 <_scanf_float+0x278>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	603b      	str	r3, [r7, #0]
 800878e:	e766      	b.n	800865e <_scanf_float+0x46>
 8008790:	eb1a 0f05 	cmn.w	sl, r5
 8008794:	f47f af70 	bne.w	8008678 <_scanf_float+0x60>
 8008798:	6822      	ldr	r2, [r4, #0]
 800879a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800879e:	6022      	str	r2, [r4, #0]
 80087a0:	f806 3b01 	strb.w	r3, [r6], #1
 80087a4:	e7e4      	b.n	8008770 <_scanf_float+0x158>
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	0610      	lsls	r0, r2, #24
 80087aa:	f57f af65 	bpl.w	8008678 <_scanf_float+0x60>
 80087ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087b2:	e7f4      	b.n	800879e <_scanf_float+0x186>
 80087b4:	f1ba 0f00 	cmp.w	sl, #0
 80087b8:	d10e      	bne.n	80087d8 <_scanf_float+0x1c0>
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	d10e      	bne.n	80087de <_scanf_float+0x1c6>
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087ca:	d108      	bne.n	80087de <_scanf_float+0x1c6>
 80087cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	f04f 0a01 	mov.w	sl, #1
 80087d6:	e7e3      	b.n	80087a0 <_scanf_float+0x188>
 80087d8:	f1ba 0f02 	cmp.w	sl, #2
 80087dc:	d055      	beq.n	800888a <_scanf_float+0x272>
 80087de:	2d01      	cmp	r5, #1
 80087e0:	d002      	beq.n	80087e8 <_scanf_float+0x1d0>
 80087e2:	2d04      	cmp	r5, #4
 80087e4:	f47f af48 	bne.w	8008678 <_scanf_float+0x60>
 80087e8:	3501      	adds	r5, #1
 80087ea:	b2ed      	uxtb	r5, r5
 80087ec:	e7d8      	b.n	80087a0 <_scanf_float+0x188>
 80087ee:	f1ba 0f01 	cmp.w	sl, #1
 80087f2:	f47f af41 	bne.w	8008678 <_scanf_float+0x60>
 80087f6:	f04f 0a02 	mov.w	sl, #2
 80087fa:	e7d1      	b.n	80087a0 <_scanf_float+0x188>
 80087fc:	b97d      	cbnz	r5, 800881e <_scanf_float+0x206>
 80087fe:	f1b9 0f00 	cmp.w	r9, #0
 8008802:	f47f af3c 	bne.w	800867e <_scanf_float+0x66>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800880c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008810:	f47f af39 	bne.w	8008686 <_scanf_float+0x6e>
 8008814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	2501      	movs	r5, #1
 800881c:	e7c0      	b.n	80087a0 <_scanf_float+0x188>
 800881e:	2d03      	cmp	r5, #3
 8008820:	d0e2      	beq.n	80087e8 <_scanf_float+0x1d0>
 8008822:	2d05      	cmp	r5, #5
 8008824:	e7de      	b.n	80087e4 <_scanf_float+0x1cc>
 8008826:	2d02      	cmp	r5, #2
 8008828:	f47f af26 	bne.w	8008678 <_scanf_float+0x60>
 800882c:	2503      	movs	r5, #3
 800882e:	e7b7      	b.n	80087a0 <_scanf_float+0x188>
 8008830:	2d06      	cmp	r5, #6
 8008832:	f47f af21 	bne.w	8008678 <_scanf_float+0x60>
 8008836:	2507      	movs	r5, #7
 8008838:	e7b2      	b.n	80087a0 <_scanf_float+0x188>
 800883a:	6822      	ldr	r2, [r4, #0]
 800883c:	0591      	lsls	r1, r2, #22
 800883e:	f57f af1b 	bpl.w	8008678 <_scanf_float+0x60>
 8008842:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008846:	6022      	str	r2, [r4, #0]
 8008848:	f8cd 9004 	str.w	r9, [sp, #4]
 800884c:	e7a8      	b.n	80087a0 <_scanf_float+0x188>
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008854:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008858:	d006      	beq.n	8008868 <_scanf_float+0x250>
 800885a:	0550      	lsls	r0, r2, #21
 800885c:	f57f af0c 	bpl.w	8008678 <_scanf_float+0x60>
 8008860:	f1b9 0f00 	cmp.w	r9, #0
 8008864:	f43f af0f 	beq.w	8008686 <_scanf_float+0x6e>
 8008868:	0591      	lsls	r1, r2, #22
 800886a:	bf58      	it	pl
 800886c:	9901      	ldrpl	r1, [sp, #4]
 800886e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008872:	bf58      	it	pl
 8008874:	eba9 0101 	subpl.w	r1, r9, r1
 8008878:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800887c:	bf58      	it	pl
 800887e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008882:	6022      	str	r2, [r4, #0]
 8008884:	f04f 0900 	mov.w	r9, #0
 8008888:	e78a      	b.n	80087a0 <_scanf_float+0x188>
 800888a:	f04f 0a03 	mov.w	sl, #3
 800888e:	e787      	b.n	80087a0 <_scanf_float+0x188>
 8008890:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008894:	4639      	mov	r1, r7
 8008896:	4640      	mov	r0, r8
 8008898:	4798      	blx	r3
 800889a:	2800      	cmp	r0, #0
 800889c:	f43f aedf 	beq.w	800865e <_scanf_float+0x46>
 80088a0:	e6ea      	b.n	8008678 <_scanf_float+0x60>
 80088a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088aa:	463a      	mov	r2, r7
 80088ac:	4640      	mov	r0, r8
 80088ae:	4798      	blx	r3
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	e6ec      	b.n	8008692 <_scanf_float+0x7a>
 80088b8:	1e6b      	subs	r3, r5, #1
 80088ba:	2b06      	cmp	r3, #6
 80088bc:	d825      	bhi.n	800890a <_scanf_float+0x2f2>
 80088be:	2d02      	cmp	r5, #2
 80088c0:	d836      	bhi.n	8008930 <_scanf_float+0x318>
 80088c2:	455e      	cmp	r6, fp
 80088c4:	f67f aee8 	bls.w	8008698 <_scanf_float+0x80>
 80088c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088d0:	463a      	mov	r2, r7
 80088d2:	4640      	mov	r0, r8
 80088d4:	4798      	blx	r3
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	3b01      	subs	r3, #1
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	e7f1      	b.n	80088c2 <_scanf_float+0x2aa>
 80088de:	9802      	ldr	r0, [sp, #8]
 80088e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80088e8:	9002      	str	r0, [sp, #8]
 80088ea:	463a      	mov	r2, r7
 80088ec:	4640      	mov	r0, r8
 80088ee:	4798      	blx	r3
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088fa:	fa5f fa8a 	uxtb.w	sl, sl
 80088fe:	f1ba 0f02 	cmp.w	sl, #2
 8008902:	d1ec      	bne.n	80088de <_scanf_float+0x2c6>
 8008904:	3d03      	subs	r5, #3
 8008906:	b2ed      	uxtb	r5, r5
 8008908:	1b76      	subs	r6, r6, r5
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	05da      	lsls	r2, r3, #23
 800890e:	d52f      	bpl.n	8008970 <_scanf_float+0x358>
 8008910:	055b      	lsls	r3, r3, #21
 8008912:	d510      	bpl.n	8008936 <_scanf_float+0x31e>
 8008914:	455e      	cmp	r6, fp
 8008916:	f67f aebf 	bls.w	8008698 <_scanf_float+0x80>
 800891a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800891e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008922:	463a      	mov	r2, r7
 8008924:	4640      	mov	r0, r8
 8008926:	4798      	blx	r3
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	3b01      	subs	r3, #1
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	e7f1      	b.n	8008914 <_scanf_float+0x2fc>
 8008930:	46aa      	mov	sl, r5
 8008932:	9602      	str	r6, [sp, #8]
 8008934:	e7df      	b.n	80088f6 <_scanf_float+0x2de>
 8008936:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	2965      	cmp	r1, #101	; 0x65
 800893e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008942:	f106 35ff 	add.w	r5, r6, #4294967295
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	d00c      	beq.n	8008964 <_scanf_float+0x34c>
 800894a:	2945      	cmp	r1, #69	; 0x45
 800894c:	d00a      	beq.n	8008964 <_scanf_float+0x34c>
 800894e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008952:	463a      	mov	r2, r7
 8008954:	4640      	mov	r0, r8
 8008956:	4798      	blx	r3
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800895e:	3b01      	subs	r3, #1
 8008960:	1eb5      	subs	r5, r6, #2
 8008962:	6123      	str	r3, [r4, #16]
 8008964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008968:	463a      	mov	r2, r7
 800896a:	4640      	mov	r0, r8
 800896c:	4798      	blx	r3
 800896e:	462e      	mov	r6, r5
 8008970:	6825      	ldr	r5, [r4, #0]
 8008972:	f015 0510 	ands.w	r5, r5, #16
 8008976:	d159      	bne.n	8008a2c <_scanf_float+0x414>
 8008978:	7035      	strb	r5, [r6, #0]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008984:	d11b      	bne.n	80089be <_scanf_float+0x3a6>
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	454b      	cmp	r3, r9
 800898a:	eba3 0209 	sub.w	r2, r3, r9
 800898e:	d123      	bne.n	80089d8 <_scanf_float+0x3c0>
 8008990:	2200      	movs	r2, #0
 8008992:	4659      	mov	r1, fp
 8008994:	4640      	mov	r0, r8
 8008996:	f000 fea9 	bl	80096ec <_strtod_r>
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	f012 0f02 	tst.w	r2, #2
 80089a2:	ec57 6b10 	vmov	r6, r7, d0
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	d021      	beq.n	80089ee <_scanf_float+0x3d6>
 80089aa:	9903      	ldr	r1, [sp, #12]
 80089ac:	1d1a      	adds	r2, r3, #4
 80089ae:	600a      	str	r2, [r1, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	e9c3 6700 	strd	r6, r7, [r3]
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	60e3      	str	r3, [r4, #12]
 80089bc:	e66d      	b.n	800869a <_scanf_float+0x82>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0e5      	beq.n	8008990 <_scanf_float+0x378>
 80089c4:	9905      	ldr	r1, [sp, #20]
 80089c6:	230a      	movs	r3, #10
 80089c8:	462a      	mov	r2, r5
 80089ca:	3101      	adds	r1, #1
 80089cc:	4640      	mov	r0, r8
 80089ce:	f000 ff15 	bl	80097fc <_strtol_r>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	9e05      	ldr	r6, [sp, #20]
 80089d6:	1ac2      	subs	r2, r0, r3
 80089d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80089dc:	429e      	cmp	r6, r3
 80089de:	bf28      	it	cs
 80089e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80089e4:	4912      	ldr	r1, [pc, #72]	; (8008a30 <_scanf_float+0x418>)
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f83c 	bl	8008a64 <siprintf>
 80089ec:	e7d0      	b.n	8008990 <_scanf_float+0x378>
 80089ee:	9903      	ldr	r1, [sp, #12]
 80089f0:	f012 0f04 	tst.w	r2, #4
 80089f4:	f103 0204 	add.w	r2, r3, #4
 80089f8:	600a      	str	r2, [r1, #0]
 80089fa:	d1d9      	bne.n	80089b0 <_scanf_float+0x398>
 80089fc:	f8d3 8000 	ldr.w	r8, [r3]
 8008a00:	ee10 2a10 	vmov	r2, s0
 8008a04:	ee10 0a10 	vmov	r0, s0
 8008a08:	463b      	mov	r3, r7
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f8 f896 	bl	8000b3c <__aeabi_dcmpun>
 8008a10:	b128      	cbz	r0, 8008a1e <_scanf_float+0x406>
 8008a12:	4808      	ldr	r0, [pc, #32]	; (8008a34 <_scanf_float+0x41c>)
 8008a14:	f000 f820 	bl	8008a58 <nanf>
 8008a18:	ed88 0a00 	vstr	s0, [r8]
 8008a1c:	e7cb      	b.n	80089b6 <_scanf_float+0x39e>
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f8 f8e9 	bl	8000bf8 <__aeabi_d2f>
 8008a26:	f8c8 0000 	str.w	r0, [r8]
 8008a2a:	e7c4      	b.n	80089b6 <_scanf_float+0x39e>
 8008a2c:	2500      	movs	r5, #0
 8008a2e:	e634      	b.n	800869a <_scanf_float+0x82>
 8008a30:	0800c508 	.word	0x0800c508
 8008a34:	0800c910 	.word	0x0800c910

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d06      	ldr	r5, [pc, #24]	; (8008a54 <_sbrk_r+0x1c>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f8 fcc4 	bl	80013d0 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20001708 	.word	0x20001708

08008a58 <nanf>:
 8008a58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a60 <nanf+0x8>
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	7fc00000 	.word	0x7fc00000

08008a64 <siprintf>:
 8008a64:	b40e      	push	{r1, r2, r3}
 8008a66:	b500      	push	{lr}
 8008a68:	b09c      	sub	sp, #112	; 0x70
 8008a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a6c:	9002      	str	r0, [sp, #8]
 8008a6e:	9006      	str	r0, [sp, #24]
 8008a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a74:	4809      	ldr	r0, [pc, #36]	; (8008a9c <siprintf+0x38>)
 8008a76:	9107      	str	r1, [sp, #28]
 8008a78:	9104      	str	r1, [sp, #16]
 8008a7a:	4909      	ldr	r1, [pc, #36]	; (8008aa0 <siprintf+0x3c>)
 8008a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a80:	9105      	str	r1, [sp, #20]
 8008a82:	6800      	ldr	r0, [r0, #0]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	a902      	add	r1, sp, #8
 8008a88:	f002 fe06 	bl	800b698 <_svfiprintf_r>
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	b01c      	add	sp, #112	; 0x70
 8008a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a98:	b003      	add	sp, #12
 8008a9a:	4770      	bx	lr
 8008a9c:	200000fc 	.word	0x200000fc
 8008aa0:	ffff0208 	.word	0xffff0208

08008aa4 <sulp>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	ec45 4b10 	vmov	d0, r4, r5
 8008aae:	4616      	mov	r6, r2
 8008ab0:	f002 fc32 	bl	800b318 <__ulp>
 8008ab4:	ec51 0b10 	vmov	r0, r1, d0
 8008ab8:	b17e      	cbz	r6, 8008ada <sulp+0x36>
 8008aba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008abe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dd09      	ble.n	8008ada <sulp+0x36>
 8008ac6:	051b      	lsls	r3, r3, #20
 8008ac8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008acc:	2400      	movs	r4, #0
 8008ace:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	f7f7 fd97 	bl	8000608 <__aeabi_dmul>
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	0000      	movs	r0, r0
	...

08008ae0 <_strtod_l>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	ed2d 8b02 	vpush	{d8}
 8008ae8:	b09d      	sub	sp, #116	; 0x74
 8008aea:	461f      	mov	r7, r3
 8008aec:	2300      	movs	r3, #0
 8008aee:	9318      	str	r3, [sp, #96]	; 0x60
 8008af0:	4ba2      	ldr	r3, [pc, #648]	; (8008d7c <_strtod_l+0x29c>)
 8008af2:	9213      	str	r2, [sp, #76]	; 0x4c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	9305      	str	r3, [sp, #20]
 8008af8:	4604      	mov	r4, r0
 8008afa:	4618      	mov	r0, r3
 8008afc:	4688      	mov	r8, r1
 8008afe:	f7f7 fb6f 	bl	80001e0 <strlen>
 8008b02:	f04f 0a00 	mov.w	sl, #0
 8008b06:	4605      	mov	r5, r0
 8008b08:	f04f 0b00 	mov.w	fp, #0
 8008b0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	2a2b      	cmp	r2, #43	; 0x2b
 8008b16:	d04e      	beq.n	8008bb6 <_strtod_l+0xd6>
 8008b18:	d83b      	bhi.n	8008b92 <_strtod_l+0xb2>
 8008b1a:	2a0d      	cmp	r2, #13
 8008b1c:	d834      	bhi.n	8008b88 <_strtod_l+0xa8>
 8008b1e:	2a08      	cmp	r2, #8
 8008b20:	d834      	bhi.n	8008b8c <_strtod_l+0xac>
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	d03e      	beq.n	8008ba4 <_strtod_l+0xc4>
 8008b26:	2300      	movs	r3, #0
 8008b28:	930a      	str	r3, [sp, #40]	; 0x28
 8008b2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b2c:	7833      	ldrb	r3, [r6, #0]
 8008b2e:	2b30      	cmp	r3, #48	; 0x30
 8008b30:	f040 80b0 	bne.w	8008c94 <_strtod_l+0x1b4>
 8008b34:	7873      	ldrb	r3, [r6, #1]
 8008b36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b3a:	2b58      	cmp	r3, #88	; 0x58
 8008b3c:	d168      	bne.n	8008c10 <_strtod_l+0x130>
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	ab18      	add	r3, sp, #96	; 0x60
 8008b44:	9702      	str	r7, [sp, #8]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4a8d      	ldr	r2, [pc, #564]	; (8008d80 <_strtod_l+0x2a0>)
 8008b4a:	ab19      	add	r3, sp, #100	; 0x64
 8008b4c:	a917      	add	r1, sp, #92	; 0x5c
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f001 fd38 	bl	800a5c4 <__gethex>
 8008b54:	f010 0707 	ands.w	r7, r0, #7
 8008b58:	4605      	mov	r5, r0
 8008b5a:	d005      	beq.n	8008b68 <_strtod_l+0x88>
 8008b5c:	2f06      	cmp	r7, #6
 8008b5e:	d12c      	bne.n	8008bba <_strtod_l+0xda>
 8008b60:	3601      	adds	r6, #1
 8008b62:	2300      	movs	r3, #0
 8008b64:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b66:	930a      	str	r3, [sp, #40]	; 0x28
 8008b68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 8590 	bne.w	8009690 <_strtod_l+0xbb0>
 8008b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b72:	b1eb      	cbz	r3, 8008bb0 <_strtod_l+0xd0>
 8008b74:	4652      	mov	r2, sl
 8008b76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b7a:	ec43 2b10 	vmov	d0, r2, r3
 8008b7e:	b01d      	add	sp, #116	; 0x74
 8008b80:	ecbd 8b02 	vpop	{d8}
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	2a20      	cmp	r2, #32
 8008b8a:	d1cc      	bne.n	8008b26 <_strtod_l+0x46>
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b90:	e7be      	b.n	8008b10 <_strtod_l+0x30>
 8008b92:	2a2d      	cmp	r2, #45	; 0x2d
 8008b94:	d1c7      	bne.n	8008b26 <_strtod_l+0x46>
 8008b96:	2201      	movs	r2, #1
 8008b98:	920a      	str	r2, [sp, #40]	; 0x28
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1c2      	bne.n	8008b2a <_strtod_l+0x4a>
 8008ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ba6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 856e 	bne.w	800968c <_strtod_l+0xbac>
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	e7e1      	b.n	8008b7a <_strtod_l+0x9a>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	e7ee      	b.n	8008b98 <_strtod_l+0xb8>
 8008bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bbc:	b13a      	cbz	r2, 8008bce <_strtod_l+0xee>
 8008bbe:	2135      	movs	r1, #53	; 0x35
 8008bc0:	a81a      	add	r0, sp, #104	; 0x68
 8008bc2:	f002 fcb4 	bl	800b52e <__copybits>
 8008bc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f002 f873 	bl	800acb4 <_Bfree>
 8008bce:	3f01      	subs	r7, #1
 8008bd0:	2f04      	cmp	r7, #4
 8008bd2:	d806      	bhi.n	8008be2 <_strtod_l+0x102>
 8008bd4:	e8df f007 	tbb	[pc, r7]
 8008bd8:	1714030a 	.word	0x1714030a
 8008bdc:	0a          	.byte	0x0a
 8008bdd:	00          	.byte	0x00
 8008bde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008be2:	0728      	lsls	r0, r5, #28
 8008be4:	d5c0      	bpl.n	8008b68 <_strtod_l+0x88>
 8008be6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008bea:	e7bd      	b.n	8008b68 <_strtod_l+0x88>
 8008bec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008bf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bfe:	e7f0      	b.n	8008be2 <_strtod_l+0x102>
 8008c00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d84 <_strtod_l+0x2a4>
 8008c04:	e7ed      	b.n	8008be2 <_strtod_l+0x102>
 8008c06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c0a:	f04f 3aff 	mov.w	sl, #4294967295
 8008c0e:	e7e8      	b.n	8008be2 <_strtod_l+0x102>
 8008c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	2b30      	cmp	r3, #48	; 0x30
 8008c1a:	d0f9      	beq.n	8008c10 <_strtod_l+0x130>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0a3      	beq.n	8008b68 <_strtod_l+0x88>
 8008c20:	2301      	movs	r3, #1
 8008c22:	f04f 0900 	mov.w	r9, #0
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c2a:	9308      	str	r3, [sp, #32]
 8008c2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c30:	464f      	mov	r7, r9
 8008c32:	220a      	movs	r2, #10
 8008c34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c36:	7806      	ldrb	r6, [r0, #0]
 8008c38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c3c:	b2d9      	uxtb	r1, r3
 8008c3e:	2909      	cmp	r1, #9
 8008c40:	d92a      	bls.n	8008c98 <_strtod_l+0x1b8>
 8008c42:	9905      	ldr	r1, [sp, #20]
 8008c44:	462a      	mov	r2, r5
 8008c46:	f002 fe2f 	bl	800b8a8 <strncmp>
 8008c4a:	b398      	cbz	r0, 8008cb4 <_strtod_l+0x1d4>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4632      	mov	r2, r6
 8008c50:	463d      	mov	r5, r7
 8008c52:	9005      	str	r0, [sp, #20]
 8008c54:	4603      	mov	r3, r0
 8008c56:	2a65      	cmp	r2, #101	; 0x65
 8008c58:	d001      	beq.n	8008c5e <_strtod_l+0x17e>
 8008c5a:	2a45      	cmp	r2, #69	; 0x45
 8008c5c:	d118      	bne.n	8008c90 <_strtod_l+0x1b0>
 8008c5e:	b91d      	cbnz	r5, 8008c68 <_strtod_l+0x188>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	4302      	orrs	r2, r0
 8008c64:	d09e      	beq.n	8008ba4 <_strtod_l+0xc4>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008c6c:	f108 0201 	add.w	r2, r8, #1
 8008c70:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008c76:	2a2b      	cmp	r2, #43	; 0x2b
 8008c78:	d075      	beq.n	8008d66 <_strtod_l+0x286>
 8008c7a:	2a2d      	cmp	r2, #45	; 0x2d
 8008c7c:	d07b      	beq.n	8008d76 <_strtod_l+0x296>
 8008c7e:	f04f 0c00 	mov.w	ip, #0
 8008c82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c86:	2909      	cmp	r1, #9
 8008c88:	f240 8082 	bls.w	8008d90 <_strtod_l+0x2b0>
 8008c8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c90:	2600      	movs	r6, #0
 8008c92:	e09d      	b.n	8008dd0 <_strtod_l+0x2f0>
 8008c94:	2300      	movs	r3, #0
 8008c96:	e7c4      	b.n	8008c22 <_strtod_l+0x142>
 8008c98:	2f08      	cmp	r7, #8
 8008c9a:	bfd8      	it	le
 8008c9c:	9907      	ldrle	r1, [sp, #28]
 8008c9e:	f100 0001 	add.w	r0, r0, #1
 8008ca2:	bfda      	itte	le
 8008ca4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ca8:	9307      	strle	r3, [sp, #28]
 8008caa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008cae:	3701      	adds	r7, #1
 8008cb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8008cb2:	e7bf      	b.n	8008c34 <_strtod_l+0x154>
 8008cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cb6:	195a      	adds	r2, r3, r5
 8008cb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cba:	5d5a      	ldrb	r2, [r3, r5]
 8008cbc:	2f00      	cmp	r7, #0
 8008cbe:	d037      	beq.n	8008d30 <_strtod_l+0x250>
 8008cc0:	9005      	str	r0, [sp, #20]
 8008cc2:	463d      	mov	r5, r7
 8008cc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d912      	bls.n	8008cf2 <_strtod_l+0x212>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e7c2      	b.n	8008c56 <_strtod_l+0x176>
 8008cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cd6:	785a      	ldrb	r2, [r3, #1]
 8008cd8:	3001      	adds	r0, #1
 8008cda:	2a30      	cmp	r2, #48	; 0x30
 8008cdc:	d0f8      	beq.n	8008cd0 <_strtod_l+0x1f0>
 8008cde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ce2:	2b08      	cmp	r3, #8
 8008ce4:	f200 84d9 	bhi.w	800969a <_strtod_l+0xbba>
 8008ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cea:	9005      	str	r0, [sp, #20]
 8008cec:	2000      	movs	r0, #0
 8008cee:	9308      	str	r3, [sp, #32]
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	3a30      	subs	r2, #48	; 0x30
 8008cf4:	f100 0301 	add.w	r3, r0, #1
 8008cf8:	d014      	beq.n	8008d24 <_strtod_l+0x244>
 8008cfa:	9905      	ldr	r1, [sp, #20]
 8008cfc:	4419      	add	r1, r3
 8008cfe:	9105      	str	r1, [sp, #20]
 8008d00:	462b      	mov	r3, r5
 8008d02:	eb00 0e05 	add.w	lr, r0, r5
 8008d06:	210a      	movs	r1, #10
 8008d08:	4573      	cmp	r3, lr
 8008d0a:	d113      	bne.n	8008d34 <_strtod_l+0x254>
 8008d0c:	182b      	adds	r3, r5, r0
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	f105 0501 	add.w	r5, r5, #1
 8008d14:	4405      	add	r5, r0
 8008d16:	dc1c      	bgt.n	8008d52 <_strtod_l+0x272>
 8008d18:	9907      	ldr	r1, [sp, #28]
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	fb03 2301 	mla	r3, r3, r1, r2
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d26:	1c51      	adds	r1, r2, #1
 8008d28:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d2a:	7852      	ldrb	r2, [r2, #1]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	e7c9      	b.n	8008cc4 <_strtod_l+0x1e4>
 8008d30:	4638      	mov	r0, r7
 8008d32:	e7d2      	b.n	8008cda <_strtod_l+0x1fa>
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	dc04      	bgt.n	8008d42 <_strtod_l+0x262>
 8008d38:	9e07      	ldr	r6, [sp, #28]
 8008d3a:	434e      	muls	r6, r1
 8008d3c:	9607      	str	r6, [sp, #28]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	e7e2      	b.n	8008d08 <_strtod_l+0x228>
 8008d42:	f103 0c01 	add.w	ip, r3, #1
 8008d46:	f1bc 0f10 	cmp.w	ip, #16
 8008d4a:	bfd8      	it	le
 8008d4c:	fb01 f909 	mulle.w	r9, r1, r9
 8008d50:	e7f5      	b.n	8008d3e <_strtod_l+0x25e>
 8008d52:	2d10      	cmp	r5, #16
 8008d54:	bfdc      	itt	le
 8008d56:	230a      	movle	r3, #10
 8008d58:	fb03 2909 	mlale	r9, r3, r9, r2
 8008d5c:	e7e1      	b.n	8008d22 <_strtod_l+0x242>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9305      	str	r3, [sp, #20]
 8008d62:	2301      	movs	r3, #1
 8008d64:	e77c      	b.n	8008c60 <_strtod_l+0x180>
 8008d66:	f04f 0c00 	mov.w	ip, #0
 8008d6a:	f108 0202 	add.w	r2, r8, #2
 8008d6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d74:	e785      	b.n	8008c82 <_strtod_l+0x1a2>
 8008d76:	f04f 0c01 	mov.w	ip, #1
 8008d7a:	e7f6      	b.n	8008d6a <_strtod_l+0x28a>
 8008d7c:	0800c758 	.word	0x0800c758
 8008d80:	0800c510 	.word	0x0800c510
 8008d84:	7ff00000 	.word	0x7ff00000
 8008d88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d8a:	1c51      	adds	r1, r2, #1
 8008d8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d8e:	7852      	ldrb	r2, [r2, #1]
 8008d90:	2a30      	cmp	r2, #48	; 0x30
 8008d92:	d0f9      	beq.n	8008d88 <_strtod_l+0x2a8>
 8008d94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d98:	2908      	cmp	r1, #8
 8008d9a:	f63f af79 	bhi.w	8008c90 <_strtod_l+0x1b0>
 8008d9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008da2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008da4:	9206      	str	r2, [sp, #24]
 8008da6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008da8:	1c51      	adds	r1, r2, #1
 8008daa:	9117      	str	r1, [sp, #92]	; 0x5c
 8008dac:	7852      	ldrb	r2, [r2, #1]
 8008dae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008db2:	2e09      	cmp	r6, #9
 8008db4:	d937      	bls.n	8008e26 <_strtod_l+0x346>
 8008db6:	9e06      	ldr	r6, [sp, #24]
 8008db8:	1b89      	subs	r1, r1, r6
 8008dba:	2908      	cmp	r1, #8
 8008dbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008dc0:	dc02      	bgt.n	8008dc8 <_strtod_l+0x2e8>
 8008dc2:	4576      	cmp	r6, lr
 8008dc4:	bfa8      	it	ge
 8008dc6:	4676      	movge	r6, lr
 8008dc8:	f1bc 0f00 	cmp.w	ip, #0
 8008dcc:	d000      	beq.n	8008dd0 <_strtod_l+0x2f0>
 8008dce:	4276      	negs	r6, r6
 8008dd0:	2d00      	cmp	r5, #0
 8008dd2:	d14d      	bne.n	8008e70 <_strtod_l+0x390>
 8008dd4:	9904      	ldr	r1, [sp, #16]
 8008dd6:	4301      	orrs	r1, r0
 8008dd8:	f47f aec6 	bne.w	8008b68 <_strtod_l+0x88>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f47f aee1 	bne.w	8008ba4 <_strtod_l+0xc4>
 8008de2:	2a69      	cmp	r2, #105	; 0x69
 8008de4:	d027      	beq.n	8008e36 <_strtod_l+0x356>
 8008de6:	dc24      	bgt.n	8008e32 <_strtod_l+0x352>
 8008de8:	2a49      	cmp	r2, #73	; 0x49
 8008dea:	d024      	beq.n	8008e36 <_strtod_l+0x356>
 8008dec:	2a4e      	cmp	r2, #78	; 0x4e
 8008dee:	f47f aed9 	bne.w	8008ba4 <_strtod_l+0xc4>
 8008df2:	499f      	ldr	r1, [pc, #636]	; (8009070 <_strtod_l+0x590>)
 8008df4:	a817      	add	r0, sp, #92	; 0x5c
 8008df6:	f001 fe3d 	bl	800aa74 <__match>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f43f aed2 	beq.w	8008ba4 <_strtod_l+0xc4>
 8008e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b28      	cmp	r3, #40	; 0x28
 8008e06:	d12d      	bne.n	8008e64 <_strtod_l+0x384>
 8008e08:	499a      	ldr	r1, [pc, #616]	; (8009074 <_strtod_l+0x594>)
 8008e0a:	aa1a      	add	r2, sp, #104	; 0x68
 8008e0c:	a817      	add	r0, sp, #92	; 0x5c
 8008e0e:	f001 fe45 	bl	800aa9c <__hexnan>
 8008e12:	2805      	cmp	r0, #5
 8008e14:	d126      	bne.n	8008e64 <_strtod_l+0x384>
 8008e16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008e1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008e20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008e24:	e6a0      	b.n	8008b68 <_strtod_l+0x88>
 8008e26:	210a      	movs	r1, #10
 8008e28:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008e2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e30:	e7b9      	b.n	8008da6 <_strtod_l+0x2c6>
 8008e32:	2a6e      	cmp	r2, #110	; 0x6e
 8008e34:	e7db      	b.n	8008dee <_strtod_l+0x30e>
 8008e36:	4990      	ldr	r1, [pc, #576]	; (8009078 <_strtod_l+0x598>)
 8008e38:	a817      	add	r0, sp, #92	; 0x5c
 8008e3a:	f001 fe1b 	bl	800aa74 <__match>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f43f aeb0 	beq.w	8008ba4 <_strtod_l+0xc4>
 8008e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e46:	498d      	ldr	r1, [pc, #564]	; (800907c <_strtod_l+0x59c>)
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	a817      	add	r0, sp, #92	; 0x5c
 8008e4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e4e:	f001 fe11 	bl	800aa74 <__match>
 8008e52:	b910      	cbnz	r0, 8008e5a <_strtod_l+0x37a>
 8008e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e56:	3301      	adds	r3, #1
 8008e58:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800908c <_strtod_l+0x5ac>
 8008e5e:	f04f 0a00 	mov.w	sl, #0
 8008e62:	e681      	b.n	8008b68 <_strtod_l+0x88>
 8008e64:	4886      	ldr	r0, [pc, #536]	; (8009080 <_strtod_l+0x5a0>)
 8008e66:	f002 fd17 	bl	800b898 <nan>
 8008e6a:	ec5b ab10 	vmov	sl, fp, d0
 8008e6e:	e67b      	b.n	8008b68 <_strtod_l+0x88>
 8008e70:	9b05      	ldr	r3, [sp, #20]
 8008e72:	9807      	ldr	r0, [sp, #28]
 8008e74:	1af3      	subs	r3, r6, r3
 8008e76:	2f00      	cmp	r7, #0
 8008e78:	bf08      	it	eq
 8008e7a:	462f      	moveq	r7, r5
 8008e7c:	2d10      	cmp	r5, #16
 8008e7e:	9306      	str	r3, [sp, #24]
 8008e80:	46a8      	mov	r8, r5
 8008e82:	bfa8      	it	ge
 8008e84:	f04f 0810 	movge.w	r8, #16
 8008e88:	f7f7 fb44 	bl	8000514 <__aeabi_ui2d>
 8008e8c:	2d09      	cmp	r5, #9
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	dd13      	ble.n	8008ebc <_strtod_l+0x3dc>
 8008e94:	4b7b      	ldr	r3, [pc, #492]	; (8009084 <_strtod_l+0x5a4>)
 8008e96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e9e:	f7f7 fbb3 	bl	8000608 <__aeabi_dmul>
 8008ea2:	4682      	mov	sl, r0
 8008ea4:	4648      	mov	r0, r9
 8008ea6:	468b      	mov	fp, r1
 8008ea8:	f7f7 fb34 	bl	8000514 <__aeabi_ui2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 f9f2 	bl	800029c <__adddf3>
 8008eb8:	4682      	mov	sl, r0
 8008eba:	468b      	mov	fp, r1
 8008ebc:	2d0f      	cmp	r5, #15
 8008ebe:	dc38      	bgt.n	8008f32 <_strtod_l+0x452>
 8008ec0:	9b06      	ldr	r3, [sp, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f43f ae50 	beq.w	8008b68 <_strtod_l+0x88>
 8008ec8:	dd24      	ble.n	8008f14 <_strtod_l+0x434>
 8008eca:	2b16      	cmp	r3, #22
 8008ecc:	dc0b      	bgt.n	8008ee6 <_strtod_l+0x406>
 8008ece:	496d      	ldr	r1, [pc, #436]	; (8009084 <_strtod_l+0x5a4>)
 8008ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed8:	4652      	mov	r2, sl
 8008eda:	465b      	mov	r3, fp
 8008edc:	f7f7 fb94 	bl	8000608 <__aeabi_dmul>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	e640      	b.n	8008b68 <_strtod_l+0x88>
 8008ee6:	9a06      	ldr	r2, [sp, #24]
 8008ee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008eec:	4293      	cmp	r3, r2
 8008eee:	db20      	blt.n	8008f32 <_strtod_l+0x452>
 8008ef0:	4c64      	ldr	r4, [pc, #400]	; (8009084 <_strtod_l+0x5a4>)
 8008ef2:	f1c5 050f 	rsb	r5, r5, #15
 8008ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008efa:	4652      	mov	r2, sl
 8008efc:	465b      	mov	r3, fp
 8008efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f02:	f7f7 fb81 	bl	8000608 <__aeabi_dmul>
 8008f06:	9b06      	ldr	r3, [sp, #24]
 8008f08:	1b5d      	subs	r5, r3, r5
 8008f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f12:	e7e3      	b.n	8008edc <_strtod_l+0x3fc>
 8008f14:	9b06      	ldr	r3, [sp, #24]
 8008f16:	3316      	adds	r3, #22
 8008f18:	db0b      	blt.n	8008f32 <_strtod_l+0x452>
 8008f1a:	9b05      	ldr	r3, [sp, #20]
 8008f1c:	1b9e      	subs	r6, r3, r6
 8008f1e:	4b59      	ldr	r3, [pc, #356]	; (8009084 <_strtod_l+0x5a4>)
 8008f20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	f7f7 fc96 	bl	800085c <__aeabi_ddiv>
 8008f30:	e7d6      	b.n	8008ee0 <_strtod_l+0x400>
 8008f32:	9b06      	ldr	r3, [sp, #24]
 8008f34:	eba5 0808 	sub.w	r8, r5, r8
 8008f38:	4498      	add	r8, r3
 8008f3a:	f1b8 0f00 	cmp.w	r8, #0
 8008f3e:	dd74      	ble.n	800902a <_strtod_l+0x54a>
 8008f40:	f018 030f 	ands.w	r3, r8, #15
 8008f44:	d00a      	beq.n	8008f5c <_strtod_l+0x47c>
 8008f46:	494f      	ldr	r1, [pc, #316]	; (8009084 <_strtod_l+0x5a4>)
 8008f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f54:	f7f7 fb58 	bl	8000608 <__aeabi_dmul>
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	f038 080f 	bics.w	r8, r8, #15
 8008f60:	d04f      	beq.n	8009002 <_strtod_l+0x522>
 8008f62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f66:	dd22      	ble.n	8008fae <_strtod_l+0x4ce>
 8008f68:	2500      	movs	r5, #0
 8008f6a:	462e      	mov	r6, r5
 8008f6c:	9507      	str	r5, [sp, #28]
 8008f6e:	9505      	str	r5, [sp, #20]
 8008f70:	2322      	movs	r3, #34	; 0x22
 8008f72:	f8df b118 	ldr.w	fp, [pc, #280]	; 800908c <_strtod_l+0x5ac>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f04f 0a00 	mov.w	sl, #0
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f43f adf2 	beq.w	8008b68 <_strtod_l+0x88>
 8008f84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 fe94 	bl	800acb4 <_Bfree>
 8008f8c:	9905      	ldr	r1, [sp, #20]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f001 fe90 	bl	800acb4 <_Bfree>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fe8c 	bl	800acb4 <_Bfree>
 8008f9c:	9907      	ldr	r1, [sp, #28]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f001 fe88 	bl	800acb4 <_Bfree>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f001 fe84 	bl	800acb4 <_Bfree>
 8008fac:	e5dc      	b.n	8008b68 <_strtod_l+0x88>
 8008fae:	4b36      	ldr	r3, [pc, #216]	; (8009088 <_strtod_l+0x5a8>)
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008fb8:	4650      	mov	r0, sl
 8008fba:	4659      	mov	r1, fp
 8008fbc:	4699      	mov	r9, r3
 8008fbe:	f1b8 0f01 	cmp.w	r8, #1
 8008fc2:	dc21      	bgt.n	8009008 <_strtod_l+0x528>
 8008fc4:	b10b      	cbz	r3, 8008fca <_strtod_l+0x4ea>
 8008fc6:	4682      	mov	sl, r0
 8008fc8:	468b      	mov	fp, r1
 8008fca:	4b2f      	ldr	r3, [pc, #188]	; (8009088 <_strtod_l+0x5a8>)
 8008fcc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008fd0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008fdc:	f7f7 fb14 	bl	8000608 <__aeabi_dmul>
 8008fe0:	4b2a      	ldr	r3, [pc, #168]	; (800908c <_strtod_l+0x5ac>)
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	400b      	ands	r3, r1
 8008fe6:	492a      	ldr	r1, [pc, #168]	; (8009090 <_strtod_l+0x5b0>)
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	4682      	mov	sl, r0
 8008fec:	d8bc      	bhi.n	8008f68 <_strtod_l+0x488>
 8008fee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ff2:	428b      	cmp	r3, r1
 8008ff4:	bf86      	itte	hi
 8008ff6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009094 <_strtod_l+0x5b4>
 8008ffa:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ffe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009002:	2300      	movs	r3, #0
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	e084      	b.n	8009112 <_strtod_l+0x632>
 8009008:	f018 0f01 	tst.w	r8, #1
 800900c:	d005      	beq.n	800901a <_strtod_l+0x53a>
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	2301      	movs	r3, #1
 800901a:	9a04      	ldr	r2, [sp, #16]
 800901c:	3208      	adds	r2, #8
 800901e:	f109 0901 	add.w	r9, r9, #1
 8009022:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009026:	9204      	str	r2, [sp, #16]
 8009028:	e7c9      	b.n	8008fbe <_strtod_l+0x4de>
 800902a:	d0ea      	beq.n	8009002 <_strtod_l+0x522>
 800902c:	f1c8 0800 	rsb	r8, r8, #0
 8009030:	f018 020f 	ands.w	r2, r8, #15
 8009034:	d00a      	beq.n	800904c <_strtod_l+0x56c>
 8009036:	4b13      	ldr	r3, [pc, #76]	; (8009084 <_strtod_l+0x5a4>)
 8009038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800903c:	4650      	mov	r0, sl
 800903e:	4659      	mov	r1, fp
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f7f7 fc0a 	bl	800085c <__aeabi_ddiv>
 8009048:	4682      	mov	sl, r0
 800904a:	468b      	mov	fp, r1
 800904c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009050:	d0d7      	beq.n	8009002 <_strtod_l+0x522>
 8009052:	f1b8 0f1f 	cmp.w	r8, #31
 8009056:	dd1f      	ble.n	8009098 <_strtod_l+0x5b8>
 8009058:	2500      	movs	r5, #0
 800905a:	462e      	mov	r6, r5
 800905c:	9507      	str	r5, [sp, #28]
 800905e:	9505      	str	r5, [sp, #20]
 8009060:	2322      	movs	r3, #34	; 0x22
 8009062:	f04f 0a00 	mov.w	sl, #0
 8009066:	f04f 0b00 	mov.w	fp, #0
 800906a:	6023      	str	r3, [r4, #0]
 800906c:	e786      	b.n	8008f7c <_strtod_l+0x49c>
 800906e:	bf00      	nop
 8009070:	0800c4e1 	.word	0x0800c4e1
 8009074:	0800c524 	.word	0x0800c524
 8009078:	0800c4d9 	.word	0x0800c4d9
 800907c:	0800c664 	.word	0x0800c664
 8009080:	0800c910 	.word	0x0800c910
 8009084:	0800c7f0 	.word	0x0800c7f0
 8009088:	0800c7c8 	.word	0x0800c7c8
 800908c:	7ff00000 	.word	0x7ff00000
 8009090:	7ca00000 	.word	0x7ca00000
 8009094:	7fefffff 	.word	0x7fefffff
 8009098:	f018 0310 	ands.w	r3, r8, #16
 800909c:	bf18      	it	ne
 800909e:	236a      	movne	r3, #106	; 0x6a
 80090a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009450 <_strtod_l+0x970>
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	4650      	mov	r0, sl
 80090a8:	4659      	mov	r1, fp
 80090aa:	2300      	movs	r3, #0
 80090ac:	f018 0f01 	tst.w	r8, #1
 80090b0:	d004      	beq.n	80090bc <_strtod_l+0x5dc>
 80090b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090b6:	f7f7 faa7 	bl	8000608 <__aeabi_dmul>
 80090ba:	2301      	movs	r3, #1
 80090bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80090c0:	f109 0908 	add.w	r9, r9, #8
 80090c4:	d1f2      	bne.n	80090ac <_strtod_l+0x5cc>
 80090c6:	b10b      	cbz	r3, 80090cc <_strtod_l+0x5ec>
 80090c8:	4682      	mov	sl, r0
 80090ca:	468b      	mov	fp, r1
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	b1c3      	cbz	r3, 8009102 <_strtod_l+0x622>
 80090d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80090d8:	2b00      	cmp	r3, #0
 80090da:	4659      	mov	r1, fp
 80090dc:	dd11      	ble.n	8009102 <_strtod_l+0x622>
 80090de:	2b1f      	cmp	r3, #31
 80090e0:	f340 8124 	ble.w	800932c <_strtod_l+0x84c>
 80090e4:	2b34      	cmp	r3, #52	; 0x34
 80090e6:	bfde      	ittt	le
 80090e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80090ec:	f04f 33ff 	movle.w	r3, #4294967295
 80090f0:	fa03 f202 	lslle.w	r2, r3, r2
 80090f4:	f04f 0a00 	mov.w	sl, #0
 80090f8:	bfcc      	ite	gt
 80090fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090fe:	ea02 0b01 	andle.w	fp, r2, r1
 8009102:	2200      	movs	r2, #0
 8009104:	2300      	movs	r3, #0
 8009106:	4650      	mov	r0, sl
 8009108:	4659      	mov	r1, fp
 800910a:	f7f7 fce5 	bl	8000ad8 <__aeabi_dcmpeq>
 800910e:	2800      	cmp	r0, #0
 8009110:	d1a2      	bne.n	8009058 <_strtod_l+0x578>
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	9908      	ldr	r1, [sp, #32]
 8009118:	462b      	mov	r3, r5
 800911a:	463a      	mov	r2, r7
 800911c:	4620      	mov	r0, r4
 800911e:	f001 fe31 	bl	800ad84 <__s2b>
 8009122:	9007      	str	r0, [sp, #28]
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f af1f 	beq.w	8008f68 <_strtod_l+0x488>
 800912a:	9b05      	ldr	r3, [sp, #20]
 800912c:	1b9e      	subs	r6, r3, r6
 800912e:	9b06      	ldr	r3, [sp, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfb4      	ite	lt
 8009134:	4633      	movlt	r3, r6
 8009136:	2300      	movge	r3, #0
 8009138:	930c      	str	r3, [sp, #48]	; 0x30
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2500      	movs	r5, #0
 800913e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009142:	9312      	str	r3, [sp, #72]	; 0x48
 8009144:	462e      	mov	r6, r5
 8009146:	9b07      	ldr	r3, [sp, #28]
 8009148:	4620      	mov	r0, r4
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	f001 fd72 	bl	800ac34 <_Balloc>
 8009150:	9005      	str	r0, [sp, #20]
 8009152:	2800      	cmp	r0, #0
 8009154:	f43f af0c 	beq.w	8008f70 <_strtod_l+0x490>
 8009158:	9b07      	ldr	r3, [sp, #28]
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	3202      	adds	r2, #2
 800915e:	f103 010c 	add.w	r1, r3, #12
 8009162:	0092      	lsls	r2, r2, #2
 8009164:	300c      	adds	r0, #12
 8009166:	f001 fd4b 	bl	800ac00 <memcpy>
 800916a:	ec4b ab10 	vmov	d0, sl, fp
 800916e:	aa1a      	add	r2, sp, #104	; 0x68
 8009170:	a919      	add	r1, sp, #100	; 0x64
 8009172:	4620      	mov	r0, r4
 8009174:	f002 f94c 	bl	800b410 <__d2b>
 8009178:	ec4b ab18 	vmov	d8, sl, fp
 800917c:	9018      	str	r0, [sp, #96]	; 0x60
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f aef6 	beq.w	8008f70 <_strtod_l+0x490>
 8009184:	2101      	movs	r1, #1
 8009186:	4620      	mov	r0, r4
 8009188:	f001 fe96 	bl	800aeb8 <__i2b>
 800918c:	4606      	mov	r6, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f aeee 	beq.w	8008f70 <_strtod_l+0x490>
 8009194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009196:	9904      	ldr	r1, [sp, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfab      	itete	ge
 800919c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800919e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80091a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80091a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80091a6:	bfac      	ite	ge
 80091a8:	eb03 0902 	addge.w	r9, r3, r2
 80091ac:	1ad7      	sublt	r7, r2, r3
 80091ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80091b0:	eba3 0801 	sub.w	r8, r3, r1
 80091b4:	4490      	add	r8, r2
 80091b6:	4ba1      	ldr	r3, [pc, #644]	; (800943c <_strtod_l+0x95c>)
 80091b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80091bc:	4598      	cmp	r8, r3
 80091be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80091c2:	f280 80c7 	bge.w	8009354 <_strtod_l+0x874>
 80091c6:	eba3 0308 	sub.w	r3, r3, r8
 80091ca:	2b1f      	cmp	r3, #31
 80091cc:	eba2 0203 	sub.w	r2, r2, r3
 80091d0:	f04f 0101 	mov.w	r1, #1
 80091d4:	f300 80b1 	bgt.w	800933a <_strtod_l+0x85a>
 80091d8:	fa01 f303 	lsl.w	r3, r1, r3
 80091dc:	930d      	str	r3, [sp, #52]	; 0x34
 80091de:	2300      	movs	r3, #0
 80091e0:	9308      	str	r3, [sp, #32]
 80091e2:	eb09 0802 	add.w	r8, r9, r2
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	45c1      	cmp	r9, r8
 80091ea:	4417      	add	r7, r2
 80091ec:	441f      	add	r7, r3
 80091ee:	464b      	mov	r3, r9
 80091f0:	bfa8      	it	ge
 80091f2:	4643      	movge	r3, r8
 80091f4:	42bb      	cmp	r3, r7
 80091f6:	bfa8      	it	ge
 80091f8:	463b      	movge	r3, r7
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bfc2      	ittt	gt
 80091fe:	eba8 0803 	subgt.w	r8, r8, r3
 8009202:	1aff      	subgt	r7, r7, r3
 8009204:	eba9 0903 	subgt.w	r9, r9, r3
 8009208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800920a:	2b00      	cmp	r3, #0
 800920c:	dd17      	ble.n	800923e <_strtod_l+0x75e>
 800920e:	4631      	mov	r1, r6
 8009210:	461a      	mov	r2, r3
 8009212:	4620      	mov	r0, r4
 8009214:	f001 ff10 	bl	800b038 <__pow5mult>
 8009218:	4606      	mov	r6, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	f43f aea8 	beq.w	8008f70 <_strtod_l+0x490>
 8009220:	4601      	mov	r1, r0
 8009222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009224:	4620      	mov	r0, r4
 8009226:	f001 fe5d 	bl	800aee4 <__multiply>
 800922a:	900b      	str	r0, [sp, #44]	; 0x2c
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f ae9f 	beq.w	8008f70 <_strtod_l+0x490>
 8009232:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009234:	4620      	mov	r0, r4
 8009236:	f001 fd3d 	bl	800acb4 <_Bfree>
 800923a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923c:	9318      	str	r3, [sp, #96]	; 0x60
 800923e:	f1b8 0f00 	cmp.w	r8, #0
 8009242:	f300 808c 	bgt.w	800935e <_strtod_l+0x87e>
 8009246:	9b06      	ldr	r3, [sp, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	dd08      	ble.n	800925e <_strtod_l+0x77e>
 800924c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800924e:	9905      	ldr	r1, [sp, #20]
 8009250:	4620      	mov	r0, r4
 8009252:	f001 fef1 	bl	800b038 <__pow5mult>
 8009256:	9005      	str	r0, [sp, #20]
 8009258:	2800      	cmp	r0, #0
 800925a:	f43f ae89 	beq.w	8008f70 <_strtod_l+0x490>
 800925e:	2f00      	cmp	r7, #0
 8009260:	dd08      	ble.n	8009274 <_strtod_l+0x794>
 8009262:	9905      	ldr	r1, [sp, #20]
 8009264:	463a      	mov	r2, r7
 8009266:	4620      	mov	r0, r4
 8009268:	f001 ff40 	bl	800b0ec <__lshift>
 800926c:	9005      	str	r0, [sp, #20]
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f ae7e 	beq.w	8008f70 <_strtod_l+0x490>
 8009274:	f1b9 0f00 	cmp.w	r9, #0
 8009278:	dd08      	ble.n	800928c <_strtod_l+0x7ac>
 800927a:	4631      	mov	r1, r6
 800927c:	464a      	mov	r2, r9
 800927e:	4620      	mov	r0, r4
 8009280:	f001 ff34 	bl	800b0ec <__lshift>
 8009284:	4606      	mov	r6, r0
 8009286:	2800      	cmp	r0, #0
 8009288:	f43f ae72 	beq.w	8008f70 <_strtod_l+0x490>
 800928c:	9a05      	ldr	r2, [sp, #20]
 800928e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009290:	4620      	mov	r0, r4
 8009292:	f001 ffb7 	bl	800b204 <__mdiff>
 8009296:	4605      	mov	r5, r0
 8009298:	2800      	cmp	r0, #0
 800929a:	f43f ae69 	beq.w	8008f70 <_strtod_l+0x490>
 800929e:	68c3      	ldr	r3, [r0, #12]
 80092a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a2:	2300      	movs	r3, #0
 80092a4:	60c3      	str	r3, [r0, #12]
 80092a6:	4631      	mov	r1, r6
 80092a8:	f001 ff90 	bl	800b1cc <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	da60      	bge.n	8009372 <_strtod_l+0x892>
 80092b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b2:	ea53 030a 	orrs.w	r3, r3, sl
 80092b6:	f040 8082 	bne.w	80093be <_strtod_l+0x8de>
 80092ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d17d      	bne.n	80093be <_strtod_l+0x8de>
 80092c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092c6:	0d1b      	lsrs	r3, r3, #20
 80092c8:	051b      	lsls	r3, r3, #20
 80092ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092ce:	d976      	bls.n	80093be <_strtod_l+0x8de>
 80092d0:	696b      	ldr	r3, [r5, #20]
 80092d2:	b913      	cbnz	r3, 80092da <_strtod_l+0x7fa>
 80092d4:	692b      	ldr	r3, [r5, #16]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	dd71      	ble.n	80093be <_strtod_l+0x8de>
 80092da:	4629      	mov	r1, r5
 80092dc:	2201      	movs	r2, #1
 80092de:	4620      	mov	r0, r4
 80092e0:	f001 ff04 	bl	800b0ec <__lshift>
 80092e4:	4631      	mov	r1, r6
 80092e6:	4605      	mov	r5, r0
 80092e8:	f001 ff70 	bl	800b1cc <__mcmp>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	dd66      	ble.n	80093be <_strtod_l+0x8de>
 80092f0:	9904      	ldr	r1, [sp, #16]
 80092f2:	4a53      	ldr	r2, [pc, #332]	; (8009440 <_strtod_l+0x960>)
 80092f4:	465b      	mov	r3, fp
 80092f6:	2900      	cmp	r1, #0
 80092f8:	f000 8081 	beq.w	80093fe <_strtod_l+0x91e>
 80092fc:	ea02 010b 	and.w	r1, r2, fp
 8009300:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009304:	dc7b      	bgt.n	80093fe <_strtod_l+0x91e>
 8009306:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800930a:	f77f aea9 	ble.w	8009060 <_strtod_l+0x580>
 800930e:	4b4d      	ldr	r3, [pc, #308]	; (8009444 <_strtod_l+0x964>)
 8009310:	4650      	mov	r0, sl
 8009312:	4659      	mov	r1, fp
 8009314:	2200      	movs	r2, #0
 8009316:	f7f7 f977 	bl	8000608 <__aeabi_dmul>
 800931a:	460b      	mov	r3, r1
 800931c:	4303      	orrs	r3, r0
 800931e:	bf08      	it	eq
 8009320:	2322      	moveq	r3, #34	; 0x22
 8009322:	4682      	mov	sl, r0
 8009324:	468b      	mov	fp, r1
 8009326:	bf08      	it	eq
 8009328:	6023      	streq	r3, [r4, #0]
 800932a:	e62b      	b.n	8008f84 <_strtod_l+0x4a4>
 800932c:	f04f 32ff 	mov.w	r2, #4294967295
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	ea03 0a0a 	and.w	sl, r3, sl
 8009338:	e6e3      	b.n	8009102 <_strtod_l+0x622>
 800933a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800933e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009342:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009346:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800934a:	fa01 f308 	lsl.w	r3, r1, r8
 800934e:	9308      	str	r3, [sp, #32]
 8009350:	910d      	str	r1, [sp, #52]	; 0x34
 8009352:	e746      	b.n	80091e2 <_strtod_l+0x702>
 8009354:	2300      	movs	r3, #0
 8009356:	9308      	str	r3, [sp, #32]
 8009358:	2301      	movs	r3, #1
 800935a:	930d      	str	r3, [sp, #52]	; 0x34
 800935c:	e741      	b.n	80091e2 <_strtod_l+0x702>
 800935e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009360:	4642      	mov	r2, r8
 8009362:	4620      	mov	r0, r4
 8009364:	f001 fec2 	bl	800b0ec <__lshift>
 8009368:	9018      	str	r0, [sp, #96]	; 0x60
 800936a:	2800      	cmp	r0, #0
 800936c:	f47f af6b 	bne.w	8009246 <_strtod_l+0x766>
 8009370:	e5fe      	b.n	8008f70 <_strtod_l+0x490>
 8009372:	465f      	mov	r7, fp
 8009374:	d16e      	bne.n	8009454 <_strtod_l+0x974>
 8009376:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800937c:	b342      	cbz	r2, 80093d0 <_strtod_l+0x8f0>
 800937e:	4a32      	ldr	r2, [pc, #200]	; (8009448 <_strtod_l+0x968>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d128      	bne.n	80093d6 <_strtod_l+0x8f6>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	4651      	mov	r1, sl
 8009388:	b1eb      	cbz	r3, 80093c6 <_strtod_l+0x8e6>
 800938a:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <_strtod_l+0x960>)
 800938c:	403b      	ands	r3, r7
 800938e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009392:	f04f 32ff 	mov.w	r2, #4294967295
 8009396:	d819      	bhi.n	80093cc <_strtod_l+0x8ec>
 8009398:	0d1b      	lsrs	r3, r3, #20
 800939a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	4299      	cmp	r1, r3
 80093a4:	d117      	bne.n	80093d6 <_strtod_l+0x8f6>
 80093a6:	4b29      	ldr	r3, [pc, #164]	; (800944c <_strtod_l+0x96c>)
 80093a8:	429f      	cmp	r7, r3
 80093aa:	d102      	bne.n	80093b2 <_strtod_l+0x8d2>
 80093ac:	3101      	adds	r1, #1
 80093ae:	f43f addf 	beq.w	8008f70 <_strtod_l+0x490>
 80093b2:	4b23      	ldr	r3, [pc, #140]	; (8009440 <_strtod_l+0x960>)
 80093b4:	403b      	ands	r3, r7
 80093b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80093ba:	f04f 0a00 	mov.w	sl, #0
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1a4      	bne.n	800930e <_strtod_l+0x82e>
 80093c4:	e5de      	b.n	8008f84 <_strtod_l+0x4a4>
 80093c6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ca:	e7ea      	b.n	80093a2 <_strtod_l+0x8c2>
 80093cc:	4613      	mov	r3, r2
 80093ce:	e7e8      	b.n	80093a2 <_strtod_l+0x8c2>
 80093d0:	ea53 030a 	orrs.w	r3, r3, sl
 80093d4:	d08c      	beq.n	80092f0 <_strtod_l+0x810>
 80093d6:	9b08      	ldr	r3, [sp, #32]
 80093d8:	b1db      	cbz	r3, 8009412 <_strtod_l+0x932>
 80093da:	423b      	tst	r3, r7
 80093dc:	d0ef      	beq.n	80093be <_strtod_l+0x8de>
 80093de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e0:	9a04      	ldr	r2, [sp, #16]
 80093e2:	4650      	mov	r0, sl
 80093e4:	4659      	mov	r1, fp
 80093e6:	b1c3      	cbz	r3, 800941a <_strtod_l+0x93a>
 80093e8:	f7ff fb5c 	bl	8008aa4 <sulp>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	ec51 0b18 	vmov	r0, r1, d8
 80093f4:	f7f6 ff52 	bl	800029c <__adddf3>
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	e7df      	b.n	80093be <_strtod_l+0x8de>
 80093fe:	4013      	ands	r3, r2
 8009400:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800940c:	f04f 3aff 	mov.w	sl, #4294967295
 8009410:	e7d5      	b.n	80093be <_strtod_l+0x8de>
 8009412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009414:	ea13 0f0a 	tst.w	r3, sl
 8009418:	e7e0      	b.n	80093dc <_strtod_l+0x8fc>
 800941a:	f7ff fb43 	bl	8008aa4 <sulp>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	ec51 0b18 	vmov	r0, r1, d8
 8009426:	f7f6 ff37 	bl	8000298 <__aeabi_dsub>
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	4682      	mov	sl, r0
 8009430:	468b      	mov	fp, r1
 8009432:	f7f7 fb51 	bl	8000ad8 <__aeabi_dcmpeq>
 8009436:	2800      	cmp	r0, #0
 8009438:	d0c1      	beq.n	80093be <_strtod_l+0x8de>
 800943a:	e611      	b.n	8009060 <_strtod_l+0x580>
 800943c:	fffffc02 	.word	0xfffffc02
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	39500000 	.word	0x39500000
 8009448:	000fffff 	.word	0x000fffff
 800944c:	7fefffff 	.word	0x7fefffff
 8009450:	0800c538 	.word	0x0800c538
 8009454:	4631      	mov	r1, r6
 8009456:	4628      	mov	r0, r5
 8009458:	f002 f836 	bl	800b4c8 <__ratio>
 800945c:	ec59 8b10 	vmov	r8, r9, d0
 8009460:	ee10 0a10 	vmov	r0, s0
 8009464:	2200      	movs	r2, #0
 8009466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800946a:	4649      	mov	r1, r9
 800946c:	f7f7 fb48 	bl	8000b00 <__aeabi_dcmple>
 8009470:	2800      	cmp	r0, #0
 8009472:	d07a      	beq.n	800956a <_strtod_l+0xa8a>
 8009474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d04a      	beq.n	8009510 <_strtod_l+0xa30>
 800947a:	4b95      	ldr	r3, [pc, #596]	; (80096d0 <_strtod_l+0xbf0>)
 800947c:	2200      	movs	r2, #0
 800947e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009482:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80096d0 <_strtod_l+0xbf0>
 8009486:	f04f 0800 	mov.w	r8, #0
 800948a:	4b92      	ldr	r3, [pc, #584]	; (80096d4 <_strtod_l+0xbf4>)
 800948c:	403b      	ands	r3, r7
 800948e:	930d      	str	r3, [sp, #52]	; 0x34
 8009490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009492:	4b91      	ldr	r3, [pc, #580]	; (80096d8 <_strtod_l+0xbf8>)
 8009494:	429a      	cmp	r2, r3
 8009496:	f040 80b0 	bne.w	80095fa <_strtod_l+0xb1a>
 800949a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800949e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80094a2:	ec4b ab10 	vmov	d0, sl, fp
 80094a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094aa:	f001 ff35 	bl	800b318 <__ulp>
 80094ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094b2:	ec53 2b10 	vmov	r2, r3, d0
 80094b6:	f7f7 f8a7 	bl	8000608 <__aeabi_dmul>
 80094ba:	4652      	mov	r2, sl
 80094bc:	465b      	mov	r3, fp
 80094be:	f7f6 feed 	bl	800029c <__adddf3>
 80094c2:	460b      	mov	r3, r1
 80094c4:	4983      	ldr	r1, [pc, #524]	; (80096d4 <_strtod_l+0xbf4>)
 80094c6:	4a85      	ldr	r2, [pc, #532]	; (80096dc <_strtod_l+0xbfc>)
 80094c8:	4019      	ands	r1, r3
 80094ca:	4291      	cmp	r1, r2
 80094cc:	4682      	mov	sl, r0
 80094ce:	d960      	bls.n	8009592 <_strtod_l+0xab2>
 80094d0:	ee18 3a90 	vmov	r3, s17
 80094d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80094d8:	4293      	cmp	r3, r2
 80094da:	d104      	bne.n	80094e6 <_strtod_l+0xa06>
 80094dc:	ee18 3a10 	vmov	r3, s16
 80094e0:	3301      	adds	r3, #1
 80094e2:	f43f ad45 	beq.w	8008f70 <_strtod_l+0x490>
 80094e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80096e8 <_strtod_l+0xc08>
 80094ea:	f04f 3aff 	mov.w	sl, #4294967295
 80094ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094f0:	4620      	mov	r0, r4
 80094f2:	f001 fbdf 	bl	800acb4 <_Bfree>
 80094f6:	9905      	ldr	r1, [sp, #20]
 80094f8:	4620      	mov	r0, r4
 80094fa:	f001 fbdb 	bl	800acb4 <_Bfree>
 80094fe:	4631      	mov	r1, r6
 8009500:	4620      	mov	r0, r4
 8009502:	f001 fbd7 	bl	800acb4 <_Bfree>
 8009506:	4629      	mov	r1, r5
 8009508:	4620      	mov	r0, r4
 800950a:	f001 fbd3 	bl	800acb4 <_Bfree>
 800950e:	e61a      	b.n	8009146 <_strtod_l+0x666>
 8009510:	f1ba 0f00 	cmp.w	sl, #0
 8009514:	d11b      	bne.n	800954e <_strtod_l+0xa6e>
 8009516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800951a:	b9f3      	cbnz	r3, 800955a <_strtod_l+0xa7a>
 800951c:	4b6c      	ldr	r3, [pc, #432]	; (80096d0 <_strtod_l+0xbf0>)
 800951e:	2200      	movs	r2, #0
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	f7f7 fae2 	bl	8000aec <__aeabi_dcmplt>
 8009528:	b9d0      	cbnz	r0, 8009560 <_strtod_l+0xa80>
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	4b6c      	ldr	r3, [pc, #432]	; (80096e0 <_strtod_l+0xc00>)
 8009530:	2200      	movs	r2, #0
 8009532:	f7f7 f869 	bl	8000608 <__aeabi_dmul>
 8009536:	4680      	mov	r8, r0
 8009538:	4689      	mov	r9, r1
 800953a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800953e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009542:	9315      	str	r3, [sp, #84]	; 0x54
 8009544:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009548:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800954c:	e79d      	b.n	800948a <_strtod_l+0x9aa>
 800954e:	f1ba 0f01 	cmp.w	sl, #1
 8009552:	d102      	bne.n	800955a <_strtod_l+0xa7a>
 8009554:	2f00      	cmp	r7, #0
 8009556:	f43f ad83 	beq.w	8009060 <_strtod_l+0x580>
 800955a:	4b62      	ldr	r3, [pc, #392]	; (80096e4 <_strtod_l+0xc04>)
 800955c:	2200      	movs	r2, #0
 800955e:	e78e      	b.n	800947e <_strtod_l+0x99e>
 8009560:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80096e0 <_strtod_l+0xc00>
 8009564:	f04f 0800 	mov.w	r8, #0
 8009568:	e7e7      	b.n	800953a <_strtod_l+0xa5a>
 800956a:	4b5d      	ldr	r3, [pc, #372]	; (80096e0 <_strtod_l+0xc00>)
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	2200      	movs	r2, #0
 8009572:	f7f7 f849 	bl	8000608 <__aeabi_dmul>
 8009576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009578:	4680      	mov	r8, r0
 800957a:	4689      	mov	r9, r1
 800957c:	b933      	cbnz	r3, 800958c <_strtod_l+0xaac>
 800957e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009582:	900e      	str	r0, [sp, #56]	; 0x38
 8009584:	930f      	str	r3, [sp, #60]	; 0x3c
 8009586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800958a:	e7dd      	b.n	8009548 <_strtod_l+0xa68>
 800958c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009590:	e7f9      	b.n	8009586 <_strtod_l+0xaa6>
 8009592:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1a8      	bne.n	80094ee <_strtod_l+0xa0e>
 800959c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095a2:	0d1b      	lsrs	r3, r3, #20
 80095a4:	051b      	lsls	r3, r3, #20
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d1a1      	bne.n	80094ee <_strtod_l+0xa0e>
 80095aa:	4640      	mov	r0, r8
 80095ac:	4649      	mov	r1, r9
 80095ae:	f7f7 fb8b 	bl	8000cc8 <__aeabi_d2lz>
 80095b2:	f7f6 fffb 	bl	80005ac <__aeabi_l2d>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4640      	mov	r0, r8
 80095bc:	4649      	mov	r1, r9
 80095be:	f7f6 fe6b 	bl	8000298 <__aeabi_dsub>
 80095c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095c8:	ea43 030a 	orr.w	r3, r3, sl
 80095cc:	4313      	orrs	r3, r2
 80095ce:	4680      	mov	r8, r0
 80095d0:	4689      	mov	r9, r1
 80095d2:	d055      	beq.n	8009680 <_strtod_l+0xba0>
 80095d4:	a336      	add	r3, pc, #216	; (adr r3, 80096b0 <_strtod_l+0xbd0>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f7 fa87 	bl	8000aec <__aeabi_dcmplt>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f47f acd0 	bne.w	8008f84 <_strtod_l+0x4a4>
 80095e4:	a334      	add	r3, pc, #208	; (adr r3, 80096b8 <_strtod_l+0xbd8>)
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f7 fa9b 	bl	8000b28 <__aeabi_dcmpgt>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	f43f af7b 	beq.w	80094ee <_strtod_l+0xa0e>
 80095f8:	e4c4      	b.n	8008f84 <_strtod_l+0x4a4>
 80095fa:	9b04      	ldr	r3, [sp, #16]
 80095fc:	b333      	cbz	r3, 800964c <_strtod_l+0xb6c>
 80095fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009600:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009604:	d822      	bhi.n	800964c <_strtod_l+0xb6c>
 8009606:	a32e      	add	r3, pc, #184	; (adr r3, 80096c0 <_strtod_l+0xbe0>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	4640      	mov	r0, r8
 800960e:	4649      	mov	r1, r9
 8009610:	f7f7 fa76 	bl	8000b00 <__aeabi_dcmple>
 8009614:	b1a0      	cbz	r0, 8009640 <_strtod_l+0xb60>
 8009616:	4649      	mov	r1, r9
 8009618:	4640      	mov	r0, r8
 800961a:	f7f7 facd 	bl	8000bb8 <__aeabi_d2uiz>
 800961e:	2801      	cmp	r0, #1
 8009620:	bf38      	it	cc
 8009622:	2001      	movcc	r0, #1
 8009624:	f7f6 ff76 	bl	8000514 <__aeabi_ui2d>
 8009628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800962a:	4680      	mov	r8, r0
 800962c:	4689      	mov	r9, r1
 800962e:	bb23      	cbnz	r3, 800967a <_strtod_l+0xb9a>
 8009630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009634:	9010      	str	r0, [sp, #64]	; 0x40
 8009636:	9311      	str	r3, [sp, #68]	; 0x44
 8009638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800963c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009644:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009648:	1a9b      	subs	r3, r3, r2
 800964a:	9309      	str	r3, [sp, #36]	; 0x24
 800964c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009650:	eeb0 0a48 	vmov.f32	s0, s16
 8009654:	eef0 0a68 	vmov.f32	s1, s17
 8009658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800965c:	f001 fe5c 	bl	800b318 <__ulp>
 8009660:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009664:	ec53 2b10 	vmov	r2, r3, d0
 8009668:	f7f6 ffce 	bl	8000608 <__aeabi_dmul>
 800966c:	ec53 2b18 	vmov	r2, r3, d8
 8009670:	f7f6 fe14 	bl	800029c <__adddf3>
 8009674:	4682      	mov	sl, r0
 8009676:	468b      	mov	fp, r1
 8009678:	e78d      	b.n	8009596 <_strtod_l+0xab6>
 800967a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800967e:	e7db      	b.n	8009638 <_strtod_l+0xb58>
 8009680:	a311      	add	r3, pc, #68	; (adr r3, 80096c8 <_strtod_l+0xbe8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f7 fa31 	bl	8000aec <__aeabi_dcmplt>
 800968a:	e7b2      	b.n	80095f2 <_strtod_l+0xb12>
 800968c:	2300      	movs	r3, #0
 800968e:	930a      	str	r3, [sp, #40]	; 0x28
 8009690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	f7ff ba6b 	b.w	8008b70 <_strtod_l+0x90>
 800969a:	2a65      	cmp	r2, #101	; 0x65
 800969c:	f43f ab5f 	beq.w	8008d5e <_strtod_l+0x27e>
 80096a0:	2a45      	cmp	r2, #69	; 0x45
 80096a2:	f43f ab5c 	beq.w	8008d5e <_strtod_l+0x27e>
 80096a6:	2301      	movs	r3, #1
 80096a8:	f7ff bb94 	b.w	8008dd4 <_strtod_l+0x2f4>
 80096ac:	f3af 8000 	nop.w
 80096b0:	94a03595 	.word	0x94a03595
 80096b4:	3fdfffff 	.word	0x3fdfffff
 80096b8:	35afe535 	.word	0x35afe535
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	ffc00000 	.word	0xffc00000
 80096c4:	41dfffff 	.word	0x41dfffff
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fcfffff 	.word	0x3fcfffff
 80096d0:	3ff00000 	.word	0x3ff00000
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	7fe00000 	.word	0x7fe00000
 80096dc:	7c9fffff 	.word	0x7c9fffff
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	bff00000 	.word	0xbff00000
 80096e8:	7fefffff 	.word	0x7fefffff

080096ec <_strtod_r>:
 80096ec:	4b01      	ldr	r3, [pc, #4]	; (80096f4 <_strtod_r+0x8>)
 80096ee:	f7ff b9f7 	b.w	8008ae0 <_strtod_l>
 80096f2:	bf00      	nop
 80096f4:	20000164 	.word	0x20000164

080096f8 <_strtol_l.constprop.0>:
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fe:	d001      	beq.n	8009704 <_strtol_l.constprop.0+0xc>
 8009700:	2b24      	cmp	r3, #36	; 0x24
 8009702:	d906      	bls.n	8009712 <_strtol_l.constprop.0+0x1a>
 8009704:	f7fe fa04 	bl	8007b10 <__errno>
 8009708:	2316      	movs	r3, #22
 800970a:	6003      	str	r3, [r0, #0]
 800970c:	2000      	movs	r0, #0
 800970e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009712:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097f8 <_strtol_l.constprop.0+0x100>
 8009716:	460d      	mov	r5, r1
 8009718:	462e      	mov	r6, r5
 800971a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800971e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009722:	f017 0708 	ands.w	r7, r7, #8
 8009726:	d1f7      	bne.n	8009718 <_strtol_l.constprop.0+0x20>
 8009728:	2c2d      	cmp	r4, #45	; 0x2d
 800972a:	d132      	bne.n	8009792 <_strtol_l.constprop.0+0x9a>
 800972c:	782c      	ldrb	r4, [r5, #0]
 800972e:	2701      	movs	r7, #1
 8009730:	1cb5      	adds	r5, r6, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05b      	beq.n	80097ee <_strtol_l.constprop.0+0xf6>
 8009736:	2b10      	cmp	r3, #16
 8009738:	d109      	bne.n	800974e <_strtol_l.constprop.0+0x56>
 800973a:	2c30      	cmp	r4, #48	; 0x30
 800973c:	d107      	bne.n	800974e <_strtol_l.constprop.0+0x56>
 800973e:	782c      	ldrb	r4, [r5, #0]
 8009740:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009744:	2c58      	cmp	r4, #88	; 0x58
 8009746:	d14d      	bne.n	80097e4 <_strtol_l.constprop.0+0xec>
 8009748:	786c      	ldrb	r4, [r5, #1]
 800974a:	2310      	movs	r3, #16
 800974c:	3502      	adds	r5, #2
 800974e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009752:	f108 38ff 	add.w	r8, r8, #4294967295
 8009756:	f04f 0c00 	mov.w	ip, #0
 800975a:	fbb8 f9f3 	udiv	r9, r8, r3
 800975e:	4666      	mov	r6, ip
 8009760:	fb03 8a19 	mls	sl, r3, r9, r8
 8009764:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009768:	f1be 0f09 	cmp.w	lr, #9
 800976c:	d816      	bhi.n	800979c <_strtol_l.constprop.0+0xa4>
 800976e:	4674      	mov	r4, lr
 8009770:	42a3      	cmp	r3, r4
 8009772:	dd24      	ble.n	80097be <_strtol_l.constprop.0+0xc6>
 8009774:	f1bc 0f00 	cmp.w	ip, #0
 8009778:	db1e      	blt.n	80097b8 <_strtol_l.constprop.0+0xc0>
 800977a:	45b1      	cmp	r9, r6
 800977c:	d31c      	bcc.n	80097b8 <_strtol_l.constprop.0+0xc0>
 800977e:	d101      	bne.n	8009784 <_strtol_l.constprop.0+0x8c>
 8009780:	45a2      	cmp	sl, r4
 8009782:	db19      	blt.n	80097b8 <_strtol_l.constprop.0+0xc0>
 8009784:	fb06 4603 	mla	r6, r6, r3, r4
 8009788:	f04f 0c01 	mov.w	ip, #1
 800978c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009790:	e7e8      	b.n	8009764 <_strtol_l.constprop.0+0x6c>
 8009792:	2c2b      	cmp	r4, #43	; 0x2b
 8009794:	bf04      	itt	eq
 8009796:	782c      	ldrbeq	r4, [r5, #0]
 8009798:	1cb5      	addeq	r5, r6, #2
 800979a:	e7ca      	b.n	8009732 <_strtol_l.constprop.0+0x3a>
 800979c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097a0:	f1be 0f19 	cmp.w	lr, #25
 80097a4:	d801      	bhi.n	80097aa <_strtol_l.constprop.0+0xb2>
 80097a6:	3c37      	subs	r4, #55	; 0x37
 80097a8:	e7e2      	b.n	8009770 <_strtol_l.constprop.0+0x78>
 80097aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097ae:	f1be 0f19 	cmp.w	lr, #25
 80097b2:	d804      	bhi.n	80097be <_strtol_l.constprop.0+0xc6>
 80097b4:	3c57      	subs	r4, #87	; 0x57
 80097b6:	e7db      	b.n	8009770 <_strtol_l.constprop.0+0x78>
 80097b8:	f04f 3cff 	mov.w	ip, #4294967295
 80097bc:	e7e6      	b.n	800978c <_strtol_l.constprop.0+0x94>
 80097be:	f1bc 0f00 	cmp.w	ip, #0
 80097c2:	da05      	bge.n	80097d0 <_strtol_l.constprop.0+0xd8>
 80097c4:	2322      	movs	r3, #34	; 0x22
 80097c6:	6003      	str	r3, [r0, #0]
 80097c8:	4646      	mov	r6, r8
 80097ca:	b942      	cbnz	r2, 80097de <_strtol_l.constprop.0+0xe6>
 80097cc:	4630      	mov	r0, r6
 80097ce:	e79e      	b.n	800970e <_strtol_l.constprop.0+0x16>
 80097d0:	b107      	cbz	r7, 80097d4 <_strtol_l.constprop.0+0xdc>
 80097d2:	4276      	negs	r6, r6
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d0f9      	beq.n	80097cc <_strtol_l.constprop.0+0xd4>
 80097d8:	f1bc 0f00 	cmp.w	ip, #0
 80097dc:	d000      	beq.n	80097e0 <_strtol_l.constprop.0+0xe8>
 80097de:	1e69      	subs	r1, r5, #1
 80097e0:	6011      	str	r1, [r2, #0]
 80097e2:	e7f3      	b.n	80097cc <_strtol_l.constprop.0+0xd4>
 80097e4:	2430      	movs	r4, #48	; 0x30
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1b1      	bne.n	800974e <_strtol_l.constprop.0+0x56>
 80097ea:	2308      	movs	r3, #8
 80097ec:	e7af      	b.n	800974e <_strtol_l.constprop.0+0x56>
 80097ee:	2c30      	cmp	r4, #48	; 0x30
 80097f0:	d0a5      	beq.n	800973e <_strtol_l.constprop.0+0x46>
 80097f2:	230a      	movs	r3, #10
 80097f4:	e7ab      	b.n	800974e <_strtol_l.constprop.0+0x56>
 80097f6:	bf00      	nop
 80097f8:	0800c561 	.word	0x0800c561

080097fc <_strtol_r>:
 80097fc:	f7ff bf7c 	b.w	80096f8 <_strtol_l.constprop.0>

08009800 <quorem>:
 8009800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	6903      	ldr	r3, [r0, #16]
 8009806:	690c      	ldr	r4, [r1, #16]
 8009808:	42a3      	cmp	r3, r4
 800980a:	4607      	mov	r7, r0
 800980c:	f2c0 8081 	blt.w	8009912 <quorem+0x112>
 8009810:	3c01      	subs	r4, #1
 8009812:	f101 0814 	add.w	r8, r1, #20
 8009816:	f100 0514 	add.w	r5, r0, #20
 800981a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009828:	3301      	adds	r3, #1
 800982a:	429a      	cmp	r2, r3
 800982c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009834:	fbb2 f6f3 	udiv	r6, r2, r3
 8009838:	d331      	bcc.n	800989e <quorem+0x9e>
 800983a:	f04f 0e00 	mov.w	lr, #0
 800983e:	4640      	mov	r0, r8
 8009840:	46ac      	mov	ip, r5
 8009842:	46f2      	mov	sl, lr
 8009844:	f850 2b04 	ldr.w	r2, [r0], #4
 8009848:	b293      	uxth	r3, r2
 800984a:	fb06 e303 	mla	r3, r6, r3, lr
 800984e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009852:	b29b      	uxth	r3, r3
 8009854:	ebaa 0303 	sub.w	r3, sl, r3
 8009858:	f8dc a000 	ldr.w	sl, [ip]
 800985c:	0c12      	lsrs	r2, r2, #16
 800985e:	fa13 f38a 	uxtah	r3, r3, sl
 8009862:	fb06 e202 	mla	r2, r6, r2, lr
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	9b00      	ldr	r3, [sp, #0]
 800986a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800986e:	b292      	uxth	r2, r2
 8009870:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009878:	f8bd 3000 	ldrh.w	r3, [sp]
 800987c:	4581      	cmp	r9, r0
 800987e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009882:	f84c 3b04 	str.w	r3, [ip], #4
 8009886:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800988a:	d2db      	bcs.n	8009844 <quorem+0x44>
 800988c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009890:	b92b      	cbnz	r3, 800989e <quorem+0x9e>
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	3b04      	subs	r3, #4
 8009896:	429d      	cmp	r5, r3
 8009898:	461a      	mov	r2, r3
 800989a:	d32e      	bcc.n	80098fa <quorem+0xfa>
 800989c:	613c      	str	r4, [r7, #16]
 800989e:	4638      	mov	r0, r7
 80098a0:	f001 fc94 	bl	800b1cc <__mcmp>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	db24      	blt.n	80098f2 <quorem+0xf2>
 80098a8:	3601      	adds	r6, #1
 80098aa:	4628      	mov	r0, r5
 80098ac:	f04f 0c00 	mov.w	ip, #0
 80098b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80098b4:	f8d0 e000 	ldr.w	lr, [r0]
 80098b8:	b293      	uxth	r3, r2
 80098ba:	ebac 0303 	sub.w	r3, ip, r3
 80098be:	0c12      	lsrs	r2, r2, #16
 80098c0:	fa13 f38e 	uxtah	r3, r3, lr
 80098c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098d2:	45c1      	cmp	r9, r8
 80098d4:	f840 3b04 	str.w	r3, [r0], #4
 80098d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098dc:	d2e8      	bcs.n	80098b0 <quorem+0xb0>
 80098de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e6:	b922      	cbnz	r2, 80098f2 <quorem+0xf2>
 80098e8:	3b04      	subs	r3, #4
 80098ea:	429d      	cmp	r5, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	d30a      	bcc.n	8009906 <quorem+0x106>
 80098f0:	613c      	str	r4, [r7, #16]
 80098f2:	4630      	mov	r0, r6
 80098f4:	b003      	add	sp, #12
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	3b04      	subs	r3, #4
 80098fe:	2a00      	cmp	r2, #0
 8009900:	d1cc      	bne.n	800989c <quorem+0x9c>
 8009902:	3c01      	subs	r4, #1
 8009904:	e7c7      	b.n	8009896 <quorem+0x96>
 8009906:	6812      	ldr	r2, [r2, #0]
 8009908:	3b04      	subs	r3, #4
 800990a:	2a00      	cmp	r2, #0
 800990c:	d1f0      	bne.n	80098f0 <quorem+0xf0>
 800990e:	3c01      	subs	r4, #1
 8009910:	e7eb      	b.n	80098ea <quorem+0xea>
 8009912:	2000      	movs	r0, #0
 8009914:	e7ee      	b.n	80098f4 <quorem+0xf4>
	...

08009918 <_dtoa_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	ed2d 8b04 	vpush	{d8-d9}
 8009920:	ec57 6b10 	vmov	r6, r7, d0
 8009924:	b093      	sub	sp, #76	; 0x4c
 8009926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800992c:	9106      	str	r1, [sp, #24]
 800992e:	ee10 aa10 	vmov	sl, s0
 8009932:	4604      	mov	r4, r0
 8009934:	9209      	str	r2, [sp, #36]	; 0x24
 8009936:	930c      	str	r3, [sp, #48]	; 0x30
 8009938:	46bb      	mov	fp, r7
 800993a:	b975      	cbnz	r5, 800995a <_dtoa_r+0x42>
 800993c:	2010      	movs	r0, #16
 800993e:	f7fe f911 	bl	8007b64 <malloc>
 8009942:	4602      	mov	r2, r0
 8009944:	6260      	str	r0, [r4, #36]	; 0x24
 8009946:	b920      	cbnz	r0, 8009952 <_dtoa_r+0x3a>
 8009948:	4ba7      	ldr	r3, [pc, #668]	; (8009be8 <_dtoa_r+0x2d0>)
 800994a:	21ea      	movs	r1, #234	; 0xea
 800994c:	48a7      	ldr	r0, [pc, #668]	; (8009bec <_dtoa_r+0x2d4>)
 800994e:	f001 ffcd 	bl	800b8ec <__assert_func>
 8009952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009956:	6005      	str	r5, [r0, #0]
 8009958:	60c5      	str	r5, [r0, #12]
 800995a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800995c:	6819      	ldr	r1, [r3, #0]
 800995e:	b151      	cbz	r1, 8009976 <_dtoa_r+0x5e>
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	604a      	str	r2, [r1, #4]
 8009964:	2301      	movs	r3, #1
 8009966:	4093      	lsls	r3, r2
 8009968:	608b      	str	r3, [r1, #8]
 800996a:	4620      	mov	r0, r4
 800996c:	f001 f9a2 	bl	800acb4 <_Bfree>
 8009970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	1e3b      	subs	r3, r7, #0
 8009978:	bfaa      	itet	ge
 800997a:	2300      	movge	r3, #0
 800997c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009980:	f8c8 3000 	strge.w	r3, [r8]
 8009984:	4b9a      	ldr	r3, [pc, #616]	; (8009bf0 <_dtoa_r+0x2d8>)
 8009986:	bfbc      	itt	lt
 8009988:	2201      	movlt	r2, #1
 800998a:	f8c8 2000 	strlt.w	r2, [r8]
 800998e:	ea33 030b 	bics.w	r3, r3, fp
 8009992:	d11b      	bne.n	80099cc <_dtoa_r+0xb4>
 8009994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009996:	f242 730f 	movw	r3, #9999	; 0x270f
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099a0:	4333      	orrs	r3, r6
 80099a2:	f000 8592 	beq.w	800a4ca <_dtoa_r+0xbb2>
 80099a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099a8:	b963      	cbnz	r3, 80099c4 <_dtoa_r+0xac>
 80099aa:	4b92      	ldr	r3, [pc, #584]	; (8009bf4 <_dtoa_r+0x2dc>)
 80099ac:	e022      	b.n	80099f4 <_dtoa_r+0xdc>
 80099ae:	4b92      	ldr	r3, [pc, #584]	; (8009bf8 <_dtoa_r+0x2e0>)
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	3308      	adds	r3, #8
 80099b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	9801      	ldr	r0, [sp, #4]
 80099ba:	b013      	add	sp, #76	; 0x4c
 80099bc:	ecbd 8b04 	vpop	{d8-d9}
 80099c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c4:	4b8b      	ldr	r3, [pc, #556]	; (8009bf4 <_dtoa_r+0x2dc>)
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	3303      	adds	r3, #3
 80099ca:	e7f3      	b.n	80099b4 <_dtoa_r+0x9c>
 80099cc:	2200      	movs	r2, #0
 80099ce:	2300      	movs	r3, #0
 80099d0:	4650      	mov	r0, sl
 80099d2:	4659      	mov	r1, fp
 80099d4:	f7f7 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80099d8:	ec4b ab19 	vmov	d9, sl, fp
 80099dc:	4680      	mov	r8, r0
 80099de:	b158      	cbz	r0, 80099f8 <_dtoa_r+0xe0>
 80099e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099e2:	2301      	movs	r3, #1
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 856b 	beq.w	800a4c4 <_dtoa_r+0xbac>
 80099ee:	4883      	ldr	r0, [pc, #524]	; (8009bfc <_dtoa_r+0x2e4>)
 80099f0:	6018      	str	r0, [r3, #0]
 80099f2:	1e43      	subs	r3, r0, #1
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	e7df      	b.n	80099b8 <_dtoa_r+0xa0>
 80099f8:	ec4b ab10 	vmov	d0, sl, fp
 80099fc:	aa10      	add	r2, sp, #64	; 0x40
 80099fe:	a911      	add	r1, sp, #68	; 0x44
 8009a00:	4620      	mov	r0, r4
 8009a02:	f001 fd05 	bl	800b410 <__d2b>
 8009a06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a0a:	ee08 0a10 	vmov	s16, r0
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	f000 8084 	beq.w	8009b1c <_dtoa_r+0x204>
 8009a14:	ee19 3a90 	vmov	r3, s19
 8009a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a20:	4656      	mov	r6, sl
 8009a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a2e:	4b74      	ldr	r3, [pc, #464]	; (8009c00 <_dtoa_r+0x2e8>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	4630      	mov	r0, r6
 8009a34:	4639      	mov	r1, r7
 8009a36:	f7f6 fc2f 	bl	8000298 <__aeabi_dsub>
 8009a3a:	a365      	add	r3, pc, #404	; (adr r3, 8009bd0 <_dtoa_r+0x2b8>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fde2 	bl	8000608 <__aeabi_dmul>
 8009a44:	a364      	add	r3, pc, #400	; (adr r3, 8009bd8 <_dtoa_r+0x2c0>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f7f6 fc27 	bl	800029c <__adddf3>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	4628      	mov	r0, r5
 8009a52:	460f      	mov	r7, r1
 8009a54:	f7f6 fd6e 	bl	8000534 <__aeabi_i2d>
 8009a58:	a361      	add	r3, pc, #388	; (adr r3, 8009be0 <_dtoa_r+0x2c8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fdd3 	bl	8000608 <__aeabi_dmul>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4630      	mov	r0, r6
 8009a68:	4639      	mov	r1, r7
 8009a6a:	f7f6 fc17 	bl	800029c <__adddf3>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	f7f7 f879 	bl	8000b68 <__aeabi_d2iz>
 8009a76:	2200      	movs	r2, #0
 8009a78:	9000      	str	r0, [sp, #0]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4639      	mov	r1, r7
 8009a80:	f7f7 f834 	bl	8000aec <__aeabi_dcmplt>
 8009a84:	b150      	cbz	r0, 8009a9c <_dtoa_r+0x184>
 8009a86:	9800      	ldr	r0, [sp, #0]
 8009a88:	f7f6 fd54 	bl	8000534 <__aeabi_i2d>
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	463b      	mov	r3, r7
 8009a90:	f7f7 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a94:	b910      	cbnz	r0, 8009a9c <_dtoa_r+0x184>
 8009a96:	9b00      	ldr	r3, [sp, #0]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	9b00      	ldr	r3, [sp, #0]
 8009a9e:	2b16      	cmp	r3, #22
 8009aa0:	d85a      	bhi.n	8009b58 <_dtoa_r+0x240>
 8009aa2:	9a00      	ldr	r2, [sp, #0]
 8009aa4:	4b57      	ldr	r3, [pc, #348]	; (8009c04 <_dtoa_r+0x2ec>)
 8009aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	ec51 0b19 	vmov	r0, r1, d9
 8009ab2:	f7f7 f81b 	bl	8000aec <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d050      	beq.n	8009b5c <_dtoa_r+0x244>
 8009aba:	9b00      	ldr	r3, [sp, #0]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ac6:	1b5d      	subs	r5, r3, r5
 8009ac8:	1e6b      	subs	r3, r5, #1
 8009aca:	9305      	str	r3, [sp, #20]
 8009acc:	bf45      	ittet	mi
 8009ace:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ad2:	9304      	strmi	r3, [sp, #16]
 8009ad4:	2300      	movpl	r3, #0
 8009ad6:	2300      	movmi	r3, #0
 8009ad8:	bf4c      	ite	mi
 8009ada:	9305      	strmi	r3, [sp, #20]
 8009adc:	9304      	strpl	r3, [sp, #16]
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	db3d      	blt.n	8009b60 <_dtoa_r+0x248>
 8009ae4:	9b05      	ldr	r3, [sp, #20]
 8009ae6:	9a00      	ldr	r2, [sp, #0]
 8009ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8009aea:	4413      	add	r3, r2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	2300      	movs	r3, #0
 8009af0:	9307      	str	r3, [sp, #28]
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	f200 8089 	bhi.w	8009c0c <_dtoa_r+0x2f4>
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	bfc4      	itt	gt
 8009afe:	3b04      	subgt	r3, #4
 8009b00:	9306      	strgt	r3, [sp, #24]
 8009b02:	9b06      	ldr	r3, [sp, #24]
 8009b04:	f1a3 0302 	sub.w	r3, r3, #2
 8009b08:	bfcc      	ite	gt
 8009b0a:	2500      	movgt	r5, #0
 8009b0c:	2501      	movle	r5, #1
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	f200 8087 	bhi.w	8009c22 <_dtoa_r+0x30a>
 8009b14:	e8df f003 	tbb	[pc, r3]
 8009b18:	59383a2d 	.word	0x59383a2d
 8009b1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b20:	441d      	add	r5, r3
 8009b22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	bfc1      	itttt	gt
 8009b2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b32:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b3a:	bfda      	itte	le
 8009b3c:	f1c3 0320 	rsble	r3, r3, #32
 8009b40:	fa06 f003 	lslle.w	r0, r6, r3
 8009b44:	4318      	orrgt	r0, r3
 8009b46:	f7f6 fce5 	bl	8000514 <__aeabi_ui2d>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b52:	3d01      	subs	r5, #1
 8009b54:	930e      	str	r3, [sp, #56]	; 0x38
 8009b56:	e76a      	b.n	8009a2e <_dtoa_r+0x116>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e7b2      	b.n	8009ac2 <_dtoa_r+0x1aa>
 8009b5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b5e:	e7b1      	b.n	8009ac4 <_dtoa_r+0x1ac>
 8009b60:	9b04      	ldr	r3, [sp, #16]
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	4253      	negs	r3, r2
 8009b6a:	9307      	str	r3, [sp, #28]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b70:	e7bf      	b.n	8009af2 <_dtoa_r+0x1da>
 8009b72:	2300      	movs	r3, #0
 8009b74:	9308      	str	r3, [sp, #32]
 8009b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	dc55      	bgt.n	8009c28 <_dtoa_r+0x310>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b82:	461a      	mov	r2, r3
 8009b84:	9209      	str	r2, [sp, #36]	; 0x24
 8009b86:	e00c      	b.n	8009ba2 <_dtoa_r+0x28a>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e7f3      	b.n	8009b74 <_dtoa_r+0x25c>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b90:	9308      	str	r3, [sp, #32]
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	4413      	add	r3, r2
 8009b96:	9302      	str	r3, [sp, #8]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	9303      	str	r3, [sp, #12]
 8009b9e:	bfb8      	it	lt
 8009ba0:	2301      	movlt	r3, #1
 8009ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	6042      	str	r2, [r0, #4]
 8009ba8:	2204      	movs	r2, #4
 8009baa:	f102 0614 	add.w	r6, r2, #20
 8009bae:	429e      	cmp	r6, r3
 8009bb0:	6841      	ldr	r1, [r0, #4]
 8009bb2:	d93d      	bls.n	8009c30 <_dtoa_r+0x318>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f001 f83d 	bl	800ac34 <_Balloc>
 8009bba:	9001      	str	r0, [sp, #4]
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d13b      	bne.n	8009c38 <_dtoa_r+0x320>
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <_dtoa_r+0x2f0>)
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bc8:	e6c0      	b.n	800994c <_dtoa_r+0x34>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e7df      	b.n	8009b8e <_dtoa_r+0x276>
 8009bce:	bf00      	nop
 8009bd0:	636f4361 	.word	0x636f4361
 8009bd4:	3fd287a7 	.word	0x3fd287a7
 8009bd8:	8b60c8b3 	.word	0x8b60c8b3
 8009bdc:	3fc68a28 	.word	0x3fc68a28
 8009be0:	509f79fb 	.word	0x509f79fb
 8009be4:	3fd34413 	.word	0x3fd34413
 8009be8:	0800c66e 	.word	0x0800c66e
 8009bec:	0800c685 	.word	0x0800c685
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	0800c66a 	.word	0x0800c66a
 8009bf8:	0800c661 	.word	0x0800c661
 8009bfc:	0800c4e5 	.word	0x0800c4e5
 8009c00:	3ff80000 	.word	0x3ff80000
 8009c04:	0800c7f0 	.word	0x0800c7f0
 8009c08:	0800c6e0 	.word	0x0800c6e0
 8009c0c:	2501      	movs	r5, #1
 8009c0e:	2300      	movs	r3, #0
 8009c10:	9306      	str	r3, [sp, #24]
 8009c12:	9508      	str	r5, [sp, #32]
 8009c14:	f04f 33ff 	mov.w	r3, #4294967295
 8009c18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2312      	movs	r3, #18
 8009c20:	e7b0      	b.n	8009b84 <_dtoa_r+0x26c>
 8009c22:	2301      	movs	r3, #1
 8009c24:	9308      	str	r3, [sp, #32]
 8009c26:	e7f5      	b.n	8009c14 <_dtoa_r+0x2fc>
 8009c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c2e:	e7b8      	b.n	8009ba2 <_dtoa_r+0x28a>
 8009c30:	3101      	adds	r1, #1
 8009c32:	6041      	str	r1, [r0, #4]
 8009c34:	0052      	lsls	r2, r2, #1
 8009c36:	e7b8      	b.n	8009baa <_dtoa_r+0x292>
 8009c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c3a:	9a01      	ldr	r2, [sp, #4]
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	9b03      	ldr	r3, [sp, #12]
 8009c40:	2b0e      	cmp	r3, #14
 8009c42:	f200 809d 	bhi.w	8009d80 <_dtoa_r+0x468>
 8009c46:	2d00      	cmp	r5, #0
 8009c48:	f000 809a 	beq.w	8009d80 <_dtoa_r+0x468>
 8009c4c:	9b00      	ldr	r3, [sp, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dd32      	ble.n	8009cb8 <_dtoa_r+0x3a0>
 8009c52:	4ab7      	ldr	r2, [pc, #732]	; (8009f30 <_dtoa_r+0x618>)
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	05d8      	lsls	r0, r3, #23
 8009c64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009c68:	d516      	bpl.n	8009c98 <_dtoa_r+0x380>
 8009c6a:	4bb2      	ldr	r3, [pc, #712]	; (8009f34 <_dtoa_r+0x61c>)
 8009c6c:	ec51 0b19 	vmov	r0, r1, d9
 8009c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c74:	f7f6 fdf2 	bl	800085c <__aeabi_ddiv>
 8009c78:	f007 070f 	and.w	r7, r7, #15
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	468b      	mov	fp, r1
 8009c80:	2503      	movs	r5, #3
 8009c82:	4eac      	ldr	r6, [pc, #688]	; (8009f34 <_dtoa_r+0x61c>)
 8009c84:	b957      	cbnz	r7, 8009c9c <_dtoa_r+0x384>
 8009c86:	4642      	mov	r2, r8
 8009c88:	464b      	mov	r3, r9
 8009c8a:	4650      	mov	r0, sl
 8009c8c:	4659      	mov	r1, fp
 8009c8e:	f7f6 fde5 	bl	800085c <__aeabi_ddiv>
 8009c92:	4682      	mov	sl, r0
 8009c94:	468b      	mov	fp, r1
 8009c96:	e028      	b.n	8009cea <_dtoa_r+0x3d2>
 8009c98:	2502      	movs	r5, #2
 8009c9a:	e7f2      	b.n	8009c82 <_dtoa_r+0x36a>
 8009c9c:	07f9      	lsls	r1, r7, #31
 8009c9e:	d508      	bpl.n	8009cb2 <_dtoa_r+0x39a>
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ca8:	f7f6 fcae 	bl	8000608 <__aeabi_dmul>
 8009cac:	3501      	adds	r5, #1
 8009cae:	4680      	mov	r8, r0
 8009cb0:	4689      	mov	r9, r1
 8009cb2:	107f      	asrs	r7, r7, #1
 8009cb4:	3608      	adds	r6, #8
 8009cb6:	e7e5      	b.n	8009c84 <_dtoa_r+0x36c>
 8009cb8:	f000 809b 	beq.w	8009df2 <_dtoa_r+0x4da>
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	4f9d      	ldr	r7, [pc, #628]	; (8009f34 <_dtoa_r+0x61c>)
 8009cc0:	425e      	negs	r6, r3
 8009cc2:	4b9b      	ldr	r3, [pc, #620]	; (8009f30 <_dtoa_r+0x618>)
 8009cc4:	f006 020f 	and.w	r2, r6, #15
 8009cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	ec51 0b19 	vmov	r0, r1, d9
 8009cd4:	f7f6 fc98 	bl	8000608 <__aeabi_dmul>
 8009cd8:	1136      	asrs	r6, r6, #4
 8009cda:	4682      	mov	sl, r0
 8009cdc:	468b      	mov	fp, r1
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2502      	movs	r5, #2
 8009ce2:	2e00      	cmp	r6, #0
 8009ce4:	d17a      	bne.n	8009ddc <_dtoa_r+0x4c4>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1d3      	bne.n	8009c92 <_dtoa_r+0x37a>
 8009cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 8082 	beq.w	8009df6 <_dtoa_r+0x4de>
 8009cf2:	4b91      	ldr	r3, [pc, #580]	; (8009f38 <_dtoa_r+0x620>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4650      	mov	r0, sl
 8009cf8:	4659      	mov	r1, fp
 8009cfa:	f7f6 fef7 	bl	8000aec <__aeabi_dcmplt>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d079      	beq.n	8009df6 <_dtoa_r+0x4de>
 8009d02:	9b03      	ldr	r3, [sp, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d076      	beq.n	8009df6 <_dtoa_r+0x4de>
 8009d08:	9b02      	ldr	r3, [sp, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dd36      	ble.n	8009d7c <_dtoa_r+0x464>
 8009d0e:	9b00      	ldr	r3, [sp, #0]
 8009d10:	4650      	mov	r0, sl
 8009d12:	4659      	mov	r1, fp
 8009d14:	1e5f      	subs	r7, r3, #1
 8009d16:	2200      	movs	r2, #0
 8009d18:	4b88      	ldr	r3, [pc, #544]	; (8009f3c <_dtoa_r+0x624>)
 8009d1a:	f7f6 fc75 	bl	8000608 <__aeabi_dmul>
 8009d1e:	9e02      	ldr	r6, [sp, #8]
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	3501      	adds	r5, #1
 8009d26:	4628      	mov	r0, r5
 8009d28:	f7f6 fc04 	bl	8000534 <__aeabi_i2d>
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	465b      	mov	r3, fp
 8009d30:	f7f6 fc6a 	bl	8000608 <__aeabi_dmul>
 8009d34:	4b82      	ldr	r3, [pc, #520]	; (8009f40 <_dtoa_r+0x628>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	f7f6 fab0 	bl	800029c <__adddf3>
 8009d3c:	46d0      	mov	r8, sl
 8009d3e:	46d9      	mov	r9, fp
 8009d40:	4682      	mov	sl, r0
 8009d42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d158      	bne.n	8009dfc <_dtoa_r+0x4e4>
 8009d4a:	4b7e      	ldr	r3, [pc, #504]	; (8009f44 <_dtoa_r+0x62c>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4640      	mov	r0, r8
 8009d50:	4649      	mov	r1, r9
 8009d52:	f7f6 faa1 	bl	8000298 <__aeabi_dsub>
 8009d56:	4652      	mov	r2, sl
 8009d58:	465b      	mov	r3, fp
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	4689      	mov	r9, r1
 8009d5e:	f7f6 fee3 	bl	8000b28 <__aeabi_dcmpgt>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	f040 8295 	bne.w	800a292 <_dtoa_r+0x97a>
 8009d68:	4652      	mov	r2, sl
 8009d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 febb 	bl	8000aec <__aeabi_dcmplt>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f040 8289 	bne.w	800a28e <_dtoa_r+0x976>
 8009d7c:	ec5b ab19 	vmov	sl, fp, d9
 8009d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f2c0 8148 	blt.w	800a018 <_dtoa_r+0x700>
 8009d88:	9a00      	ldr	r2, [sp, #0]
 8009d8a:	2a0e      	cmp	r2, #14
 8009d8c:	f300 8144 	bgt.w	800a018 <_dtoa_r+0x700>
 8009d90:	4b67      	ldr	r3, [pc, #412]	; (8009f30 <_dtoa_r+0x618>)
 8009d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f280 80d5 	bge.w	8009f4c <_dtoa_r+0x634>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f300 80d1 	bgt.w	8009f4c <_dtoa_r+0x634>
 8009daa:	f040 826f 	bne.w	800a28c <_dtoa_r+0x974>
 8009dae:	4b65      	ldr	r3, [pc, #404]	; (8009f44 <_dtoa_r+0x62c>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	4640      	mov	r0, r8
 8009db4:	4649      	mov	r1, r9
 8009db6:	f7f6 fc27 	bl	8000608 <__aeabi_dmul>
 8009dba:	4652      	mov	r2, sl
 8009dbc:	465b      	mov	r3, fp
 8009dbe:	f7f6 fea9 	bl	8000b14 <__aeabi_dcmpge>
 8009dc2:	9e03      	ldr	r6, [sp, #12]
 8009dc4:	4637      	mov	r7, r6
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f040 8245 	bne.w	800a256 <_dtoa_r+0x93e>
 8009dcc:	9d01      	ldr	r5, [sp, #4]
 8009dce:	2331      	movs	r3, #49	; 0x31
 8009dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8009dd4:	9b00      	ldr	r3, [sp, #0]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	e240      	b.n	800a25e <_dtoa_r+0x946>
 8009ddc:	07f2      	lsls	r2, r6, #31
 8009dde:	d505      	bpl.n	8009dec <_dtoa_r+0x4d4>
 8009de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de4:	f7f6 fc10 	bl	8000608 <__aeabi_dmul>
 8009de8:	3501      	adds	r5, #1
 8009dea:	2301      	movs	r3, #1
 8009dec:	1076      	asrs	r6, r6, #1
 8009dee:	3708      	adds	r7, #8
 8009df0:	e777      	b.n	8009ce2 <_dtoa_r+0x3ca>
 8009df2:	2502      	movs	r5, #2
 8009df4:	e779      	b.n	8009cea <_dtoa_r+0x3d2>
 8009df6:	9f00      	ldr	r7, [sp, #0]
 8009df8:	9e03      	ldr	r6, [sp, #12]
 8009dfa:	e794      	b.n	8009d26 <_dtoa_r+0x40e>
 8009dfc:	9901      	ldr	r1, [sp, #4]
 8009dfe:	4b4c      	ldr	r3, [pc, #304]	; (8009f30 <_dtoa_r+0x618>)
 8009e00:	4431      	add	r1, r6
 8009e02:	910d      	str	r1, [sp, #52]	; 0x34
 8009e04:	9908      	ldr	r1, [sp, #32]
 8009e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	d043      	beq.n	8009e9a <_dtoa_r+0x582>
 8009e12:	494d      	ldr	r1, [pc, #308]	; (8009f48 <_dtoa_r+0x630>)
 8009e14:	2000      	movs	r0, #0
 8009e16:	f7f6 fd21 	bl	800085c <__aeabi_ddiv>
 8009e1a:	4652      	mov	r2, sl
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	f7f6 fa3b 	bl	8000298 <__aeabi_dsub>
 8009e22:	9d01      	ldr	r5, [sp, #4]
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	4649      	mov	r1, r9
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	f7f6 fe9c 	bl	8000b68 <__aeabi_d2iz>
 8009e30:	4606      	mov	r6, r0
 8009e32:	f7f6 fb7f 	bl	8000534 <__aeabi_i2d>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	f7f6 fa2b 	bl	8000298 <__aeabi_dsub>
 8009e42:	3630      	adds	r6, #48	; 0x30
 8009e44:	f805 6b01 	strb.w	r6, [r5], #1
 8009e48:	4652      	mov	r2, sl
 8009e4a:	465b      	mov	r3, fp
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	4689      	mov	r9, r1
 8009e50:	f7f6 fe4c 	bl	8000aec <__aeabi_dcmplt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d163      	bne.n	8009f20 <_dtoa_r+0x608>
 8009e58:	4642      	mov	r2, r8
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	4936      	ldr	r1, [pc, #216]	; (8009f38 <_dtoa_r+0x620>)
 8009e5e:	2000      	movs	r0, #0
 8009e60:	f7f6 fa1a 	bl	8000298 <__aeabi_dsub>
 8009e64:	4652      	mov	r2, sl
 8009e66:	465b      	mov	r3, fp
 8009e68:	f7f6 fe40 	bl	8000aec <__aeabi_dcmplt>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f040 80b5 	bne.w	8009fdc <_dtoa_r+0x6c4>
 8009e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e74:	429d      	cmp	r5, r3
 8009e76:	d081      	beq.n	8009d7c <_dtoa_r+0x464>
 8009e78:	4b30      	ldr	r3, [pc, #192]	; (8009f3c <_dtoa_r+0x624>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	4659      	mov	r1, fp
 8009e80:	f7f6 fbc2 	bl	8000608 <__aeabi_dmul>
 8009e84:	4b2d      	ldr	r3, [pc, #180]	; (8009f3c <_dtoa_r+0x624>)
 8009e86:	4682      	mov	sl, r0
 8009e88:	468b      	mov	fp, r1
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f7f6 fbba 	bl	8000608 <__aeabi_dmul>
 8009e94:	4680      	mov	r8, r0
 8009e96:	4689      	mov	r9, r1
 8009e98:	e7c6      	b.n	8009e28 <_dtoa_r+0x510>
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	4659      	mov	r1, fp
 8009e9e:	f7f6 fbb3 	bl	8000608 <__aeabi_dmul>
 8009ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ea4:	9d01      	ldr	r5, [sp, #4]
 8009ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ea8:	4682      	mov	sl, r0
 8009eaa:	468b      	mov	fp, r1
 8009eac:	4649      	mov	r1, r9
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7f6 fe5a 	bl	8000b68 <__aeabi_d2iz>
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	f7f6 fb3d 	bl	8000534 <__aeabi_i2d>
 8009eba:	3630      	adds	r6, #48	; 0x30
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	4680      	mov	r8, r0
 8009ed2:	4689      	mov	r9, r1
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	d124      	bne.n	8009f24 <_dtoa_r+0x60c>
 8009eda:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <_dtoa_r+0x630>)
 8009edc:	4650      	mov	r0, sl
 8009ede:	4659      	mov	r1, fp
 8009ee0:	f7f6 f9dc 	bl	800029c <__adddf3>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7f6 fe1c 	bl	8000b28 <__aeabi_dcmpgt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d173      	bne.n	8009fdc <_dtoa_r+0x6c4>
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	465b      	mov	r3, fp
 8009ef8:	4913      	ldr	r1, [pc, #76]	; (8009f48 <_dtoa_r+0x630>)
 8009efa:	2000      	movs	r0, #0
 8009efc:	f7f6 f9cc 	bl	8000298 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f43f af35 	beq.w	8009d7c <_dtoa_r+0x464>
 8009f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f14:	1e6b      	subs	r3, r5, #1
 8009f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f1c:	2b30      	cmp	r3, #48	; 0x30
 8009f1e:	d0f8      	beq.n	8009f12 <_dtoa_r+0x5fa>
 8009f20:	9700      	str	r7, [sp, #0]
 8009f22:	e049      	b.n	8009fb8 <_dtoa_r+0x6a0>
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <_dtoa_r+0x624>)
 8009f26:	f7f6 fb6f 	bl	8000608 <__aeabi_dmul>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	e7bd      	b.n	8009eac <_dtoa_r+0x594>
 8009f30:	0800c7f0 	.word	0x0800c7f0
 8009f34:	0800c7c8 	.word	0x0800c7c8
 8009f38:	3ff00000 	.word	0x3ff00000
 8009f3c:	40240000 	.word	0x40240000
 8009f40:	401c0000 	.word	0x401c0000
 8009f44:	40140000 	.word	0x40140000
 8009f48:	3fe00000 	.word	0x3fe00000
 8009f4c:	9d01      	ldr	r5, [sp, #4]
 8009f4e:	4656      	mov	r6, sl
 8009f50:	465f      	mov	r7, fp
 8009f52:	4642      	mov	r2, r8
 8009f54:	464b      	mov	r3, r9
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 fc7f 	bl	800085c <__aeabi_ddiv>
 8009f5e:	f7f6 fe03 	bl	8000b68 <__aeabi_d2iz>
 8009f62:	4682      	mov	sl, r0
 8009f64:	f7f6 fae6 	bl	8000534 <__aeabi_i2d>
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	f7f6 fb4c 	bl	8000608 <__aeabi_dmul>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4630      	mov	r0, r6
 8009f76:	4639      	mov	r1, r7
 8009f78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009f7c:	f7f6 f98c 	bl	8000298 <__aeabi_dsub>
 8009f80:	f805 6b01 	strb.w	r6, [r5], #1
 8009f84:	9e01      	ldr	r6, [sp, #4]
 8009f86:	9f03      	ldr	r7, [sp, #12]
 8009f88:	1bae      	subs	r6, r5, r6
 8009f8a:	42b7      	cmp	r7, r6
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	d135      	bne.n	8009ffe <_dtoa_r+0x6e6>
 8009f92:	f7f6 f983 	bl	800029c <__adddf3>
 8009f96:	4642      	mov	r2, r8
 8009f98:	464b      	mov	r3, r9
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	f7f6 fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 8009fa2:	b9d0      	cbnz	r0, 8009fda <_dtoa_r+0x6c2>
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	4630      	mov	r0, r6
 8009faa:	4639      	mov	r1, r7
 8009fac:	f7f6 fd94 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fb0:	b110      	cbz	r0, 8009fb8 <_dtoa_r+0x6a0>
 8009fb2:	f01a 0f01 	tst.w	sl, #1
 8009fb6:	d110      	bne.n	8009fda <_dtoa_r+0x6c2>
 8009fb8:	4620      	mov	r0, r4
 8009fba:	ee18 1a10 	vmov	r1, s16
 8009fbe:	f000 fe79 	bl	800acb4 <_Bfree>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9800      	ldr	r0, [sp, #0]
 8009fc6:	702b      	strb	r3, [r5, #0]
 8009fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fca:	3001      	adds	r0, #1
 8009fcc:	6018      	str	r0, [r3, #0]
 8009fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f43f acf1 	beq.w	80099b8 <_dtoa_r+0xa0>
 8009fd6:	601d      	str	r5, [r3, #0]
 8009fd8:	e4ee      	b.n	80099b8 <_dtoa_r+0xa0>
 8009fda:	9f00      	ldr	r7, [sp, #0]
 8009fdc:	462b      	mov	r3, r5
 8009fde:	461d      	mov	r5, r3
 8009fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fe4:	2a39      	cmp	r2, #57	; 0x39
 8009fe6:	d106      	bne.n	8009ff6 <_dtoa_r+0x6de>
 8009fe8:	9a01      	ldr	r2, [sp, #4]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d1f7      	bne.n	8009fde <_dtoa_r+0x6c6>
 8009fee:	9901      	ldr	r1, [sp, #4]
 8009ff0:	2230      	movs	r2, #48	; 0x30
 8009ff2:	3701      	adds	r7, #1
 8009ff4:	700a      	strb	r2, [r1, #0]
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	3201      	adds	r2, #1
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e790      	b.n	8009f20 <_dtoa_r+0x608>
 8009ffe:	4ba6      	ldr	r3, [pc, #664]	; (800a298 <_dtoa_r+0x980>)
 800a000:	2200      	movs	r2, #0
 800a002:	f7f6 fb01 	bl	8000608 <__aeabi_dmul>
 800a006:	2200      	movs	r2, #0
 800a008:	2300      	movs	r3, #0
 800a00a:	4606      	mov	r6, r0
 800a00c:	460f      	mov	r7, r1
 800a00e:	f7f6 fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 800a012:	2800      	cmp	r0, #0
 800a014:	d09d      	beq.n	8009f52 <_dtoa_r+0x63a>
 800a016:	e7cf      	b.n	8009fb8 <_dtoa_r+0x6a0>
 800a018:	9a08      	ldr	r2, [sp, #32]
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	f000 80d7 	beq.w	800a1ce <_dtoa_r+0x8b6>
 800a020:	9a06      	ldr	r2, [sp, #24]
 800a022:	2a01      	cmp	r2, #1
 800a024:	f300 80ba 	bgt.w	800a19c <_dtoa_r+0x884>
 800a028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	f000 80b2 	beq.w	800a194 <_dtoa_r+0x87c>
 800a030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a034:	9e07      	ldr	r6, [sp, #28]
 800a036:	9d04      	ldr	r5, [sp, #16]
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	441a      	add	r2, r3
 800a03c:	9204      	str	r2, [sp, #16]
 800a03e:	9a05      	ldr	r2, [sp, #20]
 800a040:	2101      	movs	r1, #1
 800a042:	441a      	add	r2, r3
 800a044:	4620      	mov	r0, r4
 800a046:	9205      	str	r2, [sp, #20]
 800a048:	f000 ff36 	bl	800aeb8 <__i2b>
 800a04c:	4607      	mov	r7, r0
 800a04e:	2d00      	cmp	r5, #0
 800a050:	dd0c      	ble.n	800a06c <_dtoa_r+0x754>
 800a052:	9b05      	ldr	r3, [sp, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	dd09      	ble.n	800a06c <_dtoa_r+0x754>
 800a058:	42ab      	cmp	r3, r5
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	bfa8      	it	ge
 800a05e:	462b      	movge	r3, r5
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	9204      	str	r2, [sp, #16]
 800a064:	9a05      	ldr	r2, [sp, #20]
 800a066:	1aed      	subs	r5, r5, r3
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	b31b      	cbz	r3, 800a0b8 <_dtoa_r+0x7a0>
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 80af 	beq.w	800a1d6 <_dtoa_r+0x8be>
 800a078:	2e00      	cmp	r6, #0
 800a07a:	dd13      	ble.n	800a0a4 <_dtoa_r+0x78c>
 800a07c:	4639      	mov	r1, r7
 800a07e:	4632      	mov	r2, r6
 800a080:	4620      	mov	r0, r4
 800a082:	f000 ffd9 	bl	800b038 <__pow5mult>
 800a086:	ee18 2a10 	vmov	r2, s16
 800a08a:	4601      	mov	r1, r0
 800a08c:	4607      	mov	r7, r0
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 ff28 	bl	800aee4 <__multiply>
 800a094:	ee18 1a10 	vmov	r1, s16
 800a098:	4680      	mov	r8, r0
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 fe0a 	bl	800acb4 <_Bfree>
 800a0a0:	ee08 8a10 	vmov	s16, r8
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	1b9a      	subs	r2, r3, r6
 800a0a8:	d006      	beq.n	800a0b8 <_dtoa_r+0x7a0>
 800a0aa:	ee18 1a10 	vmov	r1, s16
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 ffc2 	bl	800b038 <__pow5mult>
 800a0b4:	ee08 0a10 	vmov	s16, r0
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fefc 	bl	800aeb8 <__i2b>
 800a0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	f340 8088 	ble.w	800a1da <_dtoa_r+0x8c2>
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 ffb2 	bl	800b038 <__pow5mult>
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	4606      	mov	r6, r0
 800a0da:	f340 8081 	ble.w	800a1e0 <_dtoa_r+0x8c8>
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	6933      	ldr	r3, [r6, #16]
 800a0e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0e8:	6918      	ldr	r0, [r3, #16]
 800a0ea:	f000 fe95 	bl	800ae18 <__hi0bits>
 800a0ee:	f1c0 0020 	rsb	r0, r0, #32
 800a0f2:	9b05      	ldr	r3, [sp, #20]
 800a0f4:	4418      	add	r0, r3
 800a0f6:	f010 001f 	ands.w	r0, r0, #31
 800a0fa:	f000 8092 	beq.w	800a222 <_dtoa_r+0x90a>
 800a0fe:	f1c0 0320 	rsb	r3, r0, #32
 800a102:	2b04      	cmp	r3, #4
 800a104:	f340 808a 	ble.w	800a21c <_dtoa_r+0x904>
 800a108:	f1c0 001c 	rsb	r0, r0, #28
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	4403      	add	r3, r0
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	4403      	add	r3, r0
 800a116:	4405      	add	r5, r0
 800a118:	9305      	str	r3, [sp, #20]
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd07      	ble.n	800a130 <_dtoa_r+0x818>
 800a120:	ee18 1a10 	vmov	r1, s16
 800a124:	461a      	mov	r2, r3
 800a126:	4620      	mov	r0, r4
 800a128:	f000 ffe0 	bl	800b0ec <__lshift>
 800a12c:	ee08 0a10 	vmov	s16, r0
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	dd05      	ble.n	800a142 <_dtoa_r+0x82a>
 800a136:	4631      	mov	r1, r6
 800a138:	461a      	mov	r2, r3
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 ffd6 	bl	800b0ec <__lshift>
 800a140:	4606      	mov	r6, r0
 800a142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d06e      	beq.n	800a226 <_dtoa_r+0x90e>
 800a148:	ee18 0a10 	vmov	r0, s16
 800a14c:	4631      	mov	r1, r6
 800a14e:	f001 f83d 	bl	800b1cc <__mcmp>
 800a152:	2800      	cmp	r0, #0
 800a154:	da67      	bge.n	800a226 <_dtoa_r+0x90e>
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	3b01      	subs	r3, #1
 800a15a:	ee18 1a10 	vmov	r1, s16
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	220a      	movs	r2, #10
 800a162:	2300      	movs	r3, #0
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fdc7 	bl	800acf8 <__multadd>
 800a16a:	9b08      	ldr	r3, [sp, #32]
 800a16c:	ee08 0a10 	vmov	s16, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 81b1 	beq.w	800a4d8 <_dtoa_r+0xbc0>
 800a176:	2300      	movs	r3, #0
 800a178:	4639      	mov	r1, r7
 800a17a:	220a      	movs	r2, #10
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 fdbb 	bl	800acf8 <__multadd>
 800a182:	9b02      	ldr	r3, [sp, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	4607      	mov	r7, r0
 800a188:	f300 808e 	bgt.w	800a2a8 <_dtoa_r+0x990>
 800a18c:	9b06      	ldr	r3, [sp, #24]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	dc51      	bgt.n	800a236 <_dtoa_r+0x91e>
 800a192:	e089      	b.n	800a2a8 <_dtoa_r+0x990>
 800a194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a19a:	e74b      	b.n	800a034 <_dtoa_r+0x71c>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	1e5e      	subs	r6, r3, #1
 800a1a0:	9b07      	ldr	r3, [sp, #28]
 800a1a2:	42b3      	cmp	r3, r6
 800a1a4:	bfbf      	itttt	lt
 800a1a6:	9b07      	ldrlt	r3, [sp, #28]
 800a1a8:	9607      	strlt	r6, [sp, #28]
 800a1aa:	1af2      	sublt	r2, r6, r3
 800a1ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1ae:	bfb6      	itet	lt
 800a1b0:	189b      	addlt	r3, r3, r2
 800a1b2:	1b9e      	subge	r6, r3, r6
 800a1b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a1b6:	9b03      	ldr	r3, [sp, #12]
 800a1b8:	bfb8      	it	lt
 800a1ba:	2600      	movlt	r6, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bfb7      	itett	lt
 800a1c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a1c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a1c8:	1a9d      	sublt	r5, r3, r2
 800a1ca:	2300      	movlt	r3, #0
 800a1cc:	e734      	b.n	800a038 <_dtoa_r+0x720>
 800a1ce:	9e07      	ldr	r6, [sp, #28]
 800a1d0:	9d04      	ldr	r5, [sp, #16]
 800a1d2:	9f08      	ldr	r7, [sp, #32]
 800a1d4:	e73b      	b.n	800a04e <_dtoa_r+0x736>
 800a1d6:	9a07      	ldr	r2, [sp, #28]
 800a1d8:	e767      	b.n	800a0aa <_dtoa_r+0x792>
 800a1da:	9b06      	ldr	r3, [sp, #24]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	dc18      	bgt.n	800a212 <_dtoa_r+0x8fa>
 800a1e0:	f1ba 0f00 	cmp.w	sl, #0
 800a1e4:	d115      	bne.n	800a212 <_dtoa_r+0x8fa>
 800a1e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ea:	b993      	cbnz	r3, 800a212 <_dtoa_r+0x8fa>
 800a1ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1f0:	0d1b      	lsrs	r3, r3, #20
 800a1f2:	051b      	lsls	r3, r3, #20
 800a1f4:	b183      	cbz	r3, 800a218 <_dtoa_r+0x900>
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	3301      	adds	r3, #1
 800a200:	9305      	str	r3, [sp, #20]
 800a202:	f04f 0801 	mov.w	r8, #1
 800a206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f47f af6a 	bne.w	800a0e2 <_dtoa_r+0x7ca>
 800a20e:	2001      	movs	r0, #1
 800a210:	e76f      	b.n	800a0f2 <_dtoa_r+0x7da>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	e7f6      	b.n	800a206 <_dtoa_r+0x8ee>
 800a218:	4698      	mov	r8, r3
 800a21a:	e7f4      	b.n	800a206 <_dtoa_r+0x8ee>
 800a21c:	f43f af7d 	beq.w	800a11a <_dtoa_r+0x802>
 800a220:	4618      	mov	r0, r3
 800a222:	301c      	adds	r0, #28
 800a224:	e772      	b.n	800a10c <_dtoa_r+0x7f4>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc37      	bgt.n	800a29c <_dtoa_r+0x984>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dd34      	ble.n	800a29c <_dtoa_r+0x984>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	9302      	str	r3, [sp, #8]
 800a236:	9b02      	ldr	r3, [sp, #8]
 800a238:	b96b      	cbnz	r3, 800a256 <_dtoa_r+0x93e>
 800a23a:	4631      	mov	r1, r6
 800a23c:	2205      	movs	r2, #5
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 fd5a 	bl	800acf8 <__multadd>
 800a244:	4601      	mov	r1, r0
 800a246:	4606      	mov	r6, r0
 800a248:	ee18 0a10 	vmov	r0, s16
 800a24c:	f000 ffbe 	bl	800b1cc <__mcmp>
 800a250:	2800      	cmp	r0, #0
 800a252:	f73f adbb 	bgt.w	8009dcc <_dtoa_r+0x4b4>
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	9d01      	ldr	r5, [sp, #4]
 800a25a:	43db      	mvns	r3, r3
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	f04f 0800 	mov.w	r8, #0
 800a262:	4631      	mov	r1, r6
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fd25 	bl	800acb4 <_Bfree>
 800a26a:	2f00      	cmp	r7, #0
 800a26c:	f43f aea4 	beq.w	8009fb8 <_dtoa_r+0x6a0>
 800a270:	f1b8 0f00 	cmp.w	r8, #0
 800a274:	d005      	beq.n	800a282 <_dtoa_r+0x96a>
 800a276:	45b8      	cmp	r8, r7
 800a278:	d003      	beq.n	800a282 <_dtoa_r+0x96a>
 800a27a:	4641      	mov	r1, r8
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fd19 	bl	800acb4 <_Bfree>
 800a282:	4639      	mov	r1, r7
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fd15 	bl	800acb4 <_Bfree>
 800a28a:	e695      	b.n	8009fb8 <_dtoa_r+0x6a0>
 800a28c:	2600      	movs	r6, #0
 800a28e:	4637      	mov	r7, r6
 800a290:	e7e1      	b.n	800a256 <_dtoa_r+0x93e>
 800a292:	9700      	str	r7, [sp, #0]
 800a294:	4637      	mov	r7, r6
 800a296:	e599      	b.n	8009dcc <_dtoa_r+0x4b4>
 800a298:	40240000 	.word	0x40240000
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 80ca 	beq.w	800a438 <_dtoa_r+0xb20>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	9302      	str	r3, [sp, #8]
 800a2a8:	2d00      	cmp	r5, #0
 800a2aa:	dd05      	ble.n	800a2b8 <_dtoa_r+0x9a0>
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 ff1b 	bl	800b0ec <__lshift>
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	f1b8 0f00 	cmp.w	r8, #0
 800a2bc:	d05b      	beq.n	800a376 <_dtoa_r+0xa5e>
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fcb7 	bl	800ac34 <_Balloc>
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	b928      	cbnz	r0, 800a2d6 <_dtoa_r+0x9be>
 800a2ca:	4b87      	ldr	r3, [pc, #540]	; (800a4e8 <_dtoa_r+0xbd0>)
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2d2:	f7ff bb3b 	b.w	800994c <_dtoa_r+0x34>
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	3202      	adds	r2, #2
 800a2da:	0092      	lsls	r2, r2, #2
 800a2dc:	f107 010c 	add.w	r1, r7, #12
 800a2e0:	300c      	adds	r0, #12
 800a2e2:	f000 fc8d 	bl	800ac00 <memcpy>
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 fefe 	bl	800b0ec <__lshift>
 800a2f0:	9b01      	ldr	r3, [sp, #4]
 800a2f2:	f103 0901 	add.w	r9, r3, #1
 800a2f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	9305      	str	r3, [sp, #20]
 800a2fe:	f00a 0301 	and.w	r3, sl, #1
 800a302:	46b8      	mov	r8, r7
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	4607      	mov	r7, r0
 800a308:	4631      	mov	r1, r6
 800a30a:	ee18 0a10 	vmov	r0, s16
 800a30e:	f7ff fa77 	bl	8009800 <quorem>
 800a312:	4641      	mov	r1, r8
 800a314:	9002      	str	r0, [sp, #8]
 800a316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a31a:	ee18 0a10 	vmov	r0, s16
 800a31e:	f000 ff55 	bl	800b1cc <__mcmp>
 800a322:	463a      	mov	r2, r7
 800a324:	9003      	str	r0, [sp, #12]
 800a326:	4631      	mov	r1, r6
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 ff6b 	bl	800b204 <__mdiff>
 800a32e:	68c2      	ldr	r2, [r0, #12]
 800a330:	f109 3bff 	add.w	fp, r9, #4294967295
 800a334:	4605      	mov	r5, r0
 800a336:	bb02      	cbnz	r2, 800a37a <_dtoa_r+0xa62>
 800a338:	4601      	mov	r1, r0
 800a33a:	ee18 0a10 	vmov	r0, s16
 800a33e:	f000 ff45 	bl	800b1cc <__mcmp>
 800a342:	4602      	mov	r2, r0
 800a344:	4629      	mov	r1, r5
 800a346:	4620      	mov	r0, r4
 800a348:	9207      	str	r2, [sp, #28]
 800a34a:	f000 fcb3 	bl	800acb4 <_Bfree>
 800a34e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a352:	ea43 0102 	orr.w	r1, r3, r2
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	430b      	orrs	r3, r1
 800a35a:	464d      	mov	r5, r9
 800a35c:	d10f      	bne.n	800a37e <_dtoa_r+0xa66>
 800a35e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a362:	d02a      	beq.n	800a3ba <_dtoa_r+0xaa2>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	dd02      	ble.n	800a370 <_dtoa_r+0xa58>
 800a36a:	9b02      	ldr	r3, [sp, #8]
 800a36c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a370:	f88b a000 	strb.w	sl, [fp]
 800a374:	e775      	b.n	800a262 <_dtoa_r+0x94a>
 800a376:	4638      	mov	r0, r7
 800a378:	e7ba      	b.n	800a2f0 <_dtoa_r+0x9d8>
 800a37a:	2201      	movs	r2, #1
 800a37c:	e7e2      	b.n	800a344 <_dtoa_r+0xa2c>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	db04      	blt.n	800a38e <_dtoa_r+0xa76>
 800a384:	9906      	ldr	r1, [sp, #24]
 800a386:	430b      	orrs	r3, r1
 800a388:	9904      	ldr	r1, [sp, #16]
 800a38a:	430b      	orrs	r3, r1
 800a38c:	d122      	bne.n	800a3d4 <_dtoa_r+0xabc>
 800a38e:	2a00      	cmp	r2, #0
 800a390:	ddee      	ble.n	800a370 <_dtoa_r+0xa58>
 800a392:	ee18 1a10 	vmov	r1, s16
 800a396:	2201      	movs	r2, #1
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fea7 	bl	800b0ec <__lshift>
 800a39e:	4631      	mov	r1, r6
 800a3a0:	ee08 0a10 	vmov	s16, r0
 800a3a4:	f000 ff12 	bl	800b1cc <__mcmp>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	dc03      	bgt.n	800a3b4 <_dtoa_r+0xa9c>
 800a3ac:	d1e0      	bne.n	800a370 <_dtoa_r+0xa58>
 800a3ae:	f01a 0f01 	tst.w	sl, #1
 800a3b2:	d0dd      	beq.n	800a370 <_dtoa_r+0xa58>
 800a3b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3b8:	d1d7      	bne.n	800a36a <_dtoa_r+0xa52>
 800a3ba:	2339      	movs	r3, #57	; 0x39
 800a3bc:	f88b 3000 	strb.w	r3, [fp]
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	461d      	mov	r5, r3
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3ca:	2a39      	cmp	r2, #57	; 0x39
 800a3cc:	d071      	beq.n	800a4b2 <_dtoa_r+0xb9a>
 800a3ce:	3201      	adds	r2, #1
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	e746      	b.n	800a262 <_dtoa_r+0x94a>
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	dd07      	ble.n	800a3e8 <_dtoa_r+0xad0>
 800a3d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3dc:	d0ed      	beq.n	800a3ba <_dtoa_r+0xaa2>
 800a3de:	f10a 0301 	add.w	r3, sl, #1
 800a3e2:	f88b 3000 	strb.w	r3, [fp]
 800a3e6:	e73c      	b.n	800a262 <_dtoa_r+0x94a>
 800a3e8:	9b05      	ldr	r3, [sp, #20]
 800a3ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a3ee:	4599      	cmp	r9, r3
 800a3f0:	d047      	beq.n	800a482 <_dtoa_r+0xb6a>
 800a3f2:	ee18 1a10 	vmov	r1, s16
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	220a      	movs	r2, #10
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fc7c 	bl	800acf8 <__multadd>
 800a400:	45b8      	cmp	r8, r7
 800a402:	ee08 0a10 	vmov	s16, r0
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	f04f 020a 	mov.w	r2, #10
 800a40e:	4641      	mov	r1, r8
 800a410:	4620      	mov	r0, r4
 800a412:	d106      	bne.n	800a422 <_dtoa_r+0xb0a>
 800a414:	f000 fc70 	bl	800acf8 <__multadd>
 800a418:	4680      	mov	r8, r0
 800a41a:	4607      	mov	r7, r0
 800a41c:	f109 0901 	add.w	r9, r9, #1
 800a420:	e772      	b.n	800a308 <_dtoa_r+0x9f0>
 800a422:	f000 fc69 	bl	800acf8 <__multadd>
 800a426:	4639      	mov	r1, r7
 800a428:	4680      	mov	r8, r0
 800a42a:	2300      	movs	r3, #0
 800a42c:	220a      	movs	r2, #10
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 fc62 	bl	800acf8 <__multadd>
 800a434:	4607      	mov	r7, r0
 800a436:	e7f1      	b.n	800a41c <_dtoa_r+0xb04>
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	9302      	str	r3, [sp, #8]
 800a43c:	9d01      	ldr	r5, [sp, #4]
 800a43e:	ee18 0a10 	vmov	r0, s16
 800a442:	4631      	mov	r1, r6
 800a444:	f7ff f9dc 	bl	8009800 <quorem>
 800a448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	f805 ab01 	strb.w	sl, [r5], #1
 800a452:	1aea      	subs	r2, r5, r3
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	4293      	cmp	r3, r2
 800a458:	dd09      	ble.n	800a46e <_dtoa_r+0xb56>
 800a45a:	ee18 1a10 	vmov	r1, s16
 800a45e:	2300      	movs	r3, #0
 800a460:	220a      	movs	r2, #10
 800a462:	4620      	mov	r0, r4
 800a464:	f000 fc48 	bl	800acf8 <__multadd>
 800a468:	ee08 0a10 	vmov	s16, r0
 800a46c:	e7e7      	b.n	800a43e <_dtoa_r+0xb26>
 800a46e:	9b02      	ldr	r3, [sp, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	bfc8      	it	gt
 800a474:	461d      	movgt	r5, r3
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	bfd8      	it	le
 800a47a:	2501      	movle	r5, #1
 800a47c:	441d      	add	r5, r3
 800a47e:	f04f 0800 	mov.w	r8, #0
 800a482:	ee18 1a10 	vmov	r1, s16
 800a486:	2201      	movs	r2, #1
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fe2f 	bl	800b0ec <__lshift>
 800a48e:	4631      	mov	r1, r6
 800a490:	ee08 0a10 	vmov	s16, r0
 800a494:	f000 fe9a 	bl	800b1cc <__mcmp>
 800a498:	2800      	cmp	r0, #0
 800a49a:	dc91      	bgt.n	800a3c0 <_dtoa_r+0xaa8>
 800a49c:	d102      	bne.n	800a4a4 <_dtoa_r+0xb8c>
 800a49e:	f01a 0f01 	tst.w	sl, #1
 800a4a2:	d18d      	bne.n	800a3c0 <_dtoa_r+0xaa8>
 800a4a4:	462b      	mov	r3, r5
 800a4a6:	461d      	mov	r5, r3
 800a4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ac:	2a30      	cmp	r2, #48	; 0x30
 800a4ae:	d0fa      	beq.n	800a4a6 <_dtoa_r+0xb8e>
 800a4b0:	e6d7      	b.n	800a262 <_dtoa_r+0x94a>
 800a4b2:	9a01      	ldr	r2, [sp, #4]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d184      	bne.n	800a3c2 <_dtoa_r+0xaaa>
 800a4b8:	9b00      	ldr	r3, [sp, #0]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2331      	movs	r3, #49	; 0x31
 800a4c0:	7013      	strb	r3, [r2, #0]
 800a4c2:	e6ce      	b.n	800a262 <_dtoa_r+0x94a>
 800a4c4:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <_dtoa_r+0xbd4>)
 800a4c6:	f7ff ba95 	b.w	80099f4 <_dtoa_r+0xdc>
 800a4ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f47f aa6e 	bne.w	80099ae <_dtoa_r+0x96>
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <_dtoa_r+0xbd8>)
 800a4d4:	f7ff ba8e 	b.w	80099f4 <_dtoa_r+0xdc>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dcae      	bgt.n	800a43c <_dtoa_r+0xb24>
 800a4de:	9b06      	ldr	r3, [sp, #24]
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	f73f aea8 	bgt.w	800a236 <_dtoa_r+0x91e>
 800a4e6:	e7a9      	b.n	800a43c <_dtoa_r+0xb24>
 800a4e8:	0800c6e0 	.word	0x0800c6e0
 800a4ec:	0800c4e4 	.word	0x0800c4e4
 800a4f0:	0800c661 	.word	0x0800c661

0800a4f4 <rshift>:
 800a4f4:	6903      	ldr	r3, [r0, #16]
 800a4f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a502:	f100 0414 	add.w	r4, r0, #20
 800a506:	dd45      	ble.n	800a594 <rshift+0xa0>
 800a508:	f011 011f 	ands.w	r1, r1, #31
 800a50c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a510:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a514:	d10c      	bne.n	800a530 <rshift+0x3c>
 800a516:	f100 0710 	add.w	r7, r0, #16
 800a51a:	4629      	mov	r1, r5
 800a51c:	42b1      	cmp	r1, r6
 800a51e:	d334      	bcc.n	800a58a <rshift+0x96>
 800a520:	1a9b      	subs	r3, r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	1eea      	subs	r2, r5, #3
 800a526:	4296      	cmp	r6, r2
 800a528:	bf38      	it	cc
 800a52a:	2300      	movcc	r3, #0
 800a52c:	4423      	add	r3, r4
 800a52e:	e015      	b.n	800a55c <rshift+0x68>
 800a530:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a534:	f1c1 0820 	rsb	r8, r1, #32
 800a538:	40cf      	lsrs	r7, r1
 800a53a:	f105 0e04 	add.w	lr, r5, #4
 800a53e:	46a1      	mov	r9, r4
 800a540:	4576      	cmp	r6, lr
 800a542:	46f4      	mov	ip, lr
 800a544:	d815      	bhi.n	800a572 <rshift+0x7e>
 800a546:	1a9a      	subs	r2, r3, r2
 800a548:	0092      	lsls	r2, r2, #2
 800a54a:	3a04      	subs	r2, #4
 800a54c:	3501      	adds	r5, #1
 800a54e:	42ae      	cmp	r6, r5
 800a550:	bf38      	it	cc
 800a552:	2200      	movcc	r2, #0
 800a554:	18a3      	adds	r3, r4, r2
 800a556:	50a7      	str	r7, [r4, r2]
 800a558:	b107      	cbz	r7, 800a55c <rshift+0x68>
 800a55a:	3304      	adds	r3, #4
 800a55c:	1b1a      	subs	r2, r3, r4
 800a55e:	42a3      	cmp	r3, r4
 800a560:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a564:	bf08      	it	eq
 800a566:	2300      	moveq	r3, #0
 800a568:	6102      	str	r2, [r0, #16]
 800a56a:	bf08      	it	eq
 800a56c:	6143      	streq	r3, [r0, #20]
 800a56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a572:	f8dc c000 	ldr.w	ip, [ip]
 800a576:	fa0c fc08 	lsl.w	ip, ip, r8
 800a57a:	ea4c 0707 	orr.w	r7, ip, r7
 800a57e:	f849 7b04 	str.w	r7, [r9], #4
 800a582:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a586:	40cf      	lsrs	r7, r1
 800a588:	e7da      	b.n	800a540 <rshift+0x4c>
 800a58a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a58e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a592:	e7c3      	b.n	800a51c <rshift+0x28>
 800a594:	4623      	mov	r3, r4
 800a596:	e7e1      	b.n	800a55c <rshift+0x68>

0800a598 <__hexdig_fun>:
 800a598:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a59c:	2b09      	cmp	r3, #9
 800a59e:	d802      	bhi.n	800a5a6 <__hexdig_fun+0xe>
 800a5a0:	3820      	subs	r0, #32
 800a5a2:	b2c0      	uxtb	r0, r0
 800a5a4:	4770      	bx	lr
 800a5a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d801      	bhi.n	800a5b2 <__hexdig_fun+0x1a>
 800a5ae:	3847      	subs	r0, #71	; 0x47
 800a5b0:	e7f7      	b.n	800a5a2 <__hexdig_fun+0xa>
 800a5b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d801      	bhi.n	800a5be <__hexdig_fun+0x26>
 800a5ba:	3827      	subs	r0, #39	; 0x27
 800a5bc:	e7f1      	b.n	800a5a2 <__hexdig_fun+0xa>
 800a5be:	2000      	movs	r0, #0
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <__gethex>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	ed2d 8b02 	vpush	{d8}
 800a5cc:	b089      	sub	sp, #36	; 0x24
 800a5ce:	ee08 0a10 	vmov	s16, r0
 800a5d2:	9304      	str	r3, [sp, #16]
 800a5d4:	4bb4      	ldr	r3, [pc, #720]	; (800a8a8 <__gethex+0x2e4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	468b      	mov	fp, r1
 800a5de:	4690      	mov	r8, r2
 800a5e0:	f7f5 fdfe 	bl	80001e0 <strlen>
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	f8db 2000 	ldr.w	r2, [fp]
 800a5ea:	4403      	add	r3, r0
 800a5ec:	4682      	mov	sl, r0
 800a5ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	1c93      	adds	r3, r2, #2
 800a5f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5fe:	32fe      	adds	r2, #254	; 0xfe
 800a600:	18d1      	adds	r1, r2, r3
 800a602:	461f      	mov	r7, r3
 800a604:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a608:	9100      	str	r1, [sp, #0]
 800a60a:	2830      	cmp	r0, #48	; 0x30
 800a60c:	d0f8      	beq.n	800a600 <__gethex+0x3c>
 800a60e:	f7ff ffc3 	bl	800a598 <__hexdig_fun>
 800a612:	4604      	mov	r4, r0
 800a614:	2800      	cmp	r0, #0
 800a616:	d13a      	bne.n	800a68e <__gethex+0xca>
 800a618:	9901      	ldr	r1, [sp, #4]
 800a61a:	4652      	mov	r2, sl
 800a61c:	4638      	mov	r0, r7
 800a61e:	f001 f943 	bl	800b8a8 <strncmp>
 800a622:	4605      	mov	r5, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	d168      	bne.n	800a6fa <__gethex+0x136>
 800a628:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a62c:	eb07 060a 	add.w	r6, r7, sl
 800a630:	f7ff ffb2 	bl	800a598 <__hexdig_fun>
 800a634:	2800      	cmp	r0, #0
 800a636:	d062      	beq.n	800a6fe <__gethex+0x13a>
 800a638:	4633      	mov	r3, r6
 800a63a:	7818      	ldrb	r0, [r3, #0]
 800a63c:	2830      	cmp	r0, #48	; 0x30
 800a63e:	461f      	mov	r7, r3
 800a640:	f103 0301 	add.w	r3, r3, #1
 800a644:	d0f9      	beq.n	800a63a <__gethex+0x76>
 800a646:	f7ff ffa7 	bl	800a598 <__hexdig_fun>
 800a64a:	2301      	movs	r3, #1
 800a64c:	fab0 f480 	clz	r4, r0
 800a650:	0964      	lsrs	r4, r4, #5
 800a652:	4635      	mov	r5, r6
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	463a      	mov	r2, r7
 800a658:	4616      	mov	r6, r2
 800a65a:	3201      	adds	r2, #1
 800a65c:	7830      	ldrb	r0, [r6, #0]
 800a65e:	f7ff ff9b 	bl	800a598 <__hexdig_fun>
 800a662:	2800      	cmp	r0, #0
 800a664:	d1f8      	bne.n	800a658 <__gethex+0x94>
 800a666:	9901      	ldr	r1, [sp, #4]
 800a668:	4652      	mov	r2, sl
 800a66a:	4630      	mov	r0, r6
 800a66c:	f001 f91c 	bl	800b8a8 <strncmp>
 800a670:	b980      	cbnz	r0, 800a694 <__gethex+0xd0>
 800a672:	b94d      	cbnz	r5, 800a688 <__gethex+0xc4>
 800a674:	eb06 050a 	add.w	r5, r6, sl
 800a678:	462a      	mov	r2, r5
 800a67a:	4616      	mov	r6, r2
 800a67c:	3201      	adds	r2, #1
 800a67e:	7830      	ldrb	r0, [r6, #0]
 800a680:	f7ff ff8a 	bl	800a598 <__hexdig_fun>
 800a684:	2800      	cmp	r0, #0
 800a686:	d1f8      	bne.n	800a67a <__gethex+0xb6>
 800a688:	1bad      	subs	r5, r5, r6
 800a68a:	00ad      	lsls	r5, r5, #2
 800a68c:	e004      	b.n	800a698 <__gethex+0xd4>
 800a68e:	2400      	movs	r4, #0
 800a690:	4625      	mov	r5, r4
 800a692:	e7e0      	b.n	800a656 <__gethex+0x92>
 800a694:	2d00      	cmp	r5, #0
 800a696:	d1f7      	bne.n	800a688 <__gethex+0xc4>
 800a698:	7833      	ldrb	r3, [r6, #0]
 800a69a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a69e:	2b50      	cmp	r3, #80	; 0x50
 800a6a0:	d13b      	bne.n	800a71a <__gethex+0x156>
 800a6a2:	7873      	ldrb	r3, [r6, #1]
 800a6a4:	2b2b      	cmp	r3, #43	; 0x2b
 800a6a6:	d02c      	beq.n	800a702 <__gethex+0x13e>
 800a6a8:	2b2d      	cmp	r3, #45	; 0x2d
 800a6aa:	d02e      	beq.n	800a70a <__gethex+0x146>
 800a6ac:	1c71      	adds	r1, r6, #1
 800a6ae:	f04f 0900 	mov.w	r9, #0
 800a6b2:	7808      	ldrb	r0, [r1, #0]
 800a6b4:	f7ff ff70 	bl	800a598 <__hexdig_fun>
 800a6b8:	1e43      	subs	r3, r0, #1
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b18      	cmp	r3, #24
 800a6be:	d82c      	bhi.n	800a71a <__gethex+0x156>
 800a6c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a6c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6c8:	f7ff ff66 	bl	800a598 <__hexdig_fun>
 800a6cc:	1e43      	subs	r3, r0, #1
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b18      	cmp	r3, #24
 800a6d2:	d91d      	bls.n	800a710 <__gethex+0x14c>
 800a6d4:	f1b9 0f00 	cmp.w	r9, #0
 800a6d8:	d000      	beq.n	800a6dc <__gethex+0x118>
 800a6da:	4252      	negs	r2, r2
 800a6dc:	4415      	add	r5, r2
 800a6de:	f8cb 1000 	str.w	r1, [fp]
 800a6e2:	b1e4      	cbz	r4, 800a71e <__gethex+0x15a>
 800a6e4:	9b00      	ldr	r3, [sp, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bf14      	ite	ne
 800a6ea:	2700      	movne	r7, #0
 800a6ec:	2706      	moveq	r7, #6
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	b009      	add	sp, #36	; 0x24
 800a6f2:	ecbd 8b02 	vpop	{d8}
 800a6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fa:	463e      	mov	r6, r7
 800a6fc:	4625      	mov	r5, r4
 800a6fe:	2401      	movs	r4, #1
 800a700:	e7ca      	b.n	800a698 <__gethex+0xd4>
 800a702:	f04f 0900 	mov.w	r9, #0
 800a706:	1cb1      	adds	r1, r6, #2
 800a708:	e7d3      	b.n	800a6b2 <__gethex+0xee>
 800a70a:	f04f 0901 	mov.w	r9, #1
 800a70e:	e7fa      	b.n	800a706 <__gethex+0x142>
 800a710:	230a      	movs	r3, #10
 800a712:	fb03 0202 	mla	r2, r3, r2, r0
 800a716:	3a10      	subs	r2, #16
 800a718:	e7d4      	b.n	800a6c4 <__gethex+0x100>
 800a71a:	4631      	mov	r1, r6
 800a71c:	e7df      	b.n	800a6de <__gethex+0x11a>
 800a71e:	1bf3      	subs	r3, r6, r7
 800a720:	3b01      	subs	r3, #1
 800a722:	4621      	mov	r1, r4
 800a724:	2b07      	cmp	r3, #7
 800a726:	dc0b      	bgt.n	800a740 <__gethex+0x17c>
 800a728:	ee18 0a10 	vmov	r0, s16
 800a72c:	f000 fa82 	bl	800ac34 <_Balloc>
 800a730:	4604      	mov	r4, r0
 800a732:	b940      	cbnz	r0, 800a746 <__gethex+0x182>
 800a734:	4b5d      	ldr	r3, [pc, #372]	; (800a8ac <__gethex+0x2e8>)
 800a736:	4602      	mov	r2, r0
 800a738:	21de      	movs	r1, #222	; 0xde
 800a73a:	485d      	ldr	r0, [pc, #372]	; (800a8b0 <__gethex+0x2ec>)
 800a73c:	f001 f8d6 	bl	800b8ec <__assert_func>
 800a740:	3101      	adds	r1, #1
 800a742:	105b      	asrs	r3, r3, #1
 800a744:	e7ee      	b.n	800a724 <__gethex+0x160>
 800a746:	f100 0914 	add.w	r9, r0, #20
 800a74a:	f04f 0b00 	mov.w	fp, #0
 800a74e:	f1ca 0301 	rsb	r3, sl, #1
 800a752:	f8cd 9008 	str.w	r9, [sp, #8]
 800a756:	f8cd b000 	str.w	fp, [sp]
 800a75a:	9306      	str	r3, [sp, #24]
 800a75c:	42b7      	cmp	r7, r6
 800a75e:	d340      	bcc.n	800a7e2 <__gethex+0x21e>
 800a760:	9802      	ldr	r0, [sp, #8]
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	f840 3b04 	str.w	r3, [r0], #4
 800a768:	eba0 0009 	sub.w	r0, r0, r9
 800a76c:	1080      	asrs	r0, r0, #2
 800a76e:	0146      	lsls	r6, r0, #5
 800a770:	6120      	str	r0, [r4, #16]
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fb50 	bl	800ae18 <__hi0bits>
 800a778:	1a30      	subs	r0, r6, r0
 800a77a:	f8d8 6000 	ldr.w	r6, [r8]
 800a77e:	42b0      	cmp	r0, r6
 800a780:	dd63      	ble.n	800a84a <__gethex+0x286>
 800a782:	1b87      	subs	r7, r0, r6
 800a784:	4639      	mov	r1, r7
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fef4 	bl	800b574 <__any_on>
 800a78c:	4682      	mov	sl, r0
 800a78e:	b1a8      	cbz	r0, 800a7bc <__gethex+0x1f8>
 800a790:	1e7b      	subs	r3, r7, #1
 800a792:	1159      	asrs	r1, r3, #5
 800a794:	f003 021f 	and.w	r2, r3, #31
 800a798:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a79c:	f04f 0a01 	mov.w	sl, #1
 800a7a0:	fa0a f202 	lsl.w	r2, sl, r2
 800a7a4:	420a      	tst	r2, r1
 800a7a6:	d009      	beq.n	800a7bc <__gethex+0x1f8>
 800a7a8:	4553      	cmp	r3, sl
 800a7aa:	dd05      	ble.n	800a7b8 <__gethex+0x1f4>
 800a7ac:	1eb9      	subs	r1, r7, #2
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fee0 	bl	800b574 <__any_on>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d145      	bne.n	800a844 <__gethex+0x280>
 800a7b8:	f04f 0a02 	mov.w	sl, #2
 800a7bc:	4639      	mov	r1, r7
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7ff fe98 	bl	800a4f4 <rshift>
 800a7c4:	443d      	add	r5, r7
 800a7c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7ca:	42ab      	cmp	r3, r5
 800a7cc:	da4c      	bge.n	800a868 <__gethex+0x2a4>
 800a7ce:	ee18 0a10 	vmov	r0, s16
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	f000 fa6e 	bl	800acb4 <_Bfree>
 800a7d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	27a3      	movs	r7, #163	; 0xa3
 800a7e0:	e785      	b.n	800a6ee <__gethex+0x12a>
 800a7e2:	1e73      	subs	r3, r6, #1
 800a7e4:	9a05      	ldr	r2, [sp, #20]
 800a7e6:	9303      	str	r3, [sp, #12]
 800a7e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d019      	beq.n	800a824 <__gethex+0x260>
 800a7f0:	f1bb 0f20 	cmp.w	fp, #32
 800a7f4:	d107      	bne.n	800a806 <__gethex+0x242>
 800a7f6:	9b02      	ldr	r3, [sp, #8]
 800a7f8:	9a00      	ldr	r2, [sp, #0]
 800a7fa:	f843 2b04 	str.w	r2, [r3], #4
 800a7fe:	9302      	str	r3, [sp, #8]
 800a800:	2300      	movs	r3, #0
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	469b      	mov	fp, r3
 800a806:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a80a:	f7ff fec5 	bl	800a598 <__hexdig_fun>
 800a80e:	9b00      	ldr	r3, [sp, #0]
 800a810:	f000 000f 	and.w	r0, r0, #15
 800a814:	fa00 f00b 	lsl.w	r0, r0, fp
 800a818:	4303      	orrs	r3, r0
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	f10b 0b04 	add.w	fp, fp, #4
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	e00d      	b.n	800a840 <__gethex+0x27c>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	9a06      	ldr	r2, [sp, #24]
 800a828:	4413      	add	r3, r2
 800a82a:	42bb      	cmp	r3, r7
 800a82c:	d3e0      	bcc.n	800a7f0 <__gethex+0x22c>
 800a82e:	4618      	mov	r0, r3
 800a830:	9901      	ldr	r1, [sp, #4]
 800a832:	9307      	str	r3, [sp, #28]
 800a834:	4652      	mov	r2, sl
 800a836:	f001 f837 	bl	800b8a8 <strncmp>
 800a83a:	9b07      	ldr	r3, [sp, #28]
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d1d7      	bne.n	800a7f0 <__gethex+0x22c>
 800a840:	461e      	mov	r6, r3
 800a842:	e78b      	b.n	800a75c <__gethex+0x198>
 800a844:	f04f 0a03 	mov.w	sl, #3
 800a848:	e7b8      	b.n	800a7bc <__gethex+0x1f8>
 800a84a:	da0a      	bge.n	800a862 <__gethex+0x29e>
 800a84c:	1a37      	subs	r7, r6, r0
 800a84e:	4621      	mov	r1, r4
 800a850:	ee18 0a10 	vmov	r0, s16
 800a854:	463a      	mov	r2, r7
 800a856:	f000 fc49 	bl	800b0ec <__lshift>
 800a85a:	1bed      	subs	r5, r5, r7
 800a85c:	4604      	mov	r4, r0
 800a85e:	f100 0914 	add.w	r9, r0, #20
 800a862:	f04f 0a00 	mov.w	sl, #0
 800a866:	e7ae      	b.n	800a7c6 <__gethex+0x202>
 800a868:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a86c:	42a8      	cmp	r0, r5
 800a86e:	dd72      	ble.n	800a956 <__gethex+0x392>
 800a870:	1b45      	subs	r5, r0, r5
 800a872:	42ae      	cmp	r6, r5
 800a874:	dc36      	bgt.n	800a8e4 <__gethex+0x320>
 800a876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d02a      	beq.n	800a8d4 <__gethex+0x310>
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d02c      	beq.n	800a8dc <__gethex+0x318>
 800a882:	2b01      	cmp	r3, #1
 800a884:	d11c      	bne.n	800a8c0 <__gethex+0x2fc>
 800a886:	42ae      	cmp	r6, r5
 800a888:	d11a      	bne.n	800a8c0 <__gethex+0x2fc>
 800a88a:	2e01      	cmp	r6, #1
 800a88c:	d112      	bne.n	800a8b4 <__gethex+0x2f0>
 800a88e:	9a04      	ldr	r2, [sp, #16]
 800a890:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	2301      	movs	r3, #1
 800a898:	6123      	str	r3, [r4, #16]
 800a89a:	f8c9 3000 	str.w	r3, [r9]
 800a89e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8a0:	2762      	movs	r7, #98	; 0x62
 800a8a2:	601c      	str	r4, [r3, #0]
 800a8a4:	e723      	b.n	800a6ee <__gethex+0x12a>
 800a8a6:	bf00      	nop
 800a8a8:	0800c758 	.word	0x0800c758
 800a8ac:	0800c6e0 	.word	0x0800c6e0
 800a8b0:	0800c6f1 	.word	0x0800c6f1
 800a8b4:	1e71      	subs	r1, r6, #1
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 fe5c 	bl	800b574 <__any_on>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d1e6      	bne.n	800a88e <__gethex+0x2ca>
 800a8c0:	ee18 0a10 	vmov	r0, s16
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	f000 f9f5 	bl	800acb4 <_Bfree>
 800a8ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	2750      	movs	r7, #80	; 0x50
 800a8d2:	e70c      	b.n	800a6ee <__gethex+0x12a>
 800a8d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1f2      	bne.n	800a8c0 <__gethex+0x2fc>
 800a8da:	e7d8      	b.n	800a88e <__gethex+0x2ca>
 800a8dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1d5      	bne.n	800a88e <__gethex+0x2ca>
 800a8e2:	e7ed      	b.n	800a8c0 <__gethex+0x2fc>
 800a8e4:	1e6f      	subs	r7, r5, #1
 800a8e6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ea:	d131      	bne.n	800a950 <__gethex+0x38c>
 800a8ec:	b127      	cbz	r7, 800a8f8 <__gethex+0x334>
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 fe3f 	bl	800b574 <__any_on>
 800a8f6:	4682      	mov	sl, r0
 800a8f8:	117b      	asrs	r3, r7, #5
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a900:	f007 071f 	and.w	r7, r7, #31
 800a904:	fa01 f707 	lsl.w	r7, r1, r7
 800a908:	421f      	tst	r7, r3
 800a90a:	4629      	mov	r1, r5
 800a90c:	4620      	mov	r0, r4
 800a90e:	bf18      	it	ne
 800a910:	f04a 0a02 	orrne.w	sl, sl, #2
 800a914:	1b76      	subs	r6, r6, r5
 800a916:	f7ff fded 	bl	800a4f4 <rshift>
 800a91a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a91e:	2702      	movs	r7, #2
 800a920:	f1ba 0f00 	cmp.w	sl, #0
 800a924:	d048      	beq.n	800a9b8 <__gethex+0x3f4>
 800a926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d015      	beq.n	800a95a <__gethex+0x396>
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d017      	beq.n	800a962 <__gethex+0x39e>
 800a932:	2b01      	cmp	r3, #1
 800a934:	d109      	bne.n	800a94a <__gethex+0x386>
 800a936:	f01a 0f02 	tst.w	sl, #2
 800a93a:	d006      	beq.n	800a94a <__gethex+0x386>
 800a93c:	f8d9 0000 	ldr.w	r0, [r9]
 800a940:	ea4a 0a00 	orr.w	sl, sl, r0
 800a944:	f01a 0f01 	tst.w	sl, #1
 800a948:	d10e      	bne.n	800a968 <__gethex+0x3a4>
 800a94a:	f047 0710 	orr.w	r7, r7, #16
 800a94e:	e033      	b.n	800a9b8 <__gethex+0x3f4>
 800a950:	f04f 0a01 	mov.w	sl, #1
 800a954:	e7d0      	b.n	800a8f8 <__gethex+0x334>
 800a956:	2701      	movs	r7, #1
 800a958:	e7e2      	b.n	800a920 <__gethex+0x35c>
 800a95a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a95c:	f1c3 0301 	rsb	r3, r3, #1
 800a960:	9315      	str	r3, [sp, #84]	; 0x54
 800a962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0f0      	beq.n	800a94a <__gethex+0x386>
 800a968:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a96c:	f104 0314 	add.w	r3, r4, #20
 800a970:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a974:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a978:	f04f 0c00 	mov.w	ip, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a982:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a986:	d01c      	beq.n	800a9c2 <__gethex+0x3fe>
 800a988:	3201      	adds	r2, #1
 800a98a:	6002      	str	r2, [r0, #0]
 800a98c:	2f02      	cmp	r7, #2
 800a98e:	f104 0314 	add.w	r3, r4, #20
 800a992:	d13f      	bne.n	800aa14 <__gethex+0x450>
 800a994:	f8d8 2000 	ldr.w	r2, [r8]
 800a998:	3a01      	subs	r2, #1
 800a99a:	42b2      	cmp	r2, r6
 800a99c:	d10a      	bne.n	800a9b4 <__gethex+0x3f0>
 800a99e:	1171      	asrs	r1, r6, #5
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9a6:	f006 061f 	and.w	r6, r6, #31
 800a9aa:	fa02 f606 	lsl.w	r6, r2, r6
 800a9ae:	421e      	tst	r6, r3
 800a9b0:	bf18      	it	ne
 800a9b2:	4617      	movne	r7, r2
 800a9b4:	f047 0720 	orr.w	r7, r7, #32
 800a9b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ba:	601c      	str	r4, [r3, #0]
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	601d      	str	r5, [r3, #0]
 800a9c0:	e695      	b.n	800a6ee <__gethex+0x12a>
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9c8:	d8d8      	bhi.n	800a97c <__gethex+0x3b8>
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	459b      	cmp	fp, r3
 800a9ce:	db19      	blt.n	800aa04 <__gethex+0x440>
 800a9d0:	6861      	ldr	r1, [r4, #4]
 800a9d2:	ee18 0a10 	vmov	r0, s16
 800a9d6:	3101      	adds	r1, #1
 800a9d8:	f000 f92c 	bl	800ac34 <_Balloc>
 800a9dc:	4681      	mov	r9, r0
 800a9de:	b918      	cbnz	r0, 800a9e8 <__gethex+0x424>
 800a9e0:	4b1a      	ldr	r3, [pc, #104]	; (800aa4c <__gethex+0x488>)
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	2184      	movs	r1, #132	; 0x84
 800a9e6:	e6a8      	b.n	800a73a <__gethex+0x176>
 800a9e8:	6922      	ldr	r2, [r4, #16]
 800a9ea:	3202      	adds	r2, #2
 800a9ec:	f104 010c 	add.w	r1, r4, #12
 800a9f0:	0092      	lsls	r2, r2, #2
 800a9f2:	300c      	adds	r0, #12
 800a9f4:	f000 f904 	bl	800ac00 <memcpy>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	ee18 0a10 	vmov	r0, s16
 800a9fe:	f000 f959 	bl	800acb4 <_Bfree>
 800aa02:	464c      	mov	r4, r9
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa0c:	6122      	str	r2, [r4, #16]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	615a      	str	r2, [r3, #20]
 800aa12:	e7bb      	b.n	800a98c <__gethex+0x3c8>
 800aa14:	6922      	ldr	r2, [r4, #16]
 800aa16:	455a      	cmp	r2, fp
 800aa18:	dd0b      	ble.n	800aa32 <__gethex+0x46e>
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff fd69 	bl	800a4f4 <rshift>
 800aa22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa26:	3501      	adds	r5, #1
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	f6ff aed0 	blt.w	800a7ce <__gethex+0x20a>
 800aa2e:	2701      	movs	r7, #1
 800aa30:	e7c0      	b.n	800a9b4 <__gethex+0x3f0>
 800aa32:	f016 061f 	ands.w	r6, r6, #31
 800aa36:	d0fa      	beq.n	800aa2e <__gethex+0x46a>
 800aa38:	4453      	add	r3, sl
 800aa3a:	f1c6 0620 	rsb	r6, r6, #32
 800aa3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa42:	f000 f9e9 	bl	800ae18 <__hi0bits>
 800aa46:	42b0      	cmp	r0, r6
 800aa48:	dbe7      	blt.n	800aa1a <__gethex+0x456>
 800aa4a:	e7f0      	b.n	800aa2e <__gethex+0x46a>
 800aa4c:	0800c6e0 	.word	0x0800c6e0

0800aa50 <L_shift>:
 800aa50:	f1c2 0208 	rsb	r2, r2, #8
 800aa54:	0092      	lsls	r2, r2, #2
 800aa56:	b570      	push	{r4, r5, r6, lr}
 800aa58:	f1c2 0620 	rsb	r6, r2, #32
 800aa5c:	6843      	ldr	r3, [r0, #4]
 800aa5e:	6804      	ldr	r4, [r0, #0]
 800aa60:	fa03 f506 	lsl.w	r5, r3, r6
 800aa64:	432c      	orrs	r4, r5
 800aa66:	40d3      	lsrs	r3, r2
 800aa68:	6004      	str	r4, [r0, #0]
 800aa6a:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa6e:	4288      	cmp	r0, r1
 800aa70:	d3f4      	bcc.n	800aa5c <L_shift+0xc>
 800aa72:	bd70      	pop	{r4, r5, r6, pc}

0800aa74 <__match>:
 800aa74:	b530      	push	{r4, r5, lr}
 800aa76:	6803      	ldr	r3, [r0, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7e:	b914      	cbnz	r4, 800aa86 <__match+0x12>
 800aa80:	6003      	str	r3, [r0, #0]
 800aa82:	2001      	movs	r0, #1
 800aa84:	bd30      	pop	{r4, r5, pc}
 800aa86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa8e:	2d19      	cmp	r5, #25
 800aa90:	bf98      	it	ls
 800aa92:	3220      	addls	r2, #32
 800aa94:	42a2      	cmp	r2, r4
 800aa96:	d0f0      	beq.n	800aa7a <__match+0x6>
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e7f3      	b.n	800aa84 <__match+0x10>

0800aa9c <__hexnan>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	680b      	ldr	r3, [r1, #0]
 800aaa2:	115e      	asrs	r6, r3, #5
 800aaa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaa8:	f013 031f 	ands.w	r3, r3, #31
 800aaac:	b087      	sub	sp, #28
 800aaae:	bf18      	it	ne
 800aab0:	3604      	addne	r6, #4
 800aab2:	2500      	movs	r5, #0
 800aab4:	1f37      	subs	r7, r6, #4
 800aab6:	4690      	mov	r8, r2
 800aab8:	6802      	ldr	r2, [r0, #0]
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	4682      	mov	sl, r0
 800aabe:	f846 5c04 	str.w	r5, [r6, #-4]
 800aac2:	46b9      	mov	r9, r7
 800aac4:	463c      	mov	r4, r7
 800aac6:	9502      	str	r5, [sp, #8]
 800aac8:	46ab      	mov	fp, r5
 800aaca:	7851      	ldrb	r1, [r2, #1]
 800aacc:	1c53      	adds	r3, r2, #1
 800aace:	9303      	str	r3, [sp, #12]
 800aad0:	b341      	cbz	r1, 800ab24 <__hexnan+0x88>
 800aad2:	4608      	mov	r0, r1
 800aad4:	9205      	str	r2, [sp, #20]
 800aad6:	9104      	str	r1, [sp, #16]
 800aad8:	f7ff fd5e 	bl	800a598 <__hexdig_fun>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d14f      	bne.n	800ab80 <__hexnan+0xe4>
 800aae0:	9904      	ldr	r1, [sp, #16]
 800aae2:	9a05      	ldr	r2, [sp, #20]
 800aae4:	2920      	cmp	r1, #32
 800aae6:	d818      	bhi.n	800ab1a <__hexnan+0x7e>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	459b      	cmp	fp, r3
 800aaec:	dd13      	ble.n	800ab16 <__hexnan+0x7a>
 800aaee:	454c      	cmp	r4, r9
 800aaf0:	d206      	bcs.n	800ab00 <__hexnan+0x64>
 800aaf2:	2d07      	cmp	r5, #7
 800aaf4:	dc04      	bgt.n	800ab00 <__hexnan+0x64>
 800aaf6:	462a      	mov	r2, r5
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7ff ffa8 	bl	800aa50 <L_shift>
 800ab00:	4544      	cmp	r4, r8
 800ab02:	d950      	bls.n	800aba6 <__hexnan+0x10a>
 800ab04:	2300      	movs	r3, #0
 800ab06:	f1a4 0904 	sub.w	r9, r4, #4
 800ab0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab0e:	f8cd b008 	str.w	fp, [sp, #8]
 800ab12:	464c      	mov	r4, r9
 800ab14:	461d      	mov	r5, r3
 800ab16:	9a03      	ldr	r2, [sp, #12]
 800ab18:	e7d7      	b.n	800aaca <__hexnan+0x2e>
 800ab1a:	2929      	cmp	r1, #41	; 0x29
 800ab1c:	d156      	bne.n	800abcc <__hexnan+0x130>
 800ab1e:	3202      	adds	r2, #2
 800ab20:	f8ca 2000 	str.w	r2, [sl]
 800ab24:	f1bb 0f00 	cmp.w	fp, #0
 800ab28:	d050      	beq.n	800abcc <__hexnan+0x130>
 800ab2a:	454c      	cmp	r4, r9
 800ab2c:	d206      	bcs.n	800ab3c <__hexnan+0xa0>
 800ab2e:	2d07      	cmp	r5, #7
 800ab30:	dc04      	bgt.n	800ab3c <__hexnan+0xa0>
 800ab32:	462a      	mov	r2, r5
 800ab34:	4649      	mov	r1, r9
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7ff ff8a 	bl	800aa50 <L_shift>
 800ab3c:	4544      	cmp	r4, r8
 800ab3e:	d934      	bls.n	800abaa <__hexnan+0x10e>
 800ab40:	f1a8 0204 	sub.w	r2, r8, #4
 800ab44:	4623      	mov	r3, r4
 800ab46:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab4e:	429f      	cmp	r7, r3
 800ab50:	d2f9      	bcs.n	800ab46 <__hexnan+0xaa>
 800ab52:	1b3b      	subs	r3, r7, r4
 800ab54:	f023 0303 	bic.w	r3, r3, #3
 800ab58:	3304      	adds	r3, #4
 800ab5a:	3401      	adds	r4, #1
 800ab5c:	3e03      	subs	r6, #3
 800ab5e:	42b4      	cmp	r4, r6
 800ab60:	bf88      	it	hi
 800ab62:	2304      	movhi	r3, #4
 800ab64:	4443      	add	r3, r8
 800ab66:	2200      	movs	r2, #0
 800ab68:	f843 2b04 	str.w	r2, [r3], #4
 800ab6c:	429f      	cmp	r7, r3
 800ab6e:	d2fb      	bcs.n	800ab68 <__hexnan+0xcc>
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	b91b      	cbnz	r3, 800ab7c <__hexnan+0xe0>
 800ab74:	4547      	cmp	r7, r8
 800ab76:	d127      	bne.n	800abc8 <__hexnan+0x12c>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	2005      	movs	r0, #5
 800ab7e:	e026      	b.n	800abce <__hexnan+0x132>
 800ab80:	3501      	adds	r5, #1
 800ab82:	2d08      	cmp	r5, #8
 800ab84:	f10b 0b01 	add.w	fp, fp, #1
 800ab88:	dd06      	ble.n	800ab98 <__hexnan+0xfc>
 800ab8a:	4544      	cmp	r4, r8
 800ab8c:	d9c3      	bls.n	800ab16 <__hexnan+0x7a>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab94:	2501      	movs	r5, #1
 800ab96:	3c04      	subs	r4, #4
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	f000 000f 	and.w	r0, r0, #15
 800ab9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aba2:	6022      	str	r2, [r4, #0]
 800aba4:	e7b7      	b.n	800ab16 <__hexnan+0x7a>
 800aba6:	2508      	movs	r5, #8
 800aba8:	e7b5      	b.n	800ab16 <__hexnan+0x7a>
 800abaa:	9b01      	ldr	r3, [sp, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0df      	beq.n	800ab70 <__hexnan+0xd4>
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295
 800abb4:	f1c3 0320 	rsb	r3, r3, #32
 800abb8:	fa22 f303 	lsr.w	r3, r2, r3
 800abbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abc0:	401a      	ands	r2, r3
 800abc2:	f846 2c04 	str.w	r2, [r6, #-4]
 800abc6:	e7d3      	b.n	800ab70 <__hexnan+0xd4>
 800abc8:	3f04      	subs	r7, #4
 800abca:	e7d1      	b.n	800ab70 <__hexnan+0xd4>
 800abcc:	2004      	movs	r0, #4
 800abce:	b007      	add	sp, #28
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd4 <_localeconv_r>:
 800abd4:	4800      	ldr	r0, [pc, #0]	; (800abd8 <_localeconv_r+0x4>)
 800abd6:	4770      	bx	lr
 800abd8:	20000254 	.word	0x20000254

0800abdc <__ascii_mbtowc>:
 800abdc:	b082      	sub	sp, #8
 800abde:	b901      	cbnz	r1, 800abe2 <__ascii_mbtowc+0x6>
 800abe0:	a901      	add	r1, sp, #4
 800abe2:	b142      	cbz	r2, 800abf6 <__ascii_mbtowc+0x1a>
 800abe4:	b14b      	cbz	r3, 800abfa <__ascii_mbtowc+0x1e>
 800abe6:	7813      	ldrb	r3, [r2, #0]
 800abe8:	600b      	str	r3, [r1, #0]
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	1e10      	subs	r0, r2, #0
 800abee:	bf18      	it	ne
 800abf0:	2001      	movne	r0, #1
 800abf2:	b002      	add	sp, #8
 800abf4:	4770      	bx	lr
 800abf6:	4610      	mov	r0, r2
 800abf8:	e7fb      	b.n	800abf2 <__ascii_mbtowc+0x16>
 800abfa:	f06f 0001 	mvn.w	r0, #1
 800abfe:	e7f8      	b.n	800abf2 <__ascii_mbtowc+0x16>

0800ac00 <memcpy>:
 800ac00:	440a      	add	r2, r1
 800ac02:	4291      	cmp	r1, r2
 800ac04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac08:	d100      	bne.n	800ac0c <memcpy+0xc>
 800ac0a:	4770      	bx	lr
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac16:	4291      	cmp	r1, r2
 800ac18:	d1f9      	bne.n	800ac0e <memcpy+0xe>
 800ac1a:	bd10      	pop	{r4, pc}

0800ac1c <__malloc_lock>:
 800ac1c:	4801      	ldr	r0, [pc, #4]	; (800ac24 <__malloc_lock+0x8>)
 800ac1e:	f000 be96 	b.w	800b94e <__retarget_lock_acquire_recursive>
 800ac22:	bf00      	nop
 800ac24:	2000170c 	.word	0x2000170c

0800ac28 <__malloc_unlock>:
 800ac28:	4801      	ldr	r0, [pc, #4]	; (800ac30 <__malloc_unlock+0x8>)
 800ac2a:	f000 be91 	b.w	800b950 <__retarget_lock_release_recursive>
 800ac2e:	bf00      	nop
 800ac30:	2000170c 	.word	0x2000170c

0800ac34 <_Balloc>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac38:	4604      	mov	r4, r0
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	b976      	cbnz	r6, 800ac5c <_Balloc+0x28>
 800ac3e:	2010      	movs	r0, #16
 800ac40:	f7fc ff90 	bl	8007b64 <malloc>
 800ac44:	4602      	mov	r2, r0
 800ac46:	6260      	str	r0, [r4, #36]	; 0x24
 800ac48:	b920      	cbnz	r0, 800ac54 <_Balloc+0x20>
 800ac4a:	4b18      	ldr	r3, [pc, #96]	; (800acac <_Balloc+0x78>)
 800ac4c:	4818      	ldr	r0, [pc, #96]	; (800acb0 <_Balloc+0x7c>)
 800ac4e:	2166      	movs	r1, #102	; 0x66
 800ac50:	f000 fe4c 	bl	800b8ec <__assert_func>
 800ac54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac58:	6006      	str	r6, [r0, #0]
 800ac5a:	60c6      	str	r6, [r0, #12]
 800ac5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac5e:	68f3      	ldr	r3, [r6, #12]
 800ac60:	b183      	cbz	r3, 800ac84 <_Balloc+0x50>
 800ac62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac6a:	b9b8      	cbnz	r0, 800ac9c <_Balloc+0x68>
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac72:	1d72      	adds	r2, r6, #5
 800ac74:	0092      	lsls	r2, r2, #2
 800ac76:	4620      	mov	r0, r4
 800ac78:	f000 fc9d 	bl	800b5b6 <_calloc_r>
 800ac7c:	b160      	cbz	r0, 800ac98 <_Balloc+0x64>
 800ac7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac82:	e00e      	b.n	800aca2 <_Balloc+0x6e>
 800ac84:	2221      	movs	r2, #33	; 0x21
 800ac86:	2104      	movs	r1, #4
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fc94 	bl	800b5b6 <_calloc_r>
 800ac8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac90:	60f0      	str	r0, [r6, #12]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e4      	bne.n	800ac62 <_Balloc+0x2e>
 800ac98:	2000      	movs	r0, #0
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	6802      	ldr	r2, [r0, #0]
 800ac9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aca2:	2300      	movs	r3, #0
 800aca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aca8:	e7f7      	b.n	800ac9a <_Balloc+0x66>
 800acaa:	bf00      	nop
 800acac:	0800c66e 	.word	0x0800c66e
 800acb0:	0800c76c 	.word	0x0800c76c

0800acb4 <_Bfree>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acb8:	4605      	mov	r5, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	b976      	cbnz	r6, 800acdc <_Bfree+0x28>
 800acbe:	2010      	movs	r0, #16
 800acc0:	f7fc ff50 	bl	8007b64 <malloc>
 800acc4:	4602      	mov	r2, r0
 800acc6:	6268      	str	r0, [r5, #36]	; 0x24
 800acc8:	b920      	cbnz	r0, 800acd4 <_Bfree+0x20>
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <_Bfree+0x3c>)
 800accc:	4809      	ldr	r0, [pc, #36]	; (800acf4 <_Bfree+0x40>)
 800acce:	218a      	movs	r1, #138	; 0x8a
 800acd0:	f000 fe0c 	bl	800b8ec <__assert_func>
 800acd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd8:	6006      	str	r6, [r0, #0]
 800acda:	60c6      	str	r6, [r0, #12]
 800acdc:	b13c      	cbz	r4, 800acee <_Bfree+0x3a>
 800acde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ace0:	6862      	ldr	r2, [r4, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace8:	6021      	str	r1, [r4, #0]
 800acea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	0800c66e 	.word	0x0800c66e
 800acf4:	0800c76c 	.word	0x0800c76c

0800acf8 <__multadd>:
 800acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	690d      	ldr	r5, [r1, #16]
 800acfe:	4607      	mov	r7, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	461e      	mov	r6, r3
 800ad04:	f101 0c14 	add.w	ip, r1, #20
 800ad08:	2000      	movs	r0, #0
 800ad0a:	f8dc 3000 	ldr.w	r3, [ip]
 800ad0e:	b299      	uxth	r1, r3
 800ad10:	fb02 6101 	mla	r1, r2, r1, r6
 800ad14:	0c1e      	lsrs	r6, r3, #16
 800ad16:	0c0b      	lsrs	r3, r1, #16
 800ad18:	fb02 3306 	mla	r3, r2, r6, r3
 800ad1c:	b289      	uxth	r1, r1
 800ad1e:	3001      	adds	r0, #1
 800ad20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad24:	4285      	cmp	r5, r0
 800ad26:	f84c 1b04 	str.w	r1, [ip], #4
 800ad2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad2e:	dcec      	bgt.n	800ad0a <__multadd+0x12>
 800ad30:	b30e      	cbz	r6, 800ad76 <__multadd+0x7e>
 800ad32:	68a3      	ldr	r3, [r4, #8]
 800ad34:	42ab      	cmp	r3, r5
 800ad36:	dc19      	bgt.n	800ad6c <__multadd+0x74>
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	3101      	adds	r1, #1
 800ad3e:	f7ff ff79 	bl	800ac34 <_Balloc>
 800ad42:	4680      	mov	r8, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <__multadd+0x5a>
 800ad46:	4602      	mov	r2, r0
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <__multadd+0x84>)
 800ad4a:	480d      	ldr	r0, [pc, #52]	; (800ad80 <__multadd+0x88>)
 800ad4c:	21b5      	movs	r1, #181	; 0xb5
 800ad4e:	f000 fdcd 	bl	800b8ec <__assert_func>
 800ad52:	6922      	ldr	r2, [r4, #16]
 800ad54:	3202      	adds	r2, #2
 800ad56:	f104 010c 	add.w	r1, r4, #12
 800ad5a:	0092      	lsls	r2, r2, #2
 800ad5c:	300c      	adds	r0, #12
 800ad5e:	f7ff ff4f 	bl	800ac00 <memcpy>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff ffa5 	bl	800acb4 <_Bfree>
 800ad6a:	4644      	mov	r4, r8
 800ad6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad70:	3501      	adds	r5, #1
 800ad72:	615e      	str	r6, [r3, #20]
 800ad74:	6125      	str	r5, [r4, #16]
 800ad76:	4620      	mov	r0, r4
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	0800c6e0 	.word	0x0800c6e0
 800ad80:	0800c76c 	.word	0x0800c76c

0800ad84 <__s2b>:
 800ad84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad88:	460c      	mov	r4, r1
 800ad8a:	4615      	mov	r5, r2
 800ad8c:	461f      	mov	r7, r3
 800ad8e:	2209      	movs	r2, #9
 800ad90:	3308      	adds	r3, #8
 800ad92:	4606      	mov	r6, r0
 800ad94:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad98:	2100      	movs	r1, #0
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	db09      	blt.n	800adb4 <__s2b+0x30>
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7ff ff47 	bl	800ac34 <_Balloc>
 800ada6:	b940      	cbnz	r0, 800adba <__s2b+0x36>
 800ada8:	4602      	mov	r2, r0
 800adaa:	4b19      	ldr	r3, [pc, #100]	; (800ae10 <__s2b+0x8c>)
 800adac:	4819      	ldr	r0, [pc, #100]	; (800ae14 <__s2b+0x90>)
 800adae:	21ce      	movs	r1, #206	; 0xce
 800adb0:	f000 fd9c 	bl	800b8ec <__assert_func>
 800adb4:	0052      	lsls	r2, r2, #1
 800adb6:	3101      	adds	r1, #1
 800adb8:	e7f0      	b.n	800ad9c <__s2b+0x18>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	6143      	str	r3, [r0, #20]
 800adbe:	2d09      	cmp	r5, #9
 800adc0:	f04f 0301 	mov.w	r3, #1
 800adc4:	6103      	str	r3, [r0, #16]
 800adc6:	dd16      	ble.n	800adf6 <__s2b+0x72>
 800adc8:	f104 0909 	add.w	r9, r4, #9
 800adcc:	46c8      	mov	r8, r9
 800adce:	442c      	add	r4, r5
 800add0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800add4:	4601      	mov	r1, r0
 800add6:	3b30      	subs	r3, #48	; 0x30
 800add8:	220a      	movs	r2, #10
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ff8c 	bl	800acf8 <__multadd>
 800ade0:	45a0      	cmp	r8, r4
 800ade2:	d1f5      	bne.n	800add0 <__s2b+0x4c>
 800ade4:	f1a5 0408 	sub.w	r4, r5, #8
 800ade8:	444c      	add	r4, r9
 800adea:	1b2d      	subs	r5, r5, r4
 800adec:	1963      	adds	r3, r4, r5
 800adee:	42bb      	cmp	r3, r7
 800adf0:	db04      	blt.n	800adfc <__s2b+0x78>
 800adf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf6:	340a      	adds	r4, #10
 800adf8:	2509      	movs	r5, #9
 800adfa:	e7f6      	b.n	800adea <__s2b+0x66>
 800adfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae00:	4601      	mov	r1, r0
 800ae02:	3b30      	subs	r3, #48	; 0x30
 800ae04:	220a      	movs	r2, #10
 800ae06:	4630      	mov	r0, r6
 800ae08:	f7ff ff76 	bl	800acf8 <__multadd>
 800ae0c:	e7ee      	b.n	800adec <__s2b+0x68>
 800ae0e:	bf00      	nop
 800ae10:	0800c6e0 	.word	0x0800c6e0
 800ae14:	0800c76c 	.word	0x0800c76c

0800ae18 <__hi0bits>:
 800ae18:	0c03      	lsrs	r3, r0, #16
 800ae1a:	041b      	lsls	r3, r3, #16
 800ae1c:	b9d3      	cbnz	r3, 800ae54 <__hi0bits+0x3c>
 800ae1e:	0400      	lsls	r0, r0, #16
 800ae20:	2310      	movs	r3, #16
 800ae22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae26:	bf04      	itt	eq
 800ae28:	0200      	lsleq	r0, r0, #8
 800ae2a:	3308      	addeq	r3, #8
 800ae2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae30:	bf04      	itt	eq
 800ae32:	0100      	lsleq	r0, r0, #4
 800ae34:	3304      	addeq	r3, #4
 800ae36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae3a:	bf04      	itt	eq
 800ae3c:	0080      	lsleq	r0, r0, #2
 800ae3e:	3302      	addeq	r3, #2
 800ae40:	2800      	cmp	r0, #0
 800ae42:	db05      	blt.n	800ae50 <__hi0bits+0x38>
 800ae44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae48:	f103 0301 	add.w	r3, r3, #1
 800ae4c:	bf08      	it	eq
 800ae4e:	2320      	moveq	r3, #32
 800ae50:	4618      	mov	r0, r3
 800ae52:	4770      	bx	lr
 800ae54:	2300      	movs	r3, #0
 800ae56:	e7e4      	b.n	800ae22 <__hi0bits+0xa>

0800ae58 <__lo0bits>:
 800ae58:	6803      	ldr	r3, [r0, #0]
 800ae5a:	f013 0207 	ands.w	r2, r3, #7
 800ae5e:	4601      	mov	r1, r0
 800ae60:	d00b      	beq.n	800ae7a <__lo0bits+0x22>
 800ae62:	07da      	lsls	r2, r3, #31
 800ae64:	d423      	bmi.n	800aeae <__lo0bits+0x56>
 800ae66:	0798      	lsls	r0, r3, #30
 800ae68:	bf49      	itett	mi
 800ae6a:	085b      	lsrmi	r3, r3, #1
 800ae6c:	089b      	lsrpl	r3, r3, #2
 800ae6e:	2001      	movmi	r0, #1
 800ae70:	600b      	strmi	r3, [r1, #0]
 800ae72:	bf5c      	itt	pl
 800ae74:	600b      	strpl	r3, [r1, #0]
 800ae76:	2002      	movpl	r0, #2
 800ae78:	4770      	bx	lr
 800ae7a:	b298      	uxth	r0, r3
 800ae7c:	b9a8      	cbnz	r0, 800aeaa <__lo0bits+0x52>
 800ae7e:	0c1b      	lsrs	r3, r3, #16
 800ae80:	2010      	movs	r0, #16
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	b90a      	cbnz	r2, 800ae8a <__lo0bits+0x32>
 800ae86:	3008      	adds	r0, #8
 800ae88:	0a1b      	lsrs	r3, r3, #8
 800ae8a:	071a      	lsls	r2, r3, #28
 800ae8c:	bf04      	itt	eq
 800ae8e:	091b      	lsreq	r3, r3, #4
 800ae90:	3004      	addeq	r0, #4
 800ae92:	079a      	lsls	r2, r3, #30
 800ae94:	bf04      	itt	eq
 800ae96:	089b      	lsreq	r3, r3, #2
 800ae98:	3002      	addeq	r0, #2
 800ae9a:	07da      	lsls	r2, r3, #31
 800ae9c:	d403      	bmi.n	800aea6 <__lo0bits+0x4e>
 800ae9e:	085b      	lsrs	r3, r3, #1
 800aea0:	f100 0001 	add.w	r0, r0, #1
 800aea4:	d005      	beq.n	800aeb2 <__lo0bits+0x5a>
 800aea6:	600b      	str	r3, [r1, #0]
 800aea8:	4770      	bx	lr
 800aeaa:	4610      	mov	r0, r2
 800aeac:	e7e9      	b.n	800ae82 <__lo0bits+0x2a>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	4770      	bx	lr
 800aeb2:	2020      	movs	r0, #32
 800aeb4:	4770      	bx	lr
	...

0800aeb8 <__i2b>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	460c      	mov	r4, r1
 800aebc:	2101      	movs	r1, #1
 800aebe:	f7ff feb9 	bl	800ac34 <_Balloc>
 800aec2:	4602      	mov	r2, r0
 800aec4:	b928      	cbnz	r0, 800aed2 <__i2b+0x1a>
 800aec6:	4b05      	ldr	r3, [pc, #20]	; (800aedc <__i2b+0x24>)
 800aec8:	4805      	ldr	r0, [pc, #20]	; (800aee0 <__i2b+0x28>)
 800aeca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aece:	f000 fd0d 	bl	800b8ec <__assert_func>
 800aed2:	2301      	movs	r3, #1
 800aed4:	6144      	str	r4, [r0, #20]
 800aed6:	6103      	str	r3, [r0, #16]
 800aed8:	bd10      	pop	{r4, pc}
 800aeda:	bf00      	nop
 800aedc:	0800c6e0 	.word	0x0800c6e0
 800aee0:	0800c76c 	.word	0x0800c76c

0800aee4 <__multiply>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	4691      	mov	r9, r2
 800aeea:	690a      	ldr	r2, [r1, #16]
 800aeec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	bfb8      	it	lt
 800aef4:	460b      	movlt	r3, r1
 800aef6:	460c      	mov	r4, r1
 800aef8:	bfbc      	itt	lt
 800aefa:	464c      	movlt	r4, r9
 800aefc:	4699      	movlt	r9, r3
 800aefe:	6927      	ldr	r7, [r4, #16]
 800af00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af04:	68a3      	ldr	r3, [r4, #8]
 800af06:	6861      	ldr	r1, [r4, #4]
 800af08:	eb07 060a 	add.w	r6, r7, sl
 800af0c:	42b3      	cmp	r3, r6
 800af0e:	b085      	sub	sp, #20
 800af10:	bfb8      	it	lt
 800af12:	3101      	addlt	r1, #1
 800af14:	f7ff fe8e 	bl	800ac34 <_Balloc>
 800af18:	b930      	cbnz	r0, 800af28 <__multiply+0x44>
 800af1a:	4602      	mov	r2, r0
 800af1c:	4b44      	ldr	r3, [pc, #272]	; (800b030 <__multiply+0x14c>)
 800af1e:	4845      	ldr	r0, [pc, #276]	; (800b034 <__multiply+0x150>)
 800af20:	f240 115d 	movw	r1, #349	; 0x15d
 800af24:	f000 fce2 	bl	800b8ec <__assert_func>
 800af28:	f100 0514 	add.w	r5, r0, #20
 800af2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af30:	462b      	mov	r3, r5
 800af32:	2200      	movs	r2, #0
 800af34:	4543      	cmp	r3, r8
 800af36:	d321      	bcc.n	800af7c <__multiply+0x98>
 800af38:	f104 0314 	add.w	r3, r4, #20
 800af3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af40:	f109 0314 	add.w	r3, r9, #20
 800af44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af48:	9202      	str	r2, [sp, #8]
 800af4a:	1b3a      	subs	r2, r7, r4
 800af4c:	3a15      	subs	r2, #21
 800af4e:	f022 0203 	bic.w	r2, r2, #3
 800af52:	3204      	adds	r2, #4
 800af54:	f104 0115 	add.w	r1, r4, #21
 800af58:	428f      	cmp	r7, r1
 800af5a:	bf38      	it	cc
 800af5c:	2204      	movcc	r2, #4
 800af5e:	9201      	str	r2, [sp, #4]
 800af60:	9a02      	ldr	r2, [sp, #8]
 800af62:	9303      	str	r3, [sp, #12]
 800af64:	429a      	cmp	r2, r3
 800af66:	d80c      	bhi.n	800af82 <__multiply+0x9e>
 800af68:	2e00      	cmp	r6, #0
 800af6a:	dd03      	ble.n	800af74 <__multiply+0x90>
 800af6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af70:	2b00      	cmp	r3, #0
 800af72:	d05a      	beq.n	800b02a <__multiply+0x146>
 800af74:	6106      	str	r6, [r0, #16]
 800af76:	b005      	add	sp, #20
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	f843 2b04 	str.w	r2, [r3], #4
 800af80:	e7d8      	b.n	800af34 <__multiply+0x50>
 800af82:	f8b3 a000 	ldrh.w	sl, [r3]
 800af86:	f1ba 0f00 	cmp.w	sl, #0
 800af8a:	d024      	beq.n	800afd6 <__multiply+0xf2>
 800af8c:	f104 0e14 	add.w	lr, r4, #20
 800af90:	46a9      	mov	r9, r5
 800af92:	f04f 0c00 	mov.w	ip, #0
 800af96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af9a:	f8d9 1000 	ldr.w	r1, [r9]
 800af9e:	fa1f fb82 	uxth.w	fp, r2
 800afa2:	b289      	uxth	r1, r1
 800afa4:	fb0a 110b 	mla	r1, sl, fp, r1
 800afa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800afac:	f8d9 2000 	ldr.w	r2, [r9]
 800afb0:	4461      	add	r1, ip
 800afb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800afba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800afbe:	b289      	uxth	r1, r1
 800afc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afc4:	4577      	cmp	r7, lr
 800afc6:	f849 1b04 	str.w	r1, [r9], #4
 800afca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afce:	d8e2      	bhi.n	800af96 <__multiply+0xb2>
 800afd0:	9a01      	ldr	r2, [sp, #4]
 800afd2:	f845 c002 	str.w	ip, [r5, r2]
 800afd6:	9a03      	ldr	r2, [sp, #12]
 800afd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afdc:	3304      	adds	r3, #4
 800afde:	f1b9 0f00 	cmp.w	r9, #0
 800afe2:	d020      	beq.n	800b026 <__multiply+0x142>
 800afe4:	6829      	ldr	r1, [r5, #0]
 800afe6:	f104 0c14 	add.w	ip, r4, #20
 800afea:	46ae      	mov	lr, r5
 800afec:	f04f 0a00 	mov.w	sl, #0
 800aff0:	f8bc b000 	ldrh.w	fp, [ip]
 800aff4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aff8:	fb09 220b 	mla	r2, r9, fp, r2
 800affc:	4492      	add	sl, r2
 800affe:	b289      	uxth	r1, r1
 800b000:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b004:	f84e 1b04 	str.w	r1, [lr], #4
 800b008:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b00c:	f8be 1000 	ldrh.w	r1, [lr]
 800b010:	0c12      	lsrs	r2, r2, #16
 800b012:	fb09 1102 	mla	r1, r9, r2, r1
 800b016:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b01a:	4567      	cmp	r7, ip
 800b01c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b020:	d8e6      	bhi.n	800aff0 <__multiply+0x10c>
 800b022:	9a01      	ldr	r2, [sp, #4]
 800b024:	50a9      	str	r1, [r5, r2]
 800b026:	3504      	adds	r5, #4
 800b028:	e79a      	b.n	800af60 <__multiply+0x7c>
 800b02a:	3e01      	subs	r6, #1
 800b02c:	e79c      	b.n	800af68 <__multiply+0x84>
 800b02e:	bf00      	nop
 800b030:	0800c6e0 	.word	0x0800c6e0
 800b034:	0800c76c 	.word	0x0800c76c

0800b038 <__pow5mult>:
 800b038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b03c:	4615      	mov	r5, r2
 800b03e:	f012 0203 	ands.w	r2, r2, #3
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	d007      	beq.n	800b058 <__pow5mult+0x20>
 800b048:	4c25      	ldr	r4, [pc, #148]	; (800b0e0 <__pow5mult+0xa8>)
 800b04a:	3a01      	subs	r2, #1
 800b04c:	2300      	movs	r3, #0
 800b04e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b052:	f7ff fe51 	bl	800acf8 <__multadd>
 800b056:	4607      	mov	r7, r0
 800b058:	10ad      	asrs	r5, r5, #2
 800b05a:	d03d      	beq.n	800b0d8 <__pow5mult+0xa0>
 800b05c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b05e:	b97c      	cbnz	r4, 800b080 <__pow5mult+0x48>
 800b060:	2010      	movs	r0, #16
 800b062:	f7fc fd7f 	bl	8007b64 <malloc>
 800b066:	4602      	mov	r2, r0
 800b068:	6270      	str	r0, [r6, #36]	; 0x24
 800b06a:	b928      	cbnz	r0, 800b078 <__pow5mult+0x40>
 800b06c:	4b1d      	ldr	r3, [pc, #116]	; (800b0e4 <__pow5mult+0xac>)
 800b06e:	481e      	ldr	r0, [pc, #120]	; (800b0e8 <__pow5mult+0xb0>)
 800b070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b074:	f000 fc3a 	bl	800b8ec <__assert_func>
 800b078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b07c:	6004      	str	r4, [r0, #0]
 800b07e:	60c4      	str	r4, [r0, #12]
 800b080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b088:	b94c      	cbnz	r4, 800b09e <__pow5mult+0x66>
 800b08a:	f240 2171 	movw	r1, #625	; 0x271
 800b08e:	4630      	mov	r0, r6
 800b090:	f7ff ff12 	bl	800aeb8 <__i2b>
 800b094:	2300      	movs	r3, #0
 800b096:	f8c8 0008 	str.w	r0, [r8, #8]
 800b09a:	4604      	mov	r4, r0
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	f04f 0900 	mov.w	r9, #0
 800b0a2:	07eb      	lsls	r3, r5, #31
 800b0a4:	d50a      	bpl.n	800b0bc <__pow5mult+0x84>
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7ff ff1a 	bl	800aee4 <__multiply>
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	4680      	mov	r8, r0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7ff fdfd 	bl	800acb4 <_Bfree>
 800b0ba:	4647      	mov	r7, r8
 800b0bc:	106d      	asrs	r5, r5, #1
 800b0be:	d00b      	beq.n	800b0d8 <__pow5mult+0xa0>
 800b0c0:	6820      	ldr	r0, [r4, #0]
 800b0c2:	b938      	cbnz	r0, 800b0d4 <__pow5mult+0x9c>
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f7ff ff0b 	bl	800aee4 <__multiply>
 800b0ce:	6020      	str	r0, [r4, #0]
 800b0d0:	f8c0 9000 	str.w	r9, [r0]
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	e7e4      	b.n	800b0a2 <__pow5mult+0x6a>
 800b0d8:	4638      	mov	r0, r7
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	bf00      	nop
 800b0e0:	0800c8b8 	.word	0x0800c8b8
 800b0e4:	0800c66e 	.word	0x0800c66e
 800b0e8:	0800c76c 	.word	0x0800c76c

0800b0ec <__lshift>:
 800b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	6849      	ldr	r1, [r1, #4]
 800b0f4:	6923      	ldr	r3, [r4, #16]
 800b0f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0fa:	68a3      	ldr	r3, [r4, #8]
 800b0fc:	4607      	mov	r7, r0
 800b0fe:	4691      	mov	r9, r2
 800b100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b104:	f108 0601 	add.w	r6, r8, #1
 800b108:	42b3      	cmp	r3, r6
 800b10a:	db0b      	blt.n	800b124 <__lshift+0x38>
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7ff fd91 	bl	800ac34 <_Balloc>
 800b112:	4605      	mov	r5, r0
 800b114:	b948      	cbnz	r0, 800b12a <__lshift+0x3e>
 800b116:	4602      	mov	r2, r0
 800b118:	4b2a      	ldr	r3, [pc, #168]	; (800b1c4 <__lshift+0xd8>)
 800b11a:	482b      	ldr	r0, [pc, #172]	; (800b1c8 <__lshift+0xdc>)
 800b11c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b120:	f000 fbe4 	bl	800b8ec <__assert_func>
 800b124:	3101      	adds	r1, #1
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	e7ee      	b.n	800b108 <__lshift+0x1c>
 800b12a:	2300      	movs	r3, #0
 800b12c:	f100 0114 	add.w	r1, r0, #20
 800b130:	f100 0210 	add.w	r2, r0, #16
 800b134:	4618      	mov	r0, r3
 800b136:	4553      	cmp	r3, sl
 800b138:	db37      	blt.n	800b1aa <__lshift+0xbe>
 800b13a:	6920      	ldr	r0, [r4, #16]
 800b13c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b140:	f104 0314 	add.w	r3, r4, #20
 800b144:	f019 091f 	ands.w	r9, r9, #31
 800b148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b14c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b150:	d02f      	beq.n	800b1b2 <__lshift+0xc6>
 800b152:	f1c9 0e20 	rsb	lr, r9, #32
 800b156:	468a      	mov	sl, r1
 800b158:	f04f 0c00 	mov.w	ip, #0
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	fa02 f209 	lsl.w	r2, r2, r9
 800b162:	ea42 020c 	orr.w	r2, r2, ip
 800b166:	f84a 2b04 	str.w	r2, [sl], #4
 800b16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b16e:	4298      	cmp	r0, r3
 800b170:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b174:	d8f2      	bhi.n	800b15c <__lshift+0x70>
 800b176:	1b03      	subs	r3, r0, r4
 800b178:	3b15      	subs	r3, #21
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	3304      	adds	r3, #4
 800b180:	f104 0215 	add.w	r2, r4, #21
 800b184:	4290      	cmp	r0, r2
 800b186:	bf38      	it	cc
 800b188:	2304      	movcc	r3, #4
 800b18a:	f841 c003 	str.w	ip, [r1, r3]
 800b18e:	f1bc 0f00 	cmp.w	ip, #0
 800b192:	d001      	beq.n	800b198 <__lshift+0xac>
 800b194:	f108 0602 	add.w	r6, r8, #2
 800b198:	3e01      	subs	r6, #1
 800b19a:	4638      	mov	r0, r7
 800b19c:	612e      	str	r6, [r5, #16]
 800b19e:	4621      	mov	r1, r4
 800b1a0:	f7ff fd88 	bl	800acb4 <_Bfree>
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	e7c1      	b.n	800b136 <__lshift+0x4a>
 800b1b2:	3904      	subs	r1, #4
 800b1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1bc:	4298      	cmp	r0, r3
 800b1be:	d8f9      	bhi.n	800b1b4 <__lshift+0xc8>
 800b1c0:	e7ea      	b.n	800b198 <__lshift+0xac>
 800b1c2:	bf00      	nop
 800b1c4:	0800c6e0 	.word	0x0800c6e0
 800b1c8:	0800c76c 	.word	0x0800c76c

0800b1cc <__mcmp>:
 800b1cc:	b530      	push	{r4, r5, lr}
 800b1ce:	6902      	ldr	r2, [r0, #16]
 800b1d0:	690c      	ldr	r4, [r1, #16]
 800b1d2:	1b12      	subs	r2, r2, r4
 800b1d4:	d10e      	bne.n	800b1f4 <__mcmp+0x28>
 800b1d6:	f100 0314 	add.w	r3, r0, #20
 800b1da:	3114      	adds	r1, #20
 800b1dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1ec:	42a5      	cmp	r5, r4
 800b1ee:	d003      	beq.n	800b1f8 <__mcmp+0x2c>
 800b1f0:	d305      	bcc.n	800b1fe <__mcmp+0x32>
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	bd30      	pop	{r4, r5, pc}
 800b1f8:	4283      	cmp	r3, r0
 800b1fa:	d3f3      	bcc.n	800b1e4 <__mcmp+0x18>
 800b1fc:	e7fa      	b.n	800b1f4 <__mcmp+0x28>
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	e7f7      	b.n	800b1f4 <__mcmp+0x28>

0800b204 <__mdiff>:
 800b204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	460c      	mov	r4, r1
 800b20a:	4606      	mov	r6, r0
 800b20c:	4611      	mov	r1, r2
 800b20e:	4620      	mov	r0, r4
 800b210:	4690      	mov	r8, r2
 800b212:	f7ff ffdb 	bl	800b1cc <__mcmp>
 800b216:	1e05      	subs	r5, r0, #0
 800b218:	d110      	bne.n	800b23c <__mdiff+0x38>
 800b21a:	4629      	mov	r1, r5
 800b21c:	4630      	mov	r0, r6
 800b21e:	f7ff fd09 	bl	800ac34 <_Balloc>
 800b222:	b930      	cbnz	r0, 800b232 <__mdiff+0x2e>
 800b224:	4b3a      	ldr	r3, [pc, #232]	; (800b310 <__mdiff+0x10c>)
 800b226:	4602      	mov	r2, r0
 800b228:	f240 2132 	movw	r1, #562	; 0x232
 800b22c:	4839      	ldr	r0, [pc, #228]	; (800b314 <__mdiff+0x110>)
 800b22e:	f000 fb5d 	bl	800b8ec <__assert_func>
 800b232:	2301      	movs	r3, #1
 800b234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23c:	bfa4      	itt	ge
 800b23e:	4643      	movge	r3, r8
 800b240:	46a0      	movge	r8, r4
 800b242:	4630      	mov	r0, r6
 800b244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b248:	bfa6      	itte	ge
 800b24a:	461c      	movge	r4, r3
 800b24c:	2500      	movge	r5, #0
 800b24e:	2501      	movlt	r5, #1
 800b250:	f7ff fcf0 	bl	800ac34 <_Balloc>
 800b254:	b920      	cbnz	r0, 800b260 <__mdiff+0x5c>
 800b256:	4b2e      	ldr	r3, [pc, #184]	; (800b310 <__mdiff+0x10c>)
 800b258:	4602      	mov	r2, r0
 800b25a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b25e:	e7e5      	b.n	800b22c <__mdiff+0x28>
 800b260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b264:	6926      	ldr	r6, [r4, #16]
 800b266:	60c5      	str	r5, [r0, #12]
 800b268:	f104 0914 	add.w	r9, r4, #20
 800b26c:	f108 0514 	add.w	r5, r8, #20
 800b270:	f100 0e14 	add.w	lr, r0, #20
 800b274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b27c:	f108 0210 	add.w	r2, r8, #16
 800b280:	46f2      	mov	sl, lr
 800b282:	2100      	movs	r1, #0
 800b284:	f859 3b04 	ldr.w	r3, [r9], #4
 800b288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b28c:	fa1f f883 	uxth.w	r8, r3
 800b290:	fa11 f18b 	uxtah	r1, r1, fp
 800b294:	0c1b      	lsrs	r3, r3, #16
 800b296:	eba1 0808 	sub.w	r8, r1, r8
 800b29a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b29e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2a2:	fa1f f888 	uxth.w	r8, r8
 800b2a6:	1419      	asrs	r1, r3, #16
 800b2a8:	454e      	cmp	r6, r9
 800b2aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2ae:	f84a 3b04 	str.w	r3, [sl], #4
 800b2b2:	d8e7      	bhi.n	800b284 <__mdiff+0x80>
 800b2b4:	1b33      	subs	r3, r6, r4
 800b2b6:	3b15      	subs	r3, #21
 800b2b8:	f023 0303 	bic.w	r3, r3, #3
 800b2bc:	3304      	adds	r3, #4
 800b2be:	3415      	adds	r4, #21
 800b2c0:	42a6      	cmp	r6, r4
 800b2c2:	bf38      	it	cc
 800b2c4:	2304      	movcc	r3, #4
 800b2c6:	441d      	add	r5, r3
 800b2c8:	4473      	add	r3, lr
 800b2ca:	469e      	mov	lr, r3
 800b2cc:	462e      	mov	r6, r5
 800b2ce:	4566      	cmp	r6, ip
 800b2d0:	d30e      	bcc.n	800b2f0 <__mdiff+0xec>
 800b2d2:	f10c 0203 	add.w	r2, ip, #3
 800b2d6:	1b52      	subs	r2, r2, r5
 800b2d8:	f022 0203 	bic.w	r2, r2, #3
 800b2dc:	3d03      	subs	r5, #3
 800b2de:	45ac      	cmp	ip, r5
 800b2e0:	bf38      	it	cc
 800b2e2:	2200      	movcc	r2, #0
 800b2e4:	441a      	add	r2, r3
 800b2e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b2ea:	b17b      	cbz	r3, 800b30c <__mdiff+0x108>
 800b2ec:	6107      	str	r7, [r0, #16]
 800b2ee:	e7a3      	b.n	800b238 <__mdiff+0x34>
 800b2f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2f4:	fa11 f288 	uxtah	r2, r1, r8
 800b2f8:	1414      	asrs	r4, r2, #16
 800b2fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2fe:	b292      	uxth	r2, r2
 800b300:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b304:	f84e 2b04 	str.w	r2, [lr], #4
 800b308:	1421      	asrs	r1, r4, #16
 800b30a:	e7e0      	b.n	800b2ce <__mdiff+0xca>
 800b30c:	3f01      	subs	r7, #1
 800b30e:	e7ea      	b.n	800b2e6 <__mdiff+0xe2>
 800b310:	0800c6e0 	.word	0x0800c6e0
 800b314:	0800c76c 	.word	0x0800c76c

0800b318 <__ulp>:
 800b318:	b082      	sub	sp, #8
 800b31a:	ed8d 0b00 	vstr	d0, [sp]
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	4912      	ldr	r1, [pc, #72]	; (800b36c <__ulp+0x54>)
 800b322:	4019      	ands	r1, r3
 800b324:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b328:	2900      	cmp	r1, #0
 800b32a:	dd05      	ble.n	800b338 <__ulp+0x20>
 800b32c:	2200      	movs	r2, #0
 800b32e:	460b      	mov	r3, r1
 800b330:	ec43 2b10 	vmov	d0, r2, r3
 800b334:	b002      	add	sp, #8
 800b336:	4770      	bx	lr
 800b338:	4249      	negs	r1, r1
 800b33a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b33e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b342:	f04f 0200 	mov.w	r2, #0
 800b346:	f04f 0300 	mov.w	r3, #0
 800b34a:	da04      	bge.n	800b356 <__ulp+0x3e>
 800b34c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b350:	fa41 f300 	asr.w	r3, r1, r0
 800b354:	e7ec      	b.n	800b330 <__ulp+0x18>
 800b356:	f1a0 0114 	sub.w	r1, r0, #20
 800b35a:	291e      	cmp	r1, #30
 800b35c:	bfda      	itte	le
 800b35e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b362:	fa20 f101 	lsrle.w	r1, r0, r1
 800b366:	2101      	movgt	r1, #1
 800b368:	460a      	mov	r2, r1
 800b36a:	e7e1      	b.n	800b330 <__ulp+0x18>
 800b36c:	7ff00000 	.word	0x7ff00000

0800b370 <__b2d>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	6905      	ldr	r5, [r0, #16]
 800b374:	f100 0714 	add.w	r7, r0, #20
 800b378:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b37c:	1f2e      	subs	r6, r5, #4
 800b37e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff fd48 	bl	800ae18 <__hi0bits>
 800b388:	f1c0 0320 	rsb	r3, r0, #32
 800b38c:	280a      	cmp	r0, #10
 800b38e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b40c <__b2d+0x9c>
 800b392:	600b      	str	r3, [r1, #0]
 800b394:	dc14      	bgt.n	800b3c0 <__b2d+0x50>
 800b396:	f1c0 0e0b 	rsb	lr, r0, #11
 800b39a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b39e:	42b7      	cmp	r7, r6
 800b3a0:	ea41 030c 	orr.w	r3, r1, ip
 800b3a4:	bf34      	ite	cc
 800b3a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3aa:	2100      	movcs	r1, #0
 800b3ac:	3015      	adds	r0, #21
 800b3ae:	fa04 f000 	lsl.w	r0, r4, r0
 800b3b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3b6:	ea40 0201 	orr.w	r2, r0, r1
 800b3ba:	ec43 2b10 	vmov	d0, r2, r3
 800b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c0:	42b7      	cmp	r7, r6
 800b3c2:	bf3a      	itte	cc
 800b3c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b3cc:	2100      	movcs	r1, #0
 800b3ce:	380b      	subs	r0, #11
 800b3d0:	d017      	beq.n	800b402 <__b2d+0x92>
 800b3d2:	f1c0 0c20 	rsb	ip, r0, #32
 800b3d6:	fa04 f500 	lsl.w	r5, r4, r0
 800b3da:	42be      	cmp	r6, r7
 800b3dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800b3e0:	ea45 0504 	orr.w	r5, r5, r4
 800b3e4:	bf8c      	ite	hi
 800b3e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b3ea:	2400      	movls	r4, #0
 800b3ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b3f0:	fa01 f000 	lsl.w	r0, r1, r0
 800b3f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b3f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b3fc:	ea40 0204 	orr.w	r2, r0, r4
 800b400:	e7db      	b.n	800b3ba <__b2d+0x4a>
 800b402:	ea44 030c 	orr.w	r3, r4, ip
 800b406:	460a      	mov	r2, r1
 800b408:	e7d7      	b.n	800b3ba <__b2d+0x4a>
 800b40a:	bf00      	nop
 800b40c:	3ff00000 	.word	0x3ff00000

0800b410 <__d2b>:
 800b410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b414:	4689      	mov	r9, r1
 800b416:	2101      	movs	r1, #1
 800b418:	ec57 6b10 	vmov	r6, r7, d0
 800b41c:	4690      	mov	r8, r2
 800b41e:	f7ff fc09 	bl	800ac34 <_Balloc>
 800b422:	4604      	mov	r4, r0
 800b424:	b930      	cbnz	r0, 800b434 <__d2b+0x24>
 800b426:	4602      	mov	r2, r0
 800b428:	4b25      	ldr	r3, [pc, #148]	; (800b4c0 <__d2b+0xb0>)
 800b42a:	4826      	ldr	r0, [pc, #152]	; (800b4c4 <__d2b+0xb4>)
 800b42c:	f240 310a 	movw	r1, #778	; 0x30a
 800b430:	f000 fa5c 	bl	800b8ec <__assert_func>
 800b434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b43c:	bb35      	cbnz	r5, 800b48c <__d2b+0x7c>
 800b43e:	2e00      	cmp	r6, #0
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	d028      	beq.n	800b496 <__d2b+0x86>
 800b444:	4668      	mov	r0, sp
 800b446:	9600      	str	r6, [sp, #0]
 800b448:	f7ff fd06 	bl	800ae58 <__lo0bits>
 800b44c:	9900      	ldr	r1, [sp, #0]
 800b44e:	b300      	cbz	r0, 800b492 <__d2b+0x82>
 800b450:	9a01      	ldr	r2, [sp, #4]
 800b452:	f1c0 0320 	rsb	r3, r0, #32
 800b456:	fa02 f303 	lsl.w	r3, r2, r3
 800b45a:	430b      	orrs	r3, r1
 800b45c:	40c2      	lsrs	r2, r0
 800b45e:	6163      	str	r3, [r4, #20]
 800b460:	9201      	str	r2, [sp, #4]
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	61a3      	str	r3, [r4, #24]
 800b466:	2b00      	cmp	r3, #0
 800b468:	bf14      	ite	ne
 800b46a:	2202      	movne	r2, #2
 800b46c:	2201      	moveq	r2, #1
 800b46e:	6122      	str	r2, [r4, #16]
 800b470:	b1d5      	cbz	r5, 800b4a8 <__d2b+0x98>
 800b472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b476:	4405      	add	r5, r0
 800b478:	f8c9 5000 	str.w	r5, [r9]
 800b47c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b480:	f8c8 0000 	str.w	r0, [r8]
 800b484:	4620      	mov	r0, r4
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b48c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b490:	e7d5      	b.n	800b43e <__d2b+0x2e>
 800b492:	6161      	str	r1, [r4, #20]
 800b494:	e7e5      	b.n	800b462 <__d2b+0x52>
 800b496:	a801      	add	r0, sp, #4
 800b498:	f7ff fcde 	bl	800ae58 <__lo0bits>
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	6163      	str	r3, [r4, #20]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	6122      	str	r2, [r4, #16]
 800b4a4:	3020      	adds	r0, #32
 800b4a6:	e7e3      	b.n	800b470 <__d2b+0x60>
 800b4a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4b0:	f8c9 0000 	str.w	r0, [r9]
 800b4b4:	6918      	ldr	r0, [r3, #16]
 800b4b6:	f7ff fcaf 	bl	800ae18 <__hi0bits>
 800b4ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4be:	e7df      	b.n	800b480 <__d2b+0x70>
 800b4c0:	0800c6e0 	.word	0x0800c6e0
 800b4c4:	0800c76c 	.word	0x0800c76c

0800b4c8 <__ratio>:
 800b4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	4688      	mov	r8, r1
 800b4ce:	4669      	mov	r1, sp
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	f7ff ff4d 	bl	800b370 <__b2d>
 800b4d6:	a901      	add	r1, sp, #4
 800b4d8:	4640      	mov	r0, r8
 800b4da:	ec55 4b10 	vmov	r4, r5, d0
 800b4de:	f7ff ff47 	bl	800b370 <__b2d>
 800b4e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4ea:	eba3 0c02 	sub.w	ip, r3, r2
 800b4ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4f8:	ec51 0b10 	vmov	r0, r1, d0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	bfd6      	itet	le
 800b500:	460a      	movle	r2, r1
 800b502:	462a      	movgt	r2, r5
 800b504:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b508:	468b      	mov	fp, r1
 800b50a:	462f      	mov	r7, r5
 800b50c:	bfd4      	ite	le
 800b50e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b516:	4620      	mov	r0, r4
 800b518:	ee10 2a10 	vmov	r2, s0
 800b51c:	465b      	mov	r3, fp
 800b51e:	4639      	mov	r1, r7
 800b520:	f7f5 f99c 	bl	800085c <__aeabi_ddiv>
 800b524:	ec41 0b10 	vmov	d0, r0, r1
 800b528:	b003      	add	sp, #12
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b52e <__copybits>:
 800b52e:	3901      	subs	r1, #1
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	1149      	asrs	r1, r1, #5
 800b534:	6914      	ldr	r4, [r2, #16]
 800b536:	3101      	adds	r1, #1
 800b538:	f102 0314 	add.w	r3, r2, #20
 800b53c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b544:	1f05      	subs	r5, r0, #4
 800b546:	42a3      	cmp	r3, r4
 800b548:	d30c      	bcc.n	800b564 <__copybits+0x36>
 800b54a:	1aa3      	subs	r3, r4, r2
 800b54c:	3b11      	subs	r3, #17
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	3211      	adds	r2, #17
 800b554:	42a2      	cmp	r2, r4
 800b556:	bf88      	it	hi
 800b558:	2300      	movhi	r3, #0
 800b55a:	4418      	add	r0, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	4288      	cmp	r0, r1
 800b560:	d305      	bcc.n	800b56e <__copybits+0x40>
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	f853 6b04 	ldr.w	r6, [r3], #4
 800b568:	f845 6f04 	str.w	r6, [r5, #4]!
 800b56c:	e7eb      	b.n	800b546 <__copybits+0x18>
 800b56e:	f840 3b04 	str.w	r3, [r0], #4
 800b572:	e7f4      	b.n	800b55e <__copybits+0x30>

0800b574 <__any_on>:
 800b574:	f100 0214 	add.w	r2, r0, #20
 800b578:	6900      	ldr	r0, [r0, #16]
 800b57a:	114b      	asrs	r3, r1, #5
 800b57c:	4298      	cmp	r0, r3
 800b57e:	b510      	push	{r4, lr}
 800b580:	db11      	blt.n	800b5a6 <__any_on+0x32>
 800b582:	dd0a      	ble.n	800b59a <__any_on+0x26>
 800b584:	f011 011f 	ands.w	r1, r1, #31
 800b588:	d007      	beq.n	800b59a <__any_on+0x26>
 800b58a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b58e:	fa24 f001 	lsr.w	r0, r4, r1
 800b592:	fa00 f101 	lsl.w	r1, r0, r1
 800b596:	428c      	cmp	r4, r1
 800b598:	d10b      	bne.n	800b5b2 <__any_on+0x3e>
 800b59a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d803      	bhi.n	800b5aa <__any_on+0x36>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	bd10      	pop	{r4, pc}
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	e7f7      	b.n	800b59a <__any_on+0x26>
 800b5aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	d0f5      	beq.n	800b59e <__any_on+0x2a>
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	e7f6      	b.n	800b5a4 <__any_on+0x30>

0800b5b6 <_calloc_r>:
 800b5b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5b8:	fba1 2402 	umull	r2, r4, r1, r2
 800b5bc:	b94c      	cbnz	r4, 800b5d2 <_calloc_r+0x1c>
 800b5be:	4611      	mov	r1, r2
 800b5c0:	9201      	str	r2, [sp, #4]
 800b5c2:	f7fc fb4b 	bl	8007c5c <_malloc_r>
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	b930      	cbnz	r0, 800b5da <_calloc_r+0x24>
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	b003      	add	sp, #12
 800b5d0:	bd30      	pop	{r4, r5, pc}
 800b5d2:	220c      	movs	r2, #12
 800b5d4:	6002      	str	r2, [r0, #0]
 800b5d6:	2500      	movs	r5, #0
 800b5d8:	e7f8      	b.n	800b5cc <_calloc_r+0x16>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	f7fc faca 	bl	8007b74 <memset>
 800b5e0:	e7f4      	b.n	800b5cc <_calloc_r+0x16>

0800b5e2 <__ssputs_r>:
 800b5e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e6:	688e      	ldr	r6, [r1, #8]
 800b5e8:	429e      	cmp	r6, r3
 800b5ea:	4682      	mov	sl, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	4690      	mov	r8, r2
 800b5f0:	461f      	mov	r7, r3
 800b5f2:	d838      	bhi.n	800b666 <__ssputs_r+0x84>
 800b5f4:	898a      	ldrh	r2, [r1, #12]
 800b5f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5fa:	d032      	beq.n	800b662 <__ssputs_r+0x80>
 800b5fc:	6825      	ldr	r5, [r4, #0]
 800b5fe:	6909      	ldr	r1, [r1, #16]
 800b600:	eba5 0901 	sub.w	r9, r5, r1
 800b604:	6965      	ldr	r5, [r4, #20]
 800b606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b60a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b60e:	3301      	adds	r3, #1
 800b610:	444b      	add	r3, r9
 800b612:	106d      	asrs	r5, r5, #1
 800b614:	429d      	cmp	r5, r3
 800b616:	bf38      	it	cc
 800b618:	461d      	movcc	r5, r3
 800b61a:	0553      	lsls	r3, r2, #21
 800b61c:	d531      	bpl.n	800b682 <__ssputs_r+0xa0>
 800b61e:	4629      	mov	r1, r5
 800b620:	f7fc fb1c 	bl	8007c5c <_malloc_r>
 800b624:	4606      	mov	r6, r0
 800b626:	b950      	cbnz	r0, 800b63e <__ssputs_r+0x5c>
 800b628:	230c      	movs	r3, #12
 800b62a:	f8ca 3000 	str.w	r3, [sl]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63e:	6921      	ldr	r1, [r4, #16]
 800b640:	464a      	mov	r2, r9
 800b642:	f7ff fadd 	bl	800ac00 <memcpy>
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	6126      	str	r6, [r4, #16]
 800b654:	6165      	str	r5, [r4, #20]
 800b656:	444e      	add	r6, r9
 800b658:	eba5 0509 	sub.w	r5, r5, r9
 800b65c:	6026      	str	r6, [r4, #0]
 800b65e:	60a5      	str	r5, [r4, #8]
 800b660:	463e      	mov	r6, r7
 800b662:	42be      	cmp	r6, r7
 800b664:	d900      	bls.n	800b668 <__ssputs_r+0x86>
 800b666:	463e      	mov	r6, r7
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	4632      	mov	r2, r6
 800b66c:	4641      	mov	r1, r8
 800b66e:	f000 f970 	bl	800b952 <memmove>
 800b672:	68a3      	ldr	r3, [r4, #8]
 800b674:	1b9b      	subs	r3, r3, r6
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	4433      	add	r3, r6
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	2000      	movs	r0, #0
 800b680:	e7db      	b.n	800b63a <__ssputs_r+0x58>
 800b682:	462a      	mov	r2, r5
 800b684:	f000 f97f 	bl	800b986 <_realloc_r>
 800b688:	4606      	mov	r6, r0
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d1e1      	bne.n	800b652 <__ssputs_r+0x70>
 800b68e:	6921      	ldr	r1, [r4, #16]
 800b690:	4650      	mov	r0, sl
 800b692:	f7fc fa77 	bl	8007b84 <_free_r>
 800b696:	e7c7      	b.n	800b628 <__ssputs_r+0x46>

0800b698 <_svfiprintf_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	4698      	mov	r8, r3
 800b69e:	898b      	ldrh	r3, [r1, #12]
 800b6a0:	061b      	lsls	r3, r3, #24
 800b6a2:	b09d      	sub	sp, #116	; 0x74
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	d50e      	bpl.n	800b6ca <_svfiprintf_r+0x32>
 800b6ac:	690b      	ldr	r3, [r1, #16]
 800b6ae:	b963      	cbnz	r3, 800b6ca <_svfiprintf_r+0x32>
 800b6b0:	2140      	movs	r1, #64	; 0x40
 800b6b2:	f7fc fad3 	bl	8007c5c <_malloc_r>
 800b6b6:	6028      	str	r0, [r5, #0]
 800b6b8:	6128      	str	r0, [r5, #16]
 800b6ba:	b920      	cbnz	r0, 800b6c6 <_svfiprintf_r+0x2e>
 800b6bc:	230c      	movs	r3, #12
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c4:	e0d1      	b.n	800b86a <_svfiprintf_r+0x1d2>
 800b6c6:	2340      	movs	r3, #64	; 0x40
 800b6c8:	616b      	str	r3, [r5, #20]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ce:	2320      	movs	r3, #32
 800b6d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6d8:	2330      	movs	r3, #48	; 0x30
 800b6da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b884 <_svfiprintf_r+0x1ec>
 800b6de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6e2:	f04f 0901 	mov.w	r9, #1
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ee:	b10a      	cbz	r2, 800b6f4 <_svfiprintf_r+0x5c>
 800b6f0:	2a25      	cmp	r2, #37	; 0x25
 800b6f2:	d1f9      	bne.n	800b6e8 <_svfiprintf_r+0x50>
 800b6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6f8:	d00b      	beq.n	800b712 <_svfiprintf_r+0x7a>
 800b6fa:	465b      	mov	r3, fp
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff ff6e 	bl	800b5e2 <__ssputs_r>
 800b706:	3001      	adds	r0, #1
 800b708:	f000 80aa 	beq.w	800b860 <_svfiprintf_r+0x1c8>
 800b70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b70e:	445a      	add	r2, fp
 800b710:	9209      	str	r2, [sp, #36]	; 0x24
 800b712:	f89a 3000 	ldrb.w	r3, [sl]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 80a2 	beq.w	800b860 <_svfiprintf_r+0x1c8>
 800b71c:	2300      	movs	r3, #0
 800b71e:	f04f 32ff 	mov.w	r2, #4294967295
 800b722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b726:	f10a 0a01 	add.w	sl, sl, #1
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	9307      	str	r3, [sp, #28]
 800b72e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b732:	931a      	str	r3, [sp, #104]	; 0x68
 800b734:	4654      	mov	r4, sl
 800b736:	2205      	movs	r2, #5
 800b738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73c:	4851      	ldr	r0, [pc, #324]	; (800b884 <_svfiprintf_r+0x1ec>)
 800b73e:	f7f4 fd57 	bl	80001f0 <memchr>
 800b742:	9a04      	ldr	r2, [sp, #16]
 800b744:	b9d8      	cbnz	r0, 800b77e <_svfiprintf_r+0xe6>
 800b746:	06d0      	lsls	r0, r2, #27
 800b748:	bf44      	itt	mi
 800b74a:	2320      	movmi	r3, #32
 800b74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b750:	0711      	lsls	r1, r2, #28
 800b752:	bf44      	itt	mi
 800b754:	232b      	movmi	r3, #43	; 0x2b
 800b756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b75a:	f89a 3000 	ldrb.w	r3, [sl]
 800b75e:	2b2a      	cmp	r3, #42	; 0x2a
 800b760:	d015      	beq.n	800b78e <_svfiprintf_r+0xf6>
 800b762:	9a07      	ldr	r2, [sp, #28]
 800b764:	4654      	mov	r4, sl
 800b766:	2000      	movs	r0, #0
 800b768:	f04f 0c0a 	mov.w	ip, #10
 800b76c:	4621      	mov	r1, r4
 800b76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b772:	3b30      	subs	r3, #48	; 0x30
 800b774:	2b09      	cmp	r3, #9
 800b776:	d94e      	bls.n	800b816 <_svfiprintf_r+0x17e>
 800b778:	b1b0      	cbz	r0, 800b7a8 <_svfiprintf_r+0x110>
 800b77a:	9207      	str	r2, [sp, #28]
 800b77c:	e014      	b.n	800b7a8 <_svfiprintf_r+0x110>
 800b77e:	eba0 0308 	sub.w	r3, r0, r8
 800b782:	fa09 f303 	lsl.w	r3, r9, r3
 800b786:	4313      	orrs	r3, r2
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	46a2      	mov	sl, r4
 800b78c:	e7d2      	b.n	800b734 <_svfiprintf_r+0x9c>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	1d19      	adds	r1, r3, #4
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	9103      	str	r1, [sp, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfbb      	ittet	lt
 800b79a:	425b      	neglt	r3, r3
 800b79c:	f042 0202 	orrlt.w	r2, r2, #2
 800b7a0:	9307      	strge	r3, [sp, #28]
 800b7a2:	9307      	strlt	r3, [sp, #28]
 800b7a4:	bfb8      	it	lt
 800b7a6:	9204      	strlt	r2, [sp, #16]
 800b7a8:	7823      	ldrb	r3, [r4, #0]
 800b7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ac:	d10c      	bne.n	800b7c8 <_svfiprintf_r+0x130>
 800b7ae:	7863      	ldrb	r3, [r4, #1]
 800b7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b2:	d135      	bne.n	800b820 <_svfiprintf_r+0x188>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	9203      	str	r2, [sp, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	bfb8      	it	lt
 800b7c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7c4:	3402      	adds	r4, #2
 800b7c6:	9305      	str	r3, [sp, #20]
 800b7c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b894 <_svfiprintf_r+0x1fc>
 800b7cc:	7821      	ldrb	r1, [r4, #0]
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	4650      	mov	r0, sl
 800b7d2:	f7f4 fd0d 	bl	80001f0 <memchr>
 800b7d6:	b140      	cbz	r0, 800b7ea <_svfiprintf_r+0x152>
 800b7d8:	2340      	movs	r3, #64	; 0x40
 800b7da:	eba0 000a 	sub.w	r0, r0, sl
 800b7de:	fa03 f000 	lsl.w	r0, r3, r0
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	4303      	orrs	r3, r0
 800b7e6:	3401      	adds	r4, #1
 800b7e8:	9304      	str	r3, [sp, #16]
 800b7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ee:	4826      	ldr	r0, [pc, #152]	; (800b888 <_svfiprintf_r+0x1f0>)
 800b7f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7f4:	2206      	movs	r2, #6
 800b7f6:	f7f4 fcfb 	bl	80001f0 <memchr>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d038      	beq.n	800b870 <_svfiprintf_r+0x1d8>
 800b7fe:	4b23      	ldr	r3, [pc, #140]	; (800b88c <_svfiprintf_r+0x1f4>)
 800b800:	bb1b      	cbnz	r3, 800b84a <_svfiprintf_r+0x1b2>
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	3307      	adds	r3, #7
 800b806:	f023 0307 	bic.w	r3, r3, #7
 800b80a:	3308      	adds	r3, #8
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	4433      	add	r3, r6
 800b812:	9309      	str	r3, [sp, #36]	; 0x24
 800b814:	e767      	b.n	800b6e6 <_svfiprintf_r+0x4e>
 800b816:	fb0c 3202 	mla	r2, ip, r2, r3
 800b81a:	460c      	mov	r4, r1
 800b81c:	2001      	movs	r0, #1
 800b81e:	e7a5      	b.n	800b76c <_svfiprintf_r+0xd4>
 800b820:	2300      	movs	r3, #0
 800b822:	3401      	adds	r4, #1
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	4619      	mov	r1, r3
 800b828:	f04f 0c0a 	mov.w	ip, #10
 800b82c:	4620      	mov	r0, r4
 800b82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b832:	3a30      	subs	r2, #48	; 0x30
 800b834:	2a09      	cmp	r2, #9
 800b836:	d903      	bls.n	800b840 <_svfiprintf_r+0x1a8>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0c5      	beq.n	800b7c8 <_svfiprintf_r+0x130>
 800b83c:	9105      	str	r1, [sp, #20]
 800b83e:	e7c3      	b.n	800b7c8 <_svfiprintf_r+0x130>
 800b840:	fb0c 2101 	mla	r1, ip, r1, r2
 800b844:	4604      	mov	r4, r0
 800b846:	2301      	movs	r3, #1
 800b848:	e7f0      	b.n	800b82c <_svfiprintf_r+0x194>
 800b84a:	ab03      	add	r3, sp, #12
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	462a      	mov	r2, r5
 800b850:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <_svfiprintf_r+0x1f8>)
 800b852:	a904      	add	r1, sp, #16
 800b854:	4638      	mov	r0, r7
 800b856:	f7fc fb15 	bl	8007e84 <_printf_float>
 800b85a:	1c42      	adds	r2, r0, #1
 800b85c:	4606      	mov	r6, r0
 800b85e:	d1d6      	bne.n	800b80e <_svfiprintf_r+0x176>
 800b860:	89ab      	ldrh	r3, [r5, #12]
 800b862:	065b      	lsls	r3, r3, #25
 800b864:	f53f af2c 	bmi.w	800b6c0 <_svfiprintf_r+0x28>
 800b868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b86a:	b01d      	add	sp, #116	; 0x74
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	ab03      	add	r3, sp, #12
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	462a      	mov	r2, r5
 800b876:	4b06      	ldr	r3, [pc, #24]	; (800b890 <_svfiprintf_r+0x1f8>)
 800b878:	a904      	add	r1, sp, #16
 800b87a:	4638      	mov	r0, r7
 800b87c:	f7fc fda6 	bl	80083cc <_printf_i>
 800b880:	e7eb      	b.n	800b85a <_svfiprintf_r+0x1c2>
 800b882:	bf00      	nop
 800b884:	0800c8c4 	.word	0x0800c8c4
 800b888:	0800c8ce 	.word	0x0800c8ce
 800b88c:	08007e85 	.word	0x08007e85
 800b890:	0800b5e3 	.word	0x0800b5e3
 800b894:	0800c8ca 	.word	0x0800c8ca

0800b898 <nan>:
 800b898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b8a0 <nan+0x8>
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	00000000 	.word	0x00000000
 800b8a4:	7ff80000 	.word	0x7ff80000

0800b8a8 <strncmp>:
 800b8a8:	b510      	push	{r4, lr}
 800b8aa:	b17a      	cbz	r2, 800b8cc <strncmp+0x24>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	3901      	subs	r1, #1
 800b8b0:	1884      	adds	r4, r0, r2
 800b8b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8ba:	4290      	cmp	r0, r2
 800b8bc:	d101      	bne.n	800b8c2 <strncmp+0x1a>
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	d101      	bne.n	800b8c6 <strncmp+0x1e>
 800b8c2:	1a80      	subs	r0, r0, r2
 800b8c4:	bd10      	pop	{r4, pc}
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d1f3      	bne.n	800b8b2 <strncmp+0xa>
 800b8ca:	e7fa      	b.n	800b8c2 <strncmp+0x1a>
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	e7f9      	b.n	800b8c4 <strncmp+0x1c>

0800b8d0 <__ascii_wctomb>:
 800b8d0:	b149      	cbz	r1, 800b8e6 <__ascii_wctomb+0x16>
 800b8d2:	2aff      	cmp	r2, #255	; 0xff
 800b8d4:	bf85      	ittet	hi
 800b8d6:	238a      	movhi	r3, #138	; 0x8a
 800b8d8:	6003      	strhi	r3, [r0, #0]
 800b8da:	700a      	strbls	r2, [r1, #0]
 800b8dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8e0:	bf98      	it	ls
 800b8e2:	2001      	movls	r0, #1
 800b8e4:	4770      	bx	lr
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4770      	bx	lr
	...

0800b8ec <__assert_func>:
 800b8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4b09      	ldr	r3, [pc, #36]	; (800b918 <__assert_func+0x2c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	68d8      	ldr	r0, [r3, #12]
 800b8fa:	b14c      	cbz	r4, 800b910 <__assert_func+0x24>
 800b8fc:	4b07      	ldr	r3, [pc, #28]	; (800b91c <__assert_func+0x30>)
 800b8fe:	9100      	str	r1, [sp, #0]
 800b900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b904:	4906      	ldr	r1, [pc, #24]	; (800b920 <__assert_func+0x34>)
 800b906:	462b      	mov	r3, r5
 800b908:	f000 f80e 	bl	800b928 <fiprintf>
 800b90c:	f000 fa84 	bl	800be18 <abort>
 800b910:	4b04      	ldr	r3, [pc, #16]	; (800b924 <__assert_func+0x38>)
 800b912:	461c      	mov	r4, r3
 800b914:	e7f3      	b.n	800b8fe <__assert_func+0x12>
 800b916:	bf00      	nop
 800b918:	200000fc 	.word	0x200000fc
 800b91c:	0800c8d5 	.word	0x0800c8d5
 800b920:	0800c8e2 	.word	0x0800c8e2
 800b924:	0800c910 	.word	0x0800c910

0800b928 <fiprintf>:
 800b928:	b40e      	push	{r1, r2, r3}
 800b92a:	b503      	push	{r0, r1, lr}
 800b92c:	4601      	mov	r1, r0
 800b92e:	ab03      	add	r3, sp, #12
 800b930:	4805      	ldr	r0, [pc, #20]	; (800b948 <fiprintf+0x20>)
 800b932:	f853 2b04 	ldr.w	r2, [r3], #4
 800b936:	6800      	ldr	r0, [r0, #0]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	f000 f87d 	bl	800ba38 <_vfiprintf_r>
 800b93e:	b002      	add	sp, #8
 800b940:	f85d eb04 	ldr.w	lr, [sp], #4
 800b944:	b003      	add	sp, #12
 800b946:	4770      	bx	lr
 800b948:	200000fc 	.word	0x200000fc

0800b94c <__retarget_lock_init_recursive>:
 800b94c:	4770      	bx	lr

0800b94e <__retarget_lock_acquire_recursive>:
 800b94e:	4770      	bx	lr

0800b950 <__retarget_lock_release_recursive>:
 800b950:	4770      	bx	lr

0800b952 <memmove>:
 800b952:	4288      	cmp	r0, r1
 800b954:	b510      	push	{r4, lr}
 800b956:	eb01 0402 	add.w	r4, r1, r2
 800b95a:	d902      	bls.n	800b962 <memmove+0x10>
 800b95c:	4284      	cmp	r4, r0
 800b95e:	4623      	mov	r3, r4
 800b960:	d807      	bhi.n	800b972 <memmove+0x20>
 800b962:	1e43      	subs	r3, r0, #1
 800b964:	42a1      	cmp	r1, r4
 800b966:	d008      	beq.n	800b97a <memmove+0x28>
 800b968:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b96c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b970:	e7f8      	b.n	800b964 <memmove+0x12>
 800b972:	4402      	add	r2, r0
 800b974:	4601      	mov	r1, r0
 800b976:	428a      	cmp	r2, r1
 800b978:	d100      	bne.n	800b97c <memmove+0x2a>
 800b97a:	bd10      	pop	{r4, pc}
 800b97c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b980:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b984:	e7f7      	b.n	800b976 <memmove+0x24>

0800b986 <_realloc_r>:
 800b986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98a:	4680      	mov	r8, r0
 800b98c:	4614      	mov	r4, r2
 800b98e:	460e      	mov	r6, r1
 800b990:	b921      	cbnz	r1, 800b99c <_realloc_r+0x16>
 800b992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	4611      	mov	r1, r2
 800b998:	f7fc b960 	b.w	8007c5c <_malloc_r>
 800b99c:	b92a      	cbnz	r2, 800b9aa <_realloc_r+0x24>
 800b99e:	f7fc f8f1 	bl	8007b84 <_free_r>
 800b9a2:	4625      	mov	r5, r4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9aa:	f000 fc59 	bl	800c260 <_malloc_usable_size_r>
 800b9ae:	4284      	cmp	r4, r0
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	d802      	bhi.n	800b9ba <_realloc_r+0x34>
 800b9b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9b8:	d812      	bhi.n	800b9e0 <_realloc_r+0x5a>
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4640      	mov	r0, r8
 800b9be:	f7fc f94d 	bl	8007c5c <_malloc_r>
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0ed      	beq.n	800b9a4 <_realloc_r+0x1e>
 800b9c8:	42bc      	cmp	r4, r7
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	bf28      	it	cs
 800b9d0:	463a      	movcs	r2, r7
 800b9d2:	f7ff f915 	bl	800ac00 <memcpy>
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4640      	mov	r0, r8
 800b9da:	f7fc f8d3 	bl	8007b84 <_free_r>
 800b9de:	e7e1      	b.n	800b9a4 <_realloc_r+0x1e>
 800b9e0:	4635      	mov	r5, r6
 800b9e2:	e7df      	b.n	800b9a4 <_realloc_r+0x1e>

0800b9e4 <__sfputc_r>:
 800b9e4:	6893      	ldr	r3, [r2, #8]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	b410      	push	{r4}
 800b9ec:	6093      	str	r3, [r2, #8]
 800b9ee:	da08      	bge.n	800ba02 <__sfputc_r+0x1e>
 800b9f0:	6994      	ldr	r4, [r2, #24]
 800b9f2:	42a3      	cmp	r3, r4
 800b9f4:	db01      	blt.n	800b9fa <__sfputc_r+0x16>
 800b9f6:	290a      	cmp	r1, #10
 800b9f8:	d103      	bne.n	800ba02 <__sfputc_r+0x1e>
 800b9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9fe:	f000 b94b 	b.w	800bc98 <__swbuf_r>
 800ba02:	6813      	ldr	r3, [r2, #0]
 800ba04:	1c58      	adds	r0, r3, #1
 800ba06:	6010      	str	r0, [r2, #0]
 800ba08:	7019      	strb	r1, [r3, #0]
 800ba0a:	4608      	mov	r0, r1
 800ba0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <__sfputs_r>:
 800ba12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba14:	4606      	mov	r6, r0
 800ba16:	460f      	mov	r7, r1
 800ba18:	4614      	mov	r4, r2
 800ba1a:	18d5      	adds	r5, r2, r3
 800ba1c:	42ac      	cmp	r4, r5
 800ba1e:	d101      	bne.n	800ba24 <__sfputs_r+0x12>
 800ba20:	2000      	movs	r0, #0
 800ba22:	e007      	b.n	800ba34 <__sfputs_r+0x22>
 800ba24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba28:	463a      	mov	r2, r7
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7ff ffda 	bl	800b9e4 <__sfputc_r>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d1f3      	bne.n	800ba1c <__sfputs_r+0xa>
 800ba34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba38 <_vfiprintf_r>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	460d      	mov	r5, r1
 800ba3e:	b09d      	sub	sp, #116	; 0x74
 800ba40:	4614      	mov	r4, r2
 800ba42:	4698      	mov	r8, r3
 800ba44:	4606      	mov	r6, r0
 800ba46:	b118      	cbz	r0, 800ba50 <_vfiprintf_r+0x18>
 800ba48:	6983      	ldr	r3, [r0, #24]
 800ba4a:	b90b      	cbnz	r3, 800ba50 <_vfiprintf_r+0x18>
 800ba4c:	f000 fb06 	bl	800c05c <__sinit>
 800ba50:	4b89      	ldr	r3, [pc, #548]	; (800bc78 <_vfiprintf_r+0x240>)
 800ba52:	429d      	cmp	r5, r3
 800ba54:	d11b      	bne.n	800ba8e <_vfiprintf_r+0x56>
 800ba56:	6875      	ldr	r5, [r6, #4]
 800ba58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba5a:	07d9      	lsls	r1, r3, #31
 800ba5c:	d405      	bmi.n	800ba6a <_vfiprintf_r+0x32>
 800ba5e:	89ab      	ldrh	r3, [r5, #12]
 800ba60:	059a      	lsls	r2, r3, #22
 800ba62:	d402      	bmi.n	800ba6a <_vfiprintf_r+0x32>
 800ba64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba66:	f7ff ff72 	bl	800b94e <__retarget_lock_acquire_recursive>
 800ba6a:	89ab      	ldrh	r3, [r5, #12]
 800ba6c:	071b      	lsls	r3, r3, #28
 800ba6e:	d501      	bpl.n	800ba74 <_vfiprintf_r+0x3c>
 800ba70:	692b      	ldr	r3, [r5, #16]
 800ba72:	b9eb      	cbnz	r3, 800bab0 <_vfiprintf_r+0x78>
 800ba74:	4629      	mov	r1, r5
 800ba76:	4630      	mov	r0, r6
 800ba78:	f000 f960 	bl	800bd3c <__swsetup_r>
 800ba7c:	b1c0      	cbz	r0, 800bab0 <_vfiprintf_r+0x78>
 800ba7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba80:	07dc      	lsls	r4, r3, #31
 800ba82:	d50e      	bpl.n	800baa2 <_vfiprintf_r+0x6a>
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	b01d      	add	sp, #116	; 0x74
 800ba8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8e:	4b7b      	ldr	r3, [pc, #492]	; (800bc7c <_vfiprintf_r+0x244>)
 800ba90:	429d      	cmp	r5, r3
 800ba92:	d101      	bne.n	800ba98 <_vfiprintf_r+0x60>
 800ba94:	68b5      	ldr	r5, [r6, #8]
 800ba96:	e7df      	b.n	800ba58 <_vfiprintf_r+0x20>
 800ba98:	4b79      	ldr	r3, [pc, #484]	; (800bc80 <_vfiprintf_r+0x248>)
 800ba9a:	429d      	cmp	r5, r3
 800ba9c:	bf08      	it	eq
 800ba9e:	68f5      	ldreq	r5, [r6, #12]
 800baa0:	e7da      	b.n	800ba58 <_vfiprintf_r+0x20>
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	0598      	lsls	r0, r3, #22
 800baa6:	d4ed      	bmi.n	800ba84 <_vfiprintf_r+0x4c>
 800baa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baaa:	f7ff ff51 	bl	800b950 <__retarget_lock_release_recursive>
 800baae:	e7e9      	b.n	800ba84 <_vfiprintf_r+0x4c>
 800bab0:	2300      	movs	r3, #0
 800bab2:	9309      	str	r3, [sp, #36]	; 0x24
 800bab4:	2320      	movs	r3, #32
 800bab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baba:	f8cd 800c 	str.w	r8, [sp, #12]
 800babe:	2330      	movs	r3, #48	; 0x30
 800bac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc84 <_vfiprintf_r+0x24c>
 800bac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bac8:	f04f 0901 	mov.w	r9, #1
 800bacc:	4623      	mov	r3, r4
 800bace:	469a      	mov	sl, r3
 800bad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad4:	b10a      	cbz	r2, 800bada <_vfiprintf_r+0xa2>
 800bad6:	2a25      	cmp	r2, #37	; 0x25
 800bad8:	d1f9      	bne.n	800bace <_vfiprintf_r+0x96>
 800bada:	ebba 0b04 	subs.w	fp, sl, r4
 800bade:	d00b      	beq.n	800baf8 <_vfiprintf_r+0xc0>
 800bae0:	465b      	mov	r3, fp
 800bae2:	4622      	mov	r2, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7ff ff93 	bl	800ba12 <__sfputs_r>
 800baec:	3001      	adds	r0, #1
 800baee:	f000 80aa 	beq.w	800bc46 <_vfiprintf_r+0x20e>
 800baf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baf4:	445a      	add	r2, fp
 800baf6:	9209      	str	r2, [sp, #36]	; 0x24
 800baf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 80a2 	beq.w	800bc46 <_vfiprintf_r+0x20e>
 800bb02:	2300      	movs	r3, #0
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb0c:	f10a 0a01 	add.w	sl, sl, #1
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	9307      	str	r3, [sp, #28]
 800bb14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb18:	931a      	str	r3, [sp, #104]	; 0x68
 800bb1a:	4654      	mov	r4, sl
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb22:	4858      	ldr	r0, [pc, #352]	; (800bc84 <_vfiprintf_r+0x24c>)
 800bb24:	f7f4 fb64 	bl	80001f0 <memchr>
 800bb28:	9a04      	ldr	r2, [sp, #16]
 800bb2a:	b9d8      	cbnz	r0, 800bb64 <_vfiprintf_r+0x12c>
 800bb2c:	06d1      	lsls	r1, r2, #27
 800bb2e:	bf44      	itt	mi
 800bb30:	2320      	movmi	r3, #32
 800bb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb36:	0713      	lsls	r3, r2, #28
 800bb38:	bf44      	itt	mi
 800bb3a:	232b      	movmi	r3, #43	; 0x2b
 800bb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb40:	f89a 3000 	ldrb.w	r3, [sl]
 800bb44:	2b2a      	cmp	r3, #42	; 0x2a
 800bb46:	d015      	beq.n	800bb74 <_vfiprintf_r+0x13c>
 800bb48:	9a07      	ldr	r2, [sp, #28]
 800bb4a:	4654      	mov	r4, sl
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f04f 0c0a 	mov.w	ip, #10
 800bb52:	4621      	mov	r1, r4
 800bb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb58:	3b30      	subs	r3, #48	; 0x30
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d94e      	bls.n	800bbfc <_vfiprintf_r+0x1c4>
 800bb5e:	b1b0      	cbz	r0, 800bb8e <_vfiprintf_r+0x156>
 800bb60:	9207      	str	r2, [sp, #28]
 800bb62:	e014      	b.n	800bb8e <_vfiprintf_r+0x156>
 800bb64:	eba0 0308 	sub.w	r3, r0, r8
 800bb68:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	46a2      	mov	sl, r4
 800bb72:	e7d2      	b.n	800bb1a <_vfiprintf_r+0xe2>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	1d19      	adds	r1, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	9103      	str	r1, [sp, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	bfbb      	ittet	lt
 800bb80:	425b      	neglt	r3, r3
 800bb82:	f042 0202 	orrlt.w	r2, r2, #2
 800bb86:	9307      	strge	r3, [sp, #28]
 800bb88:	9307      	strlt	r3, [sp, #28]
 800bb8a:	bfb8      	it	lt
 800bb8c:	9204      	strlt	r2, [sp, #16]
 800bb8e:	7823      	ldrb	r3, [r4, #0]
 800bb90:	2b2e      	cmp	r3, #46	; 0x2e
 800bb92:	d10c      	bne.n	800bbae <_vfiprintf_r+0x176>
 800bb94:	7863      	ldrb	r3, [r4, #1]
 800bb96:	2b2a      	cmp	r3, #42	; 0x2a
 800bb98:	d135      	bne.n	800bc06 <_vfiprintf_r+0x1ce>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	9203      	str	r2, [sp, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfb8      	it	lt
 800bba6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbaa:	3402      	adds	r4, #2
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc94 <_vfiprintf_r+0x25c>
 800bbb2:	7821      	ldrb	r1, [r4, #0]
 800bbb4:	2203      	movs	r2, #3
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	f7f4 fb1a 	bl	80001f0 <memchr>
 800bbbc:	b140      	cbz	r0, 800bbd0 <_vfiprintf_r+0x198>
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	eba0 000a 	sub.w	r0, r0, sl
 800bbc4:	fa03 f000 	lsl.w	r0, r3, r0
 800bbc8:	9b04      	ldr	r3, [sp, #16]
 800bbca:	4303      	orrs	r3, r0
 800bbcc:	3401      	adds	r4, #1
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd4:	482c      	ldr	r0, [pc, #176]	; (800bc88 <_vfiprintf_r+0x250>)
 800bbd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbda:	2206      	movs	r2, #6
 800bbdc:	f7f4 fb08 	bl	80001f0 <memchr>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d03f      	beq.n	800bc64 <_vfiprintf_r+0x22c>
 800bbe4:	4b29      	ldr	r3, [pc, #164]	; (800bc8c <_vfiprintf_r+0x254>)
 800bbe6:	bb1b      	cbnz	r3, 800bc30 <_vfiprintf_r+0x1f8>
 800bbe8:	9b03      	ldr	r3, [sp, #12]
 800bbea:	3307      	adds	r3, #7
 800bbec:	f023 0307 	bic.w	r3, r3, #7
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	9303      	str	r3, [sp, #12]
 800bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf6:	443b      	add	r3, r7
 800bbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfa:	e767      	b.n	800bacc <_vfiprintf_r+0x94>
 800bbfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc00:	460c      	mov	r4, r1
 800bc02:	2001      	movs	r0, #1
 800bc04:	e7a5      	b.n	800bb52 <_vfiprintf_r+0x11a>
 800bc06:	2300      	movs	r3, #0
 800bc08:	3401      	adds	r4, #1
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	f04f 0c0a 	mov.w	ip, #10
 800bc12:	4620      	mov	r0, r4
 800bc14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc18:	3a30      	subs	r2, #48	; 0x30
 800bc1a:	2a09      	cmp	r2, #9
 800bc1c:	d903      	bls.n	800bc26 <_vfiprintf_r+0x1ee>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0c5      	beq.n	800bbae <_vfiprintf_r+0x176>
 800bc22:	9105      	str	r1, [sp, #20]
 800bc24:	e7c3      	b.n	800bbae <_vfiprintf_r+0x176>
 800bc26:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e7f0      	b.n	800bc12 <_vfiprintf_r+0x1da>
 800bc30:	ab03      	add	r3, sp, #12
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	462a      	mov	r2, r5
 800bc36:	4b16      	ldr	r3, [pc, #88]	; (800bc90 <_vfiprintf_r+0x258>)
 800bc38:	a904      	add	r1, sp, #16
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7fc f922 	bl	8007e84 <_printf_float>
 800bc40:	4607      	mov	r7, r0
 800bc42:	1c78      	adds	r0, r7, #1
 800bc44:	d1d6      	bne.n	800bbf4 <_vfiprintf_r+0x1bc>
 800bc46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc48:	07d9      	lsls	r1, r3, #31
 800bc4a:	d405      	bmi.n	800bc58 <_vfiprintf_r+0x220>
 800bc4c:	89ab      	ldrh	r3, [r5, #12]
 800bc4e:	059a      	lsls	r2, r3, #22
 800bc50:	d402      	bmi.n	800bc58 <_vfiprintf_r+0x220>
 800bc52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc54:	f7ff fe7c 	bl	800b950 <__retarget_lock_release_recursive>
 800bc58:	89ab      	ldrh	r3, [r5, #12]
 800bc5a:	065b      	lsls	r3, r3, #25
 800bc5c:	f53f af12 	bmi.w	800ba84 <_vfiprintf_r+0x4c>
 800bc60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc62:	e711      	b.n	800ba88 <_vfiprintf_r+0x50>
 800bc64:	ab03      	add	r3, sp, #12
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	462a      	mov	r2, r5
 800bc6a:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <_vfiprintf_r+0x258>)
 800bc6c:	a904      	add	r1, sp, #16
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7fc fbac 	bl	80083cc <_printf_i>
 800bc74:	e7e4      	b.n	800bc40 <_vfiprintf_r+0x208>
 800bc76:	bf00      	nop
 800bc78:	0800c934 	.word	0x0800c934
 800bc7c:	0800c954 	.word	0x0800c954
 800bc80:	0800c914 	.word	0x0800c914
 800bc84:	0800c8c4 	.word	0x0800c8c4
 800bc88:	0800c8ce 	.word	0x0800c8ce
 800bc8c:	08007e85 	.word	0x08007e85
 800bc90:	0800ba13 	.word	0x0800ba13
 800bc94:	0800c8ca 	.word	0x0800c8ca

0800bc98 <__swbuf_r>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	460e      	mov	r6, r1
 800bc9c:	4614      	mov	r4, r2
 800bc9e:	4605      	mov	r5, r0
 800bca0:	b118      	cbz	r0, 800bcaa <__swbuf_r+0x12>
 800bca2:	6983      	ldr	r3, [r0, #24]
 800bca4:	b90b      	cbnz	r3, 800bcaa <__swbuf_r+0x12>
 800bca6:	f000 f9d9 	bl	800c05c <__sinit>
 800bcaa:	4b21      	ldr	r3, [pc, #132]	; (800bd30 <__swbuf_r+0x98>)
 800bcac:	429c      	cmp	r4, r3
 800bcae:	d12b      	bne.n	800bd08 <__swbuf_r+0x70>
 800bcb0:	686c      	ldr	r4, [r5, #4]
 800bcb2:	69a3      	ldr	r3, [r4, #24]
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	071a      	lsls	r2, r3, #28
 800bcba:	d52f      	bpl.n	800bd1c <__swbuf_r+0x84>
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	b36b      	cbz	r3, 800bd1c <__swbuf_r+0x84>
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	6820      	ldr	r0, [r4, #0]
 800bcc4:	1ac0      	subs	r0, r0, r3
 800bcc6:	6963      	ldr	r3, [r4, #20]
 800bcc8:	b2f6      	uxtb	r6, r6
 800bcca:	4283      	cmp	r3, r0
 800bccc:	4637      	mov	r7, r6
 800bcce:	dc04      	bgt.n	800bcda <__swbuf_r+0x42>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f000 f92e 	bl	800bf34 <_fflush_r>
 800bcd8:	bb30      	cbnz	r0, 800bd28 <__swbuf_r+0x90>
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	60a3      	str	r3, [r4, #8]
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	6022      	str	r2, [r4, #0]
 800bce6:	701e      	strb	r6, [r3, #0]
 800bce8:	6963      	ldr	r3, [r4, #20]
 800bcea:	3001      	adds	r0, #1
 800bcec:	4283      	cmp	r3, r0
 800bcee:	d004      	beq.n	800bcfa <__swbuf_r+0x62>
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	07db      	lsls	r3, r3, #31
 800bcf4:	d506      	bpl.n	800bd04 <__swbuf_r+0x6c>
 800bcf6:	2e0a      	cmp	r6, #10
 800bcf8:	d104      	bne.n	800bd04 <__swbuf_r+0x6c>
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f000 f919 	bl	800bf34 <_fflush_r>
 800bd02:	b988      	cbnz	r0, 800bd28 <__swbuf_r+0x90>
 800bd04:	4638      	mov	r0, r7
 800bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <__swbuf_r+0x9c>)
 800bd0a:	429c      	cmp	r4, r3
 800bd0c:	d101      	bne.n	800bd12 <__swbuf_r+0x7a>
 800bd0e:	68ac      	ldr	r4, [r5, #8]
 800bd10:	e7cf      	b.n	800bcb2 <__swbuf_r+0x1a>
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <__swbuf_r+0xa0>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	bf08      	it	eq
 800bd18:	68ec      	ldreq	r4, [r5, #12]
 800bd1a:	e7ca      	b.n	800bcb2 <__swbuf_r+0x1a>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f000 f80c 	bl	800bd3c <__swsetup_r>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d0cb      	beq.n	800bcc0 <__swbuf_r+0x28>
 800bd28:	f04f 37ff 	mov.w	r7, #4294967295
 800bd2c:	e7ea      	b.n	800bd04 <__swbuf_r+0x6c>
 800bd2e:	bf00      	nop
 800bd30:	0800c934 	.word	0x0800c934
 800bd34:	0800c954 	.word	0x0800c954
 800bd38:	0800c914 	.word	0x0800c914

0800bd3c <__swsetup_r>:
 800bd3c:	4b32      	ldr	r3, [pc, #200]	; (800be08 <__swsetup_r+0xcc>)
 800bd3e:	b570      	push	{r4, r5, r6, lr}
 800bd40:	681d      	ldr	r5, [r3, #0]
 800bd42:	4606      	mov	r6, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	b125      	cbz	r5, 800bd52 <__swsetup_r+0x16>
 800bd48:	69ab      	ldr	r3, [r5, #24]
 800bd4a:	b913      	cbnz	r3, 800bd52 <__swsetup_r+0x16>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f000 f985 	bl	800c05c <__sinit>
 800bd52:	4b2e      	ldr	r3, [pc, #184]	; (800be0c <__swsetup_r+0xd0>)
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d10f      	bne.n	800bd78 <__swsetup_r+0x3c>
 800bd58:	686c      	ldr	r4, [r5, #4]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd60:	0719      	lsls	r1, r3, #28
 800bd62:	d42c      	bmi.n	800bdbe <__swsetup_r+0x82>
 800bd64:	06dd      	lsls	r5, r3, #27
 800bd66:	d411      	bmi.n	800bd8c <__swsetup_r+0x50>
 800bd68:	2309      	movs	r3, #9
 800bd6a:	6033      	str	r3, [r6, #0]
 800bd6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd70:	81a3      	strh	r3, [r4, #12]
 800bd72:	f04f 30ff 	mov.w	r0, #4294967295
 800bd76:	e03e      	b.n	800bdf6 <__swsetup_r+0xba>
 800bd78:	4b25      	ldr	r3, [pc, #148]	; (800be10 <__swsetup_r+0xd4>)
 800bd7a:	429c      	cmp	r4, r3
 800bd7c:	d101      	bne.n	800bd82 <__swsetup_r+0x46>
 800bd7e:	68ac      	ldr	r4, [r5, #8]
 800bd80:	e7eb      	b.n	800bd5a <__swsetup_r+0x1e>
 800bd82:	4b24      	ldr	r3, [pc, #144]	; (800be14 <__swsetup_r+0xd8>)
 800bd84:	429c      	cmp	r4, r3
 800bd86:	bf08      	it	eq
 800bd88:	68ec      	ldreq	r4, [r5, #12]
 800bd8a:	e7e6      	b.n	800bd5a <__swsetup_r+0x1e>
 800bd8c:	0758      	lsls	r0, r3, #29
 800bd8e:	d512      	bpl.n	800bdb6 <__swsetup_r+0x7a>
 800bd90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd92:	b141      	cbz	r1, 800bda6 <__swsetup_r+0x6a>
 800bd94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	d002      	beq.n	800bda2 <__swsetup_r+0x66>
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f7fb fef1 	bl	8007b84 <_free_r>
 800bda2:	2300      	movs	r3, #0
 800bda4:	6363      	str	r3, [r4, #52]	; 0x34
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	6063      	str	r3, [r4, #4]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	f043 0308 	orr.w	r3, r3, #8
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	b94b      	cbnz	r3, 800bdd6 <__swsetup_r+0x9a>
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdcc:	d003      	beq.n	800bdd6 <__swsetup_r+0x9a>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f000 fa05 	bl	800c1e0 <__smakebuf_r>
 800bdd6:	89a0      	ldrh	r0, [r4, #12]
 800bdd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bddc:	f010 0301 	ands.w	r3, r0, #1
 800bde0:	d00a      	beq.n	800bdf8 <__swsetup_r+0xbc>
 800bde2:	2300      	movs	r3, #0
 800bde4:	60a3      	str	r3, [r4, #8]
 800bde6:	6963      	ldr	r3, [r4, #20]
 800bde8:	425b      	negs	r3, r3
 800bdea:	61a3      	str	r3, [r4, #24]
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	b943      	cbnz	r3, 800be02 <__swsetup_r+0xc6>
 800bdf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdf4:	d1ba      	bne.n	800bd6c <__swsetup_r+0x30>
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	0781      	lsls	r1, r0, #30
 800bdfa:	bf58      	it	pl
 800bdfc:	6963      	ldrpl	r3, [r4, #20]
 800bdfe:	60a3      	str	r3, [r4, #8]
 800be00:	e7f4      	b.n	800bdec <__swsetup_r+0xb0>
 800be02:	2000      	movs	r0, #0
 800be04:	e7f7      	b.n	800bdf6 <__swsetup_r+0xba>
 800be06:	bf00      	nop
 800be08:	200000fc 	.word	0x200000fc
 800be0c:	0800c934 	.word	0x0800c934
 800be10:	0800c954 	.word	0x0800c954
 800be14:	0800c914 	.word	0x0800c914

0800be18 <abort>:
 800be18:	b508      	push	{r3, lr}
 800be1a:	2006      	movs	r0, #6
 800be1c:	f000 fa50 	bl	800c2c0 <raise>
 800be20:	2001      	movs	r0, #1
 800be22:	f7f5 fa5d 	bl	80012e0 <_exit>
	...

0800be28 <__sflush_r>:
 800be28:	898a      	ldrh	r2, [r1, #12]
 800be2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	4605      	mov	r5, r0
 800be30:	0710      	lsls	r0, r2, #28
 800be32:	460c      	mov	r4, r1
 800be34:	d458      	bmi.n	800bee8 <__sflush_r+0xc0>
 800be36:	684b      	ldr	r3, [r1, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dc05      	bgt.n	800be48 <__sflush_r+0x20>
 800be3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	dc02      	bgt.n	800be48 <__sflush_r+0x20>
 800be42:	2000      	movs	r0, #0
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	d0f9      	beq.n	800be42 <__sflush_r+0x1a>
 800be4e:	2300      	movs	r3, #0
 800be50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be54:	682f      	ldr	r7, [r5, #0]
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	d032      	beq.n	800bec0 <__sflush_r+0x98>
 800be5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	075a      	lsls	r2, r3, #29
 800be60:	d505      	bpl.n	800be6e <__sflush_r+0x46>
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	1ac0      	subs	r0, r0, r3
 800be66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be68:	b10b      	cbz	r3, 800be6e <__sflush_r+0x46>
 800be6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be6c:	1ac0      	subs	r0, r0, r3
 800be6e:	2300      	movs	r3, #0
 800be70:	4602      	mov	r2, r0
 800be72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be74:	6a21      	ldr	r1, [r4, #32]
 800be76:	4628      	mov	r0, r5
 800be78:	47b0      	blx	r6
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	d106      	bne.n	800be8e <__sflush_r+0x66>
 800be80:	6829      	ldr	r1, [r5, #0]
 800be82:	291d      	cmp	r1, #29
 800be84:	d82c      	bhi.n	800bee0 <__sflush_r+0xb8>
 800be86:	4a2a      	ldr	r2, [pc, #168]	; (800bf30 <__sflush_r+0x108>)
 800be88:	40ca      	lsrs	r2, r1
 800be8a:	07d6      	lsls	r6, r2, #31
 800be8c:	d528      	bpl.n	800bee0 <__sflush_r+0xb8>
 800be8e:	2200      	movs	r2, #0
 800be90:	6062      	str	r2, [r4, #4]
 800be92:	04d9      	lsls	r1, r3, #19
 800be94:	6922      	ldr	r2, [r4, #16]
 800be96:	6022      	str	r2, [r4, #0]
 800be98:	d504      	bpl.n	800bea4 <__sflush_r+0x7c>
 800be9a:	1c42      	adds	r2, r0, #1
 800be9c:	d101      	bne.n	800bea2 <__sflush_r+0x7a>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	b903      	cbnz	r3, 800bea4 <__sflush_r+0x7c>
 800bea2:	6560      	str	r0, [r4, #84]	; 0x54
 800bea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bea6:	602f      	str	r7, [r5, #0]
 800bea8:	2900      	cmp	r1, #0
 800beaa:	d0ca      	beq.n	800be42 <__sflush_r+0x1a>
 800beac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beb0:	4299      	cmp	r1, r3
 800beb2:	d002      	beq.n	800beba <__sflush_r+0x92>
 800beb4:	4628      	mov	r0, r5
 800beb6:	f7fb fe65 	bl	8007b84 <_free_r>
 800beba:	2000      	movs	r0, #0
 800bebc:	6360      	str	r0, [r4, #52]	; 0x34
 800bebe:	e7c1      	b.n	800be44 <__sflush_r+0x1c>
 800bec0:	6a21      	ldr	r1, [r4, #32]
 800bec2:	2301      	movs	r3, #1
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b0      	blx	r6
 800bec8:	1c41      	adds	r1, r0, #1
 800beca:	d1c7      	bne.n	800be5c <__sflush_r+0x34>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0c4      	beq.n	800be5c <__sflush_r+0x34>
 800bed2:	2b1d      	cmp	r3, #29
 800bed4:	d001      	beq.n	800beda <__sflush_r+0xb2>
 800bed6:	2b16      	cmp	r3, #22
 800bed8:	d101      	bne.n	800bede <__sflush_r+0xb6>
 800beda:	602f      	str	r7, [r5, #0]
 800bedc:	e7b1      	b.n	800be42 <__sflush_r+0x1a>
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	e7ad      	b.n	800be44 <__sflush_r+0x1c>
 800bee8:	690f      	ldr	r7, [r1, #16]
 800beea:	2f00      	cmp	r7, #0
 800beec:	d0a9      	beq.n	800be42 <__sflush_r+0x1a>
 800beee:	0793      	lsls	r3, r2, #30
 800bef0:	680e      	ldr	r6, [r1, #0]
 800bef2:	bf08      	it	eq
 800bef4:	694b      	ldreq	r3, [r1, #20]
 800bef6:	600f      	str	r7, [r1, #0]
 800bef8:	bf18      	it	ne
 800befa:	2300      	movne	r3, #0
 800befc:	eba6 0807 	sub.w	r8, r6, r7
 800bf00:	608b      	str	r3, [r1, #8]
 800bf02:	f1b8 0f00 	cmp.w	r8, #0
 800bf06:	dd9c      	ble.n	800be42 <__sflush_r+0x1a>
 800bf08:	6a21      	ldr	r1, [r4, #32]
 800bf0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf0c:	4643      	mov	r3, r8
 800bf0e:	463a      	mov	r2, r7
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b0      	blx	r6
 800bf14:	2800      	cmp	r0, #0
 800bf16:	dc06      	bgt.n	800bf26 <__sflush_r+0xfe>
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	f04f 30ff 	mov.w	r0, #4294967295
 800bf24:	e78e      	b.n	800be44 <__sflush_r+0x1c>
 800bf26:	4407      	add	r7, r0
 800bf28:	eba8 0800 	sub.w	r8, r8, r0
 800bf2c:	e7e9      	b.n	800bf02 <__sflush_r+0xda>
 800bf2e:	bf00      	nop
 800bf30:	20400001 	.word	0x20400001

0800bf34 <_fflush_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	690b      	ldr	r3, [r1, #16]
 800bf38:	4605      	mov	r5, r0
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	b913      	cbnz	r3, 800bf44 <_fflush_r+0x10>
 800bf3e:	2500      	movs	r5, #0
 800bf40:	4628      	mov	r0, r5
 800bf42:	bd38      	pop	{r3, r4, r5, pc}
 800bf44:	b118      	cbz	r0, 800bf4e <_fflush_r+0x1a>
 800bf46:	6983      	ldr	r3, [r0, #24]
 800bf48:	b90b      	cbnz	r3, 800bf4e <_fflush_r+0x1a>
 800bf4a:	f000 f887 	bl	800c05c <__sinit>
 800bf4e:	4b14      	ldr	r3, [pc, #80]	; (800bfa0 <_fflush_r+0x6c>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	d11b      	bne.n	800bf8c <_fflush_r+0x58>
 800bf54:	686c      	ldr	r4, [r5, #4]
 800bf56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d0ef      	beq.n	800bf3e <_fflush_r+0xa>
 800bf5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf60:	07d0      	lsls	r0, r2, #31
 800bf62:	d404      	bmi.n	800bf6e <_fflush_r+0x3a>
 800bf64:	0599      	lsls	r1, r3, #22
 800bf66:	d402      	bmi.n	800bf6e <_fflush_r+0x3a>
 800bf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf6a:	f7ff fcf0 	bl	800b94e <__retarget_lock_acquire_recursive>
 800bf6e:	4628      	mov	r0, r5
 800bf70:	4621      	mov	r1, r4
 800bf72:	f7ff ff59 	bl	800be28 <__sflush_r>
 800bf76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf78:	07da      	lsls	r2, r3, #31
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	d4e0      	bmi.n	800bf40 <_fflush_r+0xc>
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	059b      	lsls	r3, r3, #22
 800bf82:	d4dd      	bmi.n	800bf40 <_fflush_r+0xc>
 800bf84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf86:	f7ff fce3 	bl	800b950 <__retarget_lock_release_recursive>
 800bf8a:	e7d9      	b.n	800bf40 <_fflush_r+0xc>
 800bf8c:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <_fflush_r+0x70>)
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	d101      	bne.n	800bf96 <_fflush_r+0x62>
 800bf92:	68ac      	ldr	r4, [r5, #8]
 800bf94:	e7df      	b.n	800bf56 <_fflush_r+0x22>
 800bf96:	4b04      	ldr	r3, [pc, #16]	; (800bfa8 <_fflush_r+0x74>)
 800bf98:	429c      	cmp	r4, r3
 800bf9a:	bf08      	it	eq
 800bf9c:	68ec      	ldreq	r4, [r5, #12]
 800bf9e:	e7da      	b.n	800bf56 <_fflush_r+0x22>
 800bfa0:	0800c934 	.word	0x0800c934
 800bfa4:	0800c954 	.word	0x0800c954
 800bfa8:	0800c914 	.word	0x0800c914

0800bfac <std>:
 800bfac:	2300      	movs	r3, #0
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	e9c0 3300 	strd	r3, r3, [r0]
 800bfb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfba:	6083      	str	r3, [r0, #8]
 800bfbc:	8181      	strh	r1, [r0, #12]
 800bfbe:	6643      	str	r3, [r0, #100]	; 0x64
 800bfc0:	81c2      	strh	r2, [r0, #14]
 800bfc2:	6183      	str	r3, [r0, #24]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	2208      	movs	r2, #8
 800bfc8:	305c      	adds	r0, #92	; 0x5c
 800bfca:	f7fb fdd3 	bl	8007b74 <memset>
 800bfce:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <std+0x38>)
 800bfd0:	6263      	str	r3, [r4, #36]	; 0x24
 800bfd2:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <std+0x3c>)
 800bfd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfd6:	4b05      	ldr	r3, [pc, #20]	; (800bfec <std+0x40>)
 800bfd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <std+0x44>)
 800bfdc:	6224      	str	r4, [r4, #32]
 800bfde:	6323      	str	r3, [r4, #48]	; 0x30
 800bfe0:	bd10      	pop	{r4, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800c2f9 	.word	0x0800c2f9
 800bfe8:	0800c31b 	.word	0x0800c31b
 800bfec:	0800c353 	.word	0x0800c353
 800bff0:	0800c377 	.word	0x0800c377

0800bff4 <_cleanup_r>:
 800bff4:	4901      	ldr	r1, [pc, #4]	; (800bffc <_cleanup_r+0x8>)
 800bff6:	f000 b8af 	b.w	800c158 <_fwalk_reent>
 800bffa:	bf00      	nop
 800bffc:	0800bf35 	.word	0x0800bf35

0800c000 <__sfmoreglue>:
 800c000:	b570      	push	{r4, r5, r6, lr}
 800c002:	2268      	movs	r2, #104	; 0x68
 800c004:	1e4d      	subs	r5, r1, #1
 800c006:	4355      	muls	r5, r2
 800c008:	460e      	mov	r6, r1
 800c00a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c00e:	f7fb fe25 	bl	8007c5c <_malloc_r>
 800c012:	4604      	mov	r4, r0
 800c014:	b140      	cbz	r0, 800c028 <__sfmoreglue+0x28>
 800c016:	2100      	movs	r1, #0
 800c018:	e9c0 1600 	strd	r1, r6, [r0]
 800c01c:	300c      	adds	r0, #12
 800c01e:	60a0      	str	r0, [r4, #8]
 800c020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c024:	f7fb fda6 	bl	8007b74 <memset>
 800c028:	4620      	mov	r0, r4
 800c02a:	bd70      	pop	{r4, r5, r6, pc}

0800c02c <__sfp_lock_acquire>:
 800c02c:	4801      	ldr	r0, [pc, #4]	; (800c034 <__sfp_lock_acquire+0x8>)
 800c02e:	f7ff bc8e 	b.w	800b94e <__retarget_lock_acquire_recursive>
 800c032:	bf00      	nop
 800c034:	2000170d 	.word	0x2000170d

0800c038 <__sfp_lock_release>:
 800c038:	4801      	ldr	r0, [pc, #4]	; (800c040 <__sfp_lock_release+0x8>)
 800c03a:	f7ff bc89 	b.w	800b950 <__retarget_lock_release_recursive>
 800c03e:	bf00      	nop
 800c040:	2000170d 	.word	0x2000170d

0800c044 <__sinit_lock_acquire>:
 800c044:	4801      	ldr	r0, [pc, #4]	; (800c04c <__sinit_lock_acquire+0x8>)
 800c046:	f7ff bc82 	b.w	800b94e <__retarget_lock_acquire_recursive>
 800c04a:	bf00      	nop
 800c04c:	2000170e 	.word	0x2000170e

0800c050 <__sinit_lock_release>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__sinit_lock_release+0x8>)
 800c052:	f7ff bc7d 	b.w	800b950 <__retarget_lock_release_recursive>
 800c056:	bf00      	nop
 800c058:	2000170e 	.word	0x2000170e

0800c05c <__sinit>:
 800c05c:	b510      	push	{r4, lr}
 800c05e:	4604      	mov	r4, r0
 800c060:	f7ff fff0 	bl	800c044 <__sinit_lock_acquire>
 800c064:	69a3      	ldr	r3, [r4, #24]
 800c066:	b11b      	cbz	r3, 800c070 <__sinit+0x14>
 800c068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06c:	f7ff bff0 	b.w	800c050 <__sinit_lock_release>
 800c070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c074:	6523      	str	r3, [r4, #80]	; 0x50
 800c076:	4b13      	ldr	r3, [pc, #76]	; (800c0c4 <__sinit+0x68>)
 800c078:	4a13      	ldr	r2, [pc, #76]	; (800c0c8 <__sinit+0x6c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c07e:	42a3      	cmp	r3, r4
 800c080:	bf04      	itt	eq
 800c082:	2301      	moveq	r3, #1
 800c084:	61a3      	streq	r3, [r4, #24]
 800c086:	4620      	mov	r0, r4
 800c088:	f000 f820 	bl	800c0cc <__sfp>
 800c08c:	6060      	str	r0, [r4, #4]
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f81c 	bl	800c0cc <__sfp>
 800c094:	60a0      	str	r0, [r4, #8]
 800c096:	4620      	mov	r0, r4
 800c098:	f000 f818 	bl	800c0cc <__sfp>
 800c09c:	2200      	movs	r2, #0
 800c09e:	60e0      	str	r0, [r4, #12]
 800c0a0:	2104      	movs	r1, #4
 800c0a2:	6860      	ldr	r0, [r4, #4]
 800c0a4:	f7ff ff82 	bl	800bfac <std>
 800c0a8:	68a0      	ldr	r0, [r4, #8]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	2109      	movs	r1, #9
 800c0ae:	f7ff ff7d 	bl	800bfac <std>
 800c0b2:	68e0      	ldr	r0, [r4, #12]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	2112      	movs	r1, #18
 800c0b8:	f7ff ff78 	bl	800bfac <std>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	61a3      	str	r3, [r4, #24]
 800c0c0:	e7d2      	b.n	800c068 <__sinit+0xc>
 800c0c2:	bf00      	nop
 800c0c4:	0800c4d0 	.word	0x0800c4d0
 800c0c8:	0800bff5 	.word	0x0800bff5

0800c0cc <__sfp>:
 800c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ce:	4607      	mov	r7, r0
 800c0d0:	f7ff ffac 	bl	800c02c <__sfp_lock_acquire>
 800c0d4:	4b1e      	ldr	r3, [pc, #120]	; (800c150 <__sfp+0x84>)
 800c0d6:	681e      	ldr	r6, [r3, #0]
 800c0d8:	69b3      	ldr	r3, [r6, #24]
 800c0da:	b913      	cbnz	r3, 800c0e2 <__sfp+0x16>
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f7ff ffbd 	bl	800c05c <__sinit>
 800c0e2:	3648      	adds	r6, #72	; 0x48
 800c0e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	d503      	bpl.n	800c0f4 <__sfp+0x28>
 800c0ec:	6833      	ldr	r3, [r6, #0]
 800c0ee:	b30b      	cbz	r3, 800c134 <__sfp+0x68>
 800c0f0:	6836      	ldr	r6, [r6, #0]
 800c0f2:	e7f7      	b.n	800c0e4 <__sfp+0x18>
 800c0f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0f8:	b9d5      	cbnz	r5, 800c130 <__sfp+0x64>
 800c0fa:	4b16      	ldr	r3, [pc, #88]	; (800c154 <__sfp+0x88>)
 800c0fc:	60e3      	str	r3, [r4, #12]
 800c0fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c102:	6665      	str	r5, [r4, #100]	; 0x64
 800c104:	f7ff fc22 	bl	800b94c <__retarget_lock_init_recursive>
 800c108:	f7ff ff96 	bl	800c038 <__sfp_lock_release>
 800c10c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c114:	6025      	str	r5, [r4, #0]
 800c116:	61a5      	str	r5, [r4, #24]
 800c118:	2208      	movs	r2, #8
 800c11a:	4629      	mov	r1, r5
 800c11c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c120:	f7fb fd28 	bl	8007b74 <memset>
 800c124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c12c:	4620      	mov	r0, r4
 800c12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c130:	3468      	adds	r4, #104	; 0x68
 800c132:	e7d9      	b.n	800c0e8 <__sfp+0x1c>
 800c134:	2104      	movs	r1, #4
 800c136:	4638      	mov	r0, r7
 800c138:	f7ff ff62 	bl	800c000 <__sfmoreglue>
 800c13c:	4604      	mov	r4, r0
 800c13e:	6030      	str	r0, [r6, #0]
 800c140:	2800      	cmp	r0, #0
 800c142:	d1d5      	bne.n	800c0f0 <__sfp+0x24>
 800c144:	f7ff ff78 	bl	800c038 <__sfp_lock_release>
 800c148:	230c      	movs	r3, #12
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	e7ee      	b.n	800c12c <__sfp+0x60>
 800c14e:	bf00      	nop
 800c150:	0800c4d0 	.word	0x0800c4d0
 800c154:	ffff0001 	.word	0xffff0001

0800c158 <_fwalk_reent>:
 800c158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c15c:	4606      	mov	r6, r0
 800c15e:	4688      	mov	r8, r1
 800c160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c164:	2700      	movs	r7, #0
 800c166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c16a:	f1b9 0901 	subs.w	r9, r9, #1
 800c16e:	d505      	bpl.n	800c17c <_fwalk_reent+0x24>
 800c170:	6824      	ldr	r4, [r4, #0]
 800c172:	2c00      	cmp	r4, #0
 800c174:	d1f7      	bne.n	800c166 <_fwalk_reent+0xe>
 800c176:	4638      	mov	r0, r7
 800c178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c17c:	89ab      	ldrh	r3, [r5, #12]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d907      	bls.n	800c192 <_fwalk_reent+0x3a>
 800c182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c186:	3301      	adds	r3, #1
 800c188:	d003      	beq.n	800c192 <_fwalk_reent+0x3a>
 800c18a:	4629      	mov	r1, r5
 800c18c:	4630      	mov	r0, r6
 800c18e:	47c0      	blx	r8
 800c190:	4307      	orrs	r7, r0
 800c192:	3568      	adds	r5, #104	; 0x68
 800c194:	e7e9      	b.n	800c16a <_fwalk_reent+0x12>

0800c196 <__swhatbuf_r>:
 800c196:	b570      	push	{r4, r5, r6, lr}
 800c198:	460e      	mov	r6, r1
 800c19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19e:	2900      	cmp	r1, #0
 800c1a0:	b096      	sub	sp, #88	; 0x58
 800c1a2:	4614      	mov	r4, r2
 800c1a4:	461d      	mov	r5, r3
 800c1a6:	da08      	bge.n	800c1ba <__swhatbuf_r+0x24>
 800c1a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	602a      	str	r2, [r5, #0]
 800c1b0:	061a      	lsls	r2, r3, #24
 800c1b2:	d410      	bmi.n	800c1d6 <__swhatbuf_r+0x40>
 800c1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b8:	e00e      	b.n	800c1d8 <__swhatbuf_r+0x42>
 800c1ba:	466a      	mov	r2, sp
 800c1bc:	f000 f902 	bl	800c3c4 <_fstat_r>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	dbf1      	blt.n	800c1a8 <__swhatbuf_r+0x12>
 800c1c4:	9a01      	ldr	r2, [sp, #4]
 800c1c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1ce:	425a      	negs	r2, r3
 800c1d0:	415a      	adcs	r2, r3
 800c1d2:	602a      	str	r2, [r5, #0]
 800c1d4:	e7ee      	b.n	800c1b4 <__swhatbuf_r+0x1e>
 800c1d6:	2340      	movs	r3, #64	; 0x40
 800c1d8:	2000      	movs	r0, #0
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	b016      	add	sp, #88	; 0x58
 800c1de:	bd70      	pop	{r4, r5, r6, pc}

0800c1e0 <__smakebuf_r>:
 800c1e0:	898b      	ldrh	r3, [r1, #12]
 800c1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1e4:	079d      	lsls	r5, r3, #30
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	d507      	bpl.n	800c1fc <__smakebuf_r+0x1c>
 800c1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	6123      	str	r3, [r4, #16]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	6163      	str	r3, [r4, #20]
 800c1f8:	b002      	add	sp, #8
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	ab01      	add	r3, sp, #4
 800c1fe:	466a      	mov	r2, sp
 800c200:	f7ff ffc9 	bl	800c196 <__swhatbuf_r>
 800c204:	9900      	ldr	r1, [sp, #0]
 800c206:	4605      	mov	r5, r0
 800c208:	4630      	mov	r0, r6
 800c20a:	f7fb fd27 	bl	8007c5c <_malloc_r>
 800c20e:	b948      	cbnz	r0, 800c224 <__smakebuf_r+0x44>
 800c210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c214:	059a      	lsls	r2, r3, #22
 800c216:	d4ef      	bmi.n	800c1f8 <__smakebuf_r+0x18>
 800c218:	f023 0303 	bic.w	r3, r3, #3
 800c21c:	f043 0302 	orr.w	r3, r3, #2
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	e7e3      	b.n	800c1ec <__smakebuf_r+0xc>
 800c224:	4b0d      	ldr	r3, [pc, #52]	; (800c25c <__smakebuf_r+0x7c>)
 800c226:	62b3      	str	r3, [r6, #40]	; 0x28
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	6020      	str	r0, [r4, #0]
 800c22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	9b00      	ldr	r3, [sp, #0]
 800c234:	6163      	str	r3, [r4, #20]
 800c236:	9b01      	ldr	r3, [sp, #4]
 800c238:	6120      	str	r0, [r4, #16]
 800c23a:	b15b      	cbz	r3, 800c254 <__smakebuf_r+0x74>
 800c23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c240:	4630      	mov	r0, r6
 800c242:	f000 f8d1 	bl	800c3e8 <_isatty_r>
 800c246:	b128      	cbz	r0, 800c254 <__smakebuf_r+0x74>
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	f023 0303 	bic.w	r3, r3, #3
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	89a0      	ldrh	r0, [r4, #12]
 800c256:	4305      	orrs	r5, r0
 800c258:	81a5      	strh	r5, [r4, #12]
 800c25a:	e7cd      	b.n	800c1f8 <__smakebuf_r+0x18>
 800c25c:	0800bff5 	.word	0x0800bff5

0800c260 <_malloc_usable_size_r>:
 800c260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c264:	1f18      	subs	r0, r3, #4
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfbc      	itt	lt
 800c26a:	580b      	ldrlt	r3, [r1, r0]
 800c26c:	18c0      	addlt	r0, r0, r3
 800c26e:	4770      	bx	lr

0800c270 <_raise_r>:
 800c270:	291f      	cmp	r1, #31
 800c272:	b538      	push	{r3, r4, r5, lr}
 800c274:	4604      	mov	r4, r0
 800c276:	460d      	mov	r5, r1
 800c278:	d904      	bls.n	800c284 <_raise_r+0x14>
 800c27a:	2316      	movs	r3, #22
 800c27c:	6003      	str	r3, [r0, #0]
 800c27e:	f04f 30ff 	mov.w	r0, #4294967295
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c286:	b112      	cbz	r2, 800c28e <_raise_r+0x1e>
 800c288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c28c:	b94b      	cbnz	r3, 800c2a2 <_raise_r+0x32>
 800c28e:	4620      	mov	r0, r4
 800c290:	f000 f830 	bl	800c2f4 <_getpid_r>
 800c294:	462a      	mov	r2, r5
 800c296:	4601      	mov	r1, r0
 800c298:	4620      	mov	r0, r4
 800c29a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c29e:	f000 b817 	b.w	800c2d0 <_kill_r>
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d00a      	beq.n	800c2bc <_raise_r+0x4c>
 800c2a6:	1c59      	adds	r1, r3, #1
 800c2a8:	d103      	bne.n	800c2b2 <_raise_r+0x42>
 800c2aa:	2316      	movs	r3, #22
 800c2ac:	6003      	str	r3, [r0, #0]
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	e7e7      	b.n	800c282 <_raise_r+0x12>
 800c2b2:	2400      	movs	r4, #0
 800c2b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	4798      	blx	r3
 800c2bc:	2000      	movs	r0, #0
 800c2be:	e7e0      	b.n	800c282 <_raise_r+0x12>

0800c2c0 <raise>:
 800c2c0:	4b02      	ldr	r3, [pc, #8]	; (800c2cc <raise+0xc>)
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	6818      	ldr	r0, [r3, #0]
 800c2c6:	f7ff bfd3 	b.w	800c270 <_raise_r>
 800c2ca:	bf00      	nop
 800c2cc:	200000fc 	.word	0x200000fc

0800c2d0 <_kill_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d07      	ldr	r5, [pc, #28]	; (800c2f0 <_kill_r+0x20>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	4611      	mov	r1, r2
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	f7f4 ffef 	bl	80012c0 <_kill>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d102      	bne.n	800c2ec <_kill_r+0x1c>
 800c2e6:	682b      	ldr	r3, [r5, #0]
 800c2e8:	b103      	cbz	r3, 800c2ec <_kill_r+0x1c>
 800c2ea:	6023      	str	r3, [r4, #0]
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20001708 	.word	0x20001708

0800c2f4 <_getpid_r>:
 800c2f4:	f7f4 bfdc 	b.w	80012b0 <_getpid>

0800c2f8 <__sread>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c300:	f000 f894 	bl	800c42c <_read_r>
 800c304:	2800      	cmp	r0, #0
 800c306:	bfab      	itete	ge
 800c308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c30a:	89a3      	ldrhlt	r3, [r4, #12]
 800c30c:	181b      	addge	r3, r3, r0
 800c30e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c312:	bfac      	ite	ge
 800c314:	6563      	strge	r3, [r4, #84]	; 0x54
 800c316:	81a3      	strhlt	r3, [r4, #12]
 800c318:	bd10      	pop	{r4, pc}

0800c31a <__swrite>:
 800c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	461f      	mov	r7, r3
 800c320:	898b      	ldrh	r3, [r1, #12]
 800c322:	05db      	lsls	r3, r3, #23
 800c324:	4605      	mov	r5, r0
 800c326:	460c      	mov	r4, r1
 800c328:	4616      	mov	r6, r2
 800c32a:	d505      	bpl.n	800c338 <__swrite+0x1e>
 800c32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c330:	2302      	movs	r3, #2
 800c332:	2200      	movs	r2, #0
 800c334:	f000 f868 	bl	800c408 <_lseek_r>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c33e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c342:	81a3      	strh	r3, [r4, #12]
 800c344:	4632      	mov	r2, r6
 800c346:	463b      	mov	r3, r7
 800c348:	4628      	mov	r0, r5
 800c34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c34e:	f000 b817 	b.w	800c380 <_write_r>

0800c352 <__sseek>:
 800c352:	b510      	push	{r4, lr}
 800c354:	460c      	mov	r4, r1
 800c356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35a:	f000 f855 	bl	800c408 <_lseek_r>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	bf15      	itete	ne
 800c364:	6560      	strne	r0, [r4, #84]	; 0x54
 800c366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c36a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c36e:	81a3      	strheq	r3, [r4, #12]
 800c370:	bf18      	it	ne
 800c372:	81a3      	strhne	r3, [r4, #12]
 800c374:	bd10      	pop	{r4, pc}

0800c376 <__sclose>:
 800c376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37a:	f000 b813 	b.w	800c3a4 <_close_r>
	...

0800c380 <_write_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d07      	ldr	r5, [pc, #28]	; (800c3a0 <_write_r+0x20>)
 800c384:	4604      	mov	r4, r0
 800c386:	4608      	mov	r0, r1
 800c388:	4611      	mov	r1, r2
 800c38a:	2200      	movs	r2, #0
 800c38c:	602a      	str	r2, [r5, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	f7f4 ffcd 	bl	800132e <_write>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	d102      	bne.n	800c39e <_write_r+0x1e>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	b103      	cbz	r3, 800c39e <_write_r+0x1e>
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	20001708 	.word	0x20001708

0800c3a4 <_close_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4d06      	ldr	r5, [pc, #24]	; (800c3c0 <_close_r+0x1c>)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	602b      	str	r3, [r5, #0]
 800c3b0:	f7f4 ffd9 	bl	8001366 <_close>
 800c3b4:	1c43      	adds	r3, r0, #1
 800c3b6:	d102      	bne.n	800c3be <_close_r+0x1a>
 800c3b8:	682b      	ldr	r3, [r5, #0]
 800c3ba:	b103      	cbz	r3, 800c3be <_close_r+0x1a>
 800c3bc:	6023      	str	r3, [r4, #0]
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	20001708 	.word	0x20001708

0800c3c4 <_fstat_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4d07      	ldr	r5, [pc, #28]	; (800c3e4 <_fstat_r+0x20>)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	f7f4 ffd4 	bl	800137e <_fstat>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d102      	bne.n	800c3e0 <_fstat_r+0x1c>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	b103      	cbz	r3, 800c3e0 <_fstat_r+0x1c>
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	bd38      	pop	{r3, r4, r5, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20001708 	.word	0x20001708

0800c3e8 <_isatty_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d06      	ldr	r5, [pc, #24]	; (800c404 <_isatty_r+0x1c>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f4 ffd3 	bl	800139e <_isatty>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_isatty_r+0x1a>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_isatty_r+0x1a>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20001708 	.word	0x20001708

0800c408 <_lseek_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_lseek_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f4 ffcc 	bl	80013b4 <_lseek>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_lseek_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_lseek_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20001708 	.word	0x20001708

0800c42c <_read_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d07      	ldr	r5, [pc, #28]	; (800c44c <_read_r+0x20>)
 800c430:	4604      	mov	r4, r0
 800c432:	4608      	mov	r0, r1
 800c434:	4611      	mov	r1, r2
 800c436:	2200      	movs	r2, #0
 800c438:	602a      	str	r2, [r5, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	f7f4 ff5a 	bl	80012f4 <_read>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_read_r+0x1e>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_read_r+0x1e>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	20001708 	.word	0x20001708

0800c450 <_init>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	bf00      	nop
 800c454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c456:	bc08      	pop	{r3}
 800c458:	469e      	mov	lr, r3
 800c45a:	4770      	bx	lr

0800c45c <_fini>:
 800c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45e:	bf00      	nop
 800c460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c462:	bc08      	pop	{r3}
 800c464:	469e      	mov	lr, r3
 800c466:	4770      	bx	lr
