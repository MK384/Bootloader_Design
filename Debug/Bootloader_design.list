
Bootloader_design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c198  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c338  0800c338  0001c338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c834  0800c834  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c834  0800c834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c83c  0800c83c  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  200002d0  0800cb14  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001710  0800cb14  00021710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e58e  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b05  00000000  00000000  0002e88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00031398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bb5  00000000  00000000  00032a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f911  00000000  00000000  000385f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889bc  00000000  00000000  00047f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d08c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000d0914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c320 	.word	0x0800c320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800c320 	.word	0x0800c320

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fa3c 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f80a 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f874 	bl	8001100 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001018:	f005 fff8 	bl	800700c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  HAL_Delay(5000);
 800101c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001020:	f000 faa4 	bl	800156c <HAL_Delay>

  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x1c>
	...

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fd04 	bl	8007a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <SystemClock_Config+0xd0>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <SystemClock_Config+0xd0>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <SystemClock_Config+0xd0>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xd4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <SystemClock_Config+0xd4>)
 8001076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <SystemClock_Config+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800109c:	2319      	movs	r3, #25
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ffaa 	bl	800300c <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010be:	f000 f87f 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fa0c 	bl	80034fc <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ea:	f000 f869 	bl	80011c0 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	; 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_GPIO_Init+0xb4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <MX_GPIO_Init+0xb4>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_GPIO_Init+0xb4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4811      	ldr	r0, [pc, #68]	; (80011b8 <MX_GPIO_Init+0xb8>)
 8001172:	f000 fcb5 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <MX_GPIO_Init+0xb8>)
 8001190:	f000 fb22 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001194:	2301      	movs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4619      	mov	r1, r3
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_GPIO_Init+0xbc>)
 80011a8:	f000 fb16 	bl	80017d8 <HAL_GPIO_Init>

}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f960 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <OTG_FS_IRQHandler+0x10>)
 8001276:	f000 fd9c 	bl	8001db2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000fd4 	.word	0x20000fd4

08001284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_kill>:

int _kill(int pid, int sig)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800129e:	f006 fb9f 	bl	80079e0 <__errno>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2216      	movs	r2, #22
 80012a6:	601a      	str	r2, [r3, #0]
  return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_exit>:

void _exit (int status)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffe7 	bl	8001294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012c6:	e7fe      	b.n	80012c6 <_exit+0x12>

080012c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012da:	f3af 8000 	nop.w
 80012de:	4601      	mov	r1, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <_read+0x12>
  }

  return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e009      	b.n	8001328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf1      	blt.n	8001314 <_write+0x12>
  }
  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	605a      	str	r2, [r3, #4]
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f006 fb04 	bl	80079e0 <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20010000 	.word	0x20010000
 8001404:	00000400 	.word	0x00000400
 8001408:	200002ec 	.word	0x200002ec
 800140c:	20001710 	.word	0x20001710

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x12>
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
 800143a:	490e      	ldr	r1, [pc, #56]	; (8001474 <LoopFillZerobss+0x1a>)
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <LoopFillZerobss+0x1e>)
 800143e:	2300      	movs	r3, #0
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:
 8001442:	58d4      	ldr	r4, [r2, r3]
 8001444:	50c4      	str	r4, [r0, r3]
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:
 8001448:	18c4      	adds	r4, r0, r3
 800144a:	428c      	cmp	r4, r1
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x22>)
 8001450:	4c0b      	ldr	r4, [pc, #44]	; (8001480 <LoopFillZerobss+0x26>)
 8001452:	2300      	movs	r3, #0
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:
 800145a:	42a2      	cmp	r2, r4
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>
 800145e:	f7ff ffd7 	bl	8001410 <SystemInit>
 8001462:	f006 fac3 	bl	80079ec <__libc_init_array>
 8001466:	f7ff fdcf 	bl	8001008 <main>
 800146a:	4770      	bx	lr
 800146c:	20010000 	.word	0x20010000
 8001470:	20000000 	.word	0x20000000
 8001474:	200002d0 	.word	0x200002d0
 8001478:	0800c844 	.word	0x0800c844
 800147c:	200002d0 	.word	0x200002d0
 8001480:	20001710 	.word	0x20001710

08001484 <ADC_IRQHandler>:
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f94f 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fe86 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f967 	bl	80017be <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f92f 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	200002f0 	.word	0x200002f0

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200002f0 	.word	0x200002f0

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff3e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff8e 	bl	80016a8 <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5d 	bl	8001654 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff31 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e159      	b.n	8001aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8148 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a2 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b54      	ldr	r3, [pc, #336]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x202>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x1fe>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x1f6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a45      	ldr	r2, [pc, #276]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x1f2>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <HAL_GPIO_Init+0x304>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f aea2 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
 8001aec:	4613      	mov	r3, r2
 8001aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af0:	787b      	ldrb	r3, [r7, #1]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001afc:	e003      	b.n	8001b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	041a      	lsls	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	619a      	str	r2, [r3, #24]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b14:	b08f      	sub	sp, #60	; 0x3c
 8001b16:	af0a      	add	r7, sp, #40	; 0x28
 8001b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e10f      	b.n	8001d44 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f005 fc44 	bl	80073cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2203      	movs	r2, #3
 8001b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 ff97 	bl	8003a96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	687e      	ldr	r6, [r7, #4]
 8001b70:	466d      	mov	r5, sp
 8001b72:	f106 0410 	add.w	r4, r6, #16
 8001b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b86:	1d33      	adds	r3, r6, #4
 8001b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f001 fe6e 	bl	800386c <USB_CoreInit>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0d0      	b.n	8001d44 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 ff85 	bl	8003ab8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e04a      	b.n	8001c4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333d      	adds	r3, #61	; 0x3d
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333c      	adds	r3, #60	; 0x3c
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	b298      	uxth	r0, r3
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	3344      	adds	r3, #68	; 0x44
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3340      	adds	r3, #64	; 0x40
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	3348      	adds	r3, #72	; 0x48
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	334c      	adds	r3, #76	; 0x4c
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3354      	adds	r3, #84	; 0x54
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3af      	bcc.n	8001bb4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e044      	b.n	8001ce4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3b5      	bcc.n	8001c5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	687e      	ldr	r6, [r7, #4]
 8001cf6:	466d      	mov	r5, sp
 8001cf8:	f106 0410 	add.w	r4, r6, #16
 8001cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d0c:	1d33      	adds	r3, r6, #4
 8001d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f001 ff1d 	bl	8003b50 <USB_DevInit>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e00d      	b.n	8001d44 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 f86c 	bl	8004e1a <USB_DevDisconnect>

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_Start+0x1c>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e020      	b.n	8001daa <HAL_PCD_Start+0x5e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d109      	bne.n	8001d8c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 fe6f 	bl	8003a74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 f81c 	bl	8004dd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db2:	b590      	push	{r4, r7, lr}
 8001db4:	b08d      	sub	sp, #52	; 0x34
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 f8da 	bl	8004f82 <USB_GetMode>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 848a 	bne.w	80026ea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 f83e 	bl	8004e5c <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8480 	beq.w	80026e8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 f82b 	bl	8004e5c <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f002 0202 	and.w	r2, r2, #2
 8001e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 f819 	bl	8004e5c <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d161      	bne.n	8001ef8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0210 	bic.w	r2, r2, #16
 8001e42:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	0c5b      	lsrs	r3, r3, #17
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d124      	bne.n	8001eba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d035      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6a38      	ldr	r0, [r7, #32]
 8001e90:	f002 fe50 	bl	8004b34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea0:	441a      	add	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	6a1a      	ldr	r2, [r3, #32]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb2:	441a      	add	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	621a      	str	r2, [r3, #32]
 8001eb8:	e016      	b.n	8001ee8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	0c5b      	lsrs	r3, r3, #17
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d110      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6a38      	ldr	r0, [r7, #32]
 8001ed2:	f002 fe2f 	bl	8004b34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee2:	441a      	add	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0210 	orr.w	r2, r2, #16
 8001ef6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 ffad 	bl	8004e5c <USB_ReadInterrupts>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f0c:	f040 80a7 	bne.w	800205e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 ffb2 	bl	8004e82 <USB_ReadDevAllOutEpInterrupt>
 8001f1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f20:	e099      	b.n	8002056 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808e 	beq.w	800204a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 ffd6 	bl	8004eea <USB_ReadDevOutEPInterrupt>
 8001f3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f56:	461a      	mov	r2, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fec2 	bl	8002ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00c      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 ff98 	bl	8002eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d030      	beq.n	8002010 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d109      	bne.n	8001fce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fcc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f005 fae3 	bl	80075c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	2302      	movs	r3, #2
 800200e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002026:	461a      	mov	r2, r3
 8002028:	2320      	movs	r3, #32
 800202a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002042:	461a      	mov	r2, r3
 8002044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002048:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f af62 	bne.w	8001f22 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 fefa 	bl	8004e5c <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002072:	f040 80db 	bne.w	800222c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 ff1b 	bl	8004eb6 <USB_ReadDevAllInEpInterrupt>
 8002080:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002086:	e0cd      	b.n	8002224 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80c2 	beq.w	8002218 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 ff41 	bl	8004f26 <USB_ReadDevInEPInterrupt>
 80020a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d057      	beq.n	8002160 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	2201      	movs	r2, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020d0:	4013      	ands	r3, r2
 80020d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e0:	461a      	mov	r2, r3
 80020e2:	2301      	movs	r3, #1
 80020e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d132      	bne.n	8002154 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	334c      	adds	r3, #76	; 0x4c
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4403      	add	r3, r0
 800210e:	3348      	adds	r3, #72	; 0x48
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4419      	add	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4403      	add	r3, r0
 8002122:	334c      	adds	r3, #76	; 0x4c
 8002124:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d113      	bne.n	8002154 <HAL_PCD_IRQHandler+0x3a2>
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3354      	adds	r3, #84	; 0x54
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d108      	bne.n	8002154 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800214c:	461a      	mov	r2, r3
 800214e:	2101      	movs	r1, #1
 8002150:	f002 ff48 	bl	8004fe4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f005 f9b7 	bl	80074ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002176:	461a      	mov	r2, r3
 8002178:	2308      	movs	r3, #8
 800217a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002192:	461a      	mov	r2, r3
 8002194:	2310      	movs	r3, #16
 8002196:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ae:	461a      	mov	r2, r3
 80021b0:	2340      	movs	r3, #64	; 0x40
 80021b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d023      	beq.n	8002206 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c0:	6a38      	ldr	r0, [r7, #32]
 80021c2:	f001 fe29 	bl	8003e18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3338      	adds	r3, #56	; 0x38
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	78db      	ldrb	r3, [r3, #3]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2200      	movs	r2, #0
 80021e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f005 f9fa 	bl	80075e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002200:	461a      	mov	r2, r3
 8002202:	2302      	movs	r3, #2
 8002204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fcdb 	bl	8002bce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	3301      	adds	r3, #1
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f af2e 	bne.w	8002088 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fe13 	bl	8004e5c <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800223c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002240:	d122      	bne.n	8002288 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800225c:	2b01      	cmp	r3, #1
 800225e:	d108      	bne.n	8002272 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fec2 	bl	8002ff4 <HAL_PCDEx_LPM_Callback>
 8002270:	e002      	b.n	8002278 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f005 f998 	bl	80075a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fde5 	bl	8004e5c <USB_ReadInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800229c:	d112      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f005 f954 	bl	800755c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fdc7 	bl	8004e5c <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d8:	f040 80b7 	bne.w	800244a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2110      	movs	r1, #16
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 fd8e 	bl	8003e18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002300:	e046      	b.n	8002390 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800230e:	461a      	mov	r2, r3
 8002310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002314:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	440a      	add	r2, r1
 800232c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002334:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002348:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	440a      	add	r2, r1
 8002360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002364:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800237a:	0151      	lsls	r1, r2, #5
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	440a      	add	r2, r1
 8002380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002384:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002388:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	3301      	adds	r3, #1
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002396:	429a      	cmp	r2, r3
 8002398:	d3b3      	bcc.n	8002302 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c6:	f043 030b 	orr.w	r3, r3, #11
 80023ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023dc:	f043 030b 	orr.w	r3, r3, #11
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	e015      	b.n	8002410 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800240a:	f043 030b 	orr.w	r3, r3, #11
 800240e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002422:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002434:	461a      	mov	r2, r3
 8002436:	f002 fdd5 	bl	8004fe4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fd04 	bl	8004e5c <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245e:	d124      	bne.n	80024aa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fd9a 	bl	8004f9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f001 fd4f 	bl	8003f12 <USB_GetDevSpeed>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681c      	ldr	r4, [r3, #0]
 8002480:	f001 f9e8 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8002484:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	4620      	mov	r0, r4
 8002490:	f001 fa4e 	bl	8003930 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f005 f842 	bl	800751e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fcd4 	bl	8004e5c <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d10a      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f005 f81f 	bl	8007502 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f002 0208 	and.w	r2, r2, #8
 80024d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fcbf 	bl	8004e5c <USB_ReadInterrupts>
 80024de:	4603      	mov	r3, r0
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d122      	bne.n	800252e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f4:	2301      	movs	r3, #1
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	e014      	b.n	8002524 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fb27 	bl	8002b6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	3301      	adds	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	429a      	cmp	r2, r3
 800252c:	d3e5      	bcc.n	80024fa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fc92 	bl	8004e5c <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002542:	d13b      	bne.n	80025bc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002544:	2301      	movs	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	e02b      	b.n	80025a2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d115      	bne.n	800259c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002570:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	da12      	bge.n	800259c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	333f      	adds	r3, #63	; 0x3f
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fae8 	bl	8002b6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3ce      	bcc.n	800254a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fc4b 	bl	8004e5c <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d0:	d155      	bne.n	800267e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d2:	2301      	movs	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e045      	b.n	8002664 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d12e      	bne.n	800265e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002600:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002602:	2b00      	cmp	r3, #0
 8002604:	da2b      	bge.n	800265e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002612:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002616:	429a      	cmp	r2, r3
 8002618:	d121      	bne.n	800265e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6053      	str	r3, [r2, #4]
            break;
 800265c:	e007      	b.n	800266e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	3301      	adds	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	429a      	cmp	r2, r3
 800266c:	d3b4      	bcc.n	80025d8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800267c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fbea 	bl	8004e5c <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d10a      	bne.n	80026aa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f004 ffb9 	bl	800760c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fbd4 	bl	8004e5c <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d115      	bne.n	80026ea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f004 ffa9 	bl	8007628 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e000      	b.n	80026ea <HAL_PCD_IRQHandler+0x938>
      return;
 80026e8:	bf00      	nop
    }
  }
}
 80026ea:	3734      	adds	r7, #52	; 0x34
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}

080026f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_PCD_SetAddress+0x1a>
 8002706:	2302      	movs	r3, #2
 8002708:	e013      	b.n	8002732 <HAL_PCD_SetAddress+0x42>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fb32 	bl	8004d8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	4608      	mov	r0, r1
 8002744:	4611      	mov	r1, r2
 8002746:	461a      	mov	r2, r3
 8002748:	4603      	mov	r3, r0
 800274a:	70fb      	strb	r3, [r7, #3]
 800274c:	460b      	mov	r3, r1
 800274e:	803b      	strh	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800275c:	2b00      	cmp	r3, #0
 800275e:	da0f      	bge.n	8002780 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	3338      	adds	r3, #56	; 0x38
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	3304      	adds	r3, #4
 8002776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	705a      	strb	r2, [r3, #1]
 800277e:	e00f      	b.n	80027a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	3304      	adds	r3, #4
 8002798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027ac:	883a      	ldrh	r2, [r7, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	78ba      	ldrb	r2, [r7, #2]
 80027b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	785b      	ldrb	r3, [r3, #1]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ca:	78bb      	ldrb	r3, [r7, #2]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d102      	bne.n	80027d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_PCD_EP_Open+0xaa>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e00e      	b.n	8002802 <HAL_PCD_EP_Open+0xc8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fbb2 	bl	8003f5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002800:	7afb      	ldrb	r3, [r7, #11]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281a:	2b00      	cmp	r3, #0
 800281c:	da0f      	bge.n	800283e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 020f 	and.w	r2, r3, #15
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	3338      	adds	r3, #56	; 0x38
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	705a      	strb	r2, [r3, #1]
 800283c:	e00f      	b.n	800285e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	3304      	adds	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_PCD_EP_Close+0x6e>
 8002874:	2302      	movs	r3, #2
 8002876:	e00e      	b.n	8002896 <HAL_PCD_EP_Close+0x8c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fbf0 	bl	800406c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	460b      	mov	r3, r1
 80028ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	6979      	ldr	r1, [r7, #20]
 8002912:	f001 fecf 	bl	80046b4 <USB_EP0StartXfer>
 8002916:	e008      	b.n	800292a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6979      	ldr	r1, [r7, #20]
 8002926:	f001 fc7d 	bl	8004224 <USB_EPStartXfer>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 020f 	and.w	r2, r3, #15
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3338      	adds	r3, #56	; 0x38
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2201      	movs	r2, #1
 80029a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a4:	7afb      	ldrb	r3, [r7, #11]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6979      	ldr	r1, [r7, #20]
 80029d6:	f001 fe6d 	bl	80046b4 <USB_EP0StartXfer>
 80029da:	e008      	b.n	80029ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	6979      	ldr	r1, [r7, #20]
 80029ea:	f001 fc1b 	bl	8004224 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d901      	bls.n	8002a16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e050      	b.n	8002ab8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da0f      	bge.n	8002a3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3338      	adds	r3, #56	; 0x38
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	705a      	strb	r2, [r3, #1]
 8002a3c:	e00d      	b.n	8002a5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	3304      	adds	r3, #4
 8002a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_PCD_EP_SetStall+0x82>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e01e      	b.n	8002ab8 <HAL_PCD_EP_SetStall+0xc0>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 f8ab 	bl	8004be4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	b2d9      	uxtb	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f002 fa9b 	bl	8004fe4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 020f 	and.w	r2, r3, #15
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d901      	bls.n	8002ade <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e042      	b.n	8002b64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da0f      	bge.n	8002b06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	3338      	adds	r3, #56	; 0x38
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	705a      	strb	r2, [r3, #1]
 8002b04:	e00f      	b.n	8002b26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_PCD_EP_ClrStall+0x86>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e00e      	b.n	8002b64 <HAL_PCD_EP_ClrStall+0xa4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 f8b3 	bl	8004cc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da0c      	bge.n	8002b9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	3338      	adds	r3, #56	; 0x38
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e00c      	b.n	8002bb4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fed2 	bl	8004964 <USB_EPStopXfer>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	af02      	add	r7, sp, #8
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	3338      	adds	r3, #56	; 0x38
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d901      	bls.n	8002c06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06c      	b.n	8002ce0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d902      	bls.n	8002c22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3303      	adds	r3, #3
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c2a:	e02b      	b.n	8002c84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d902      	bls.n	8002c48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3303      	adds	r3, #3
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6919      	ldr	r1, [r3, #16]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4603      	mov	r3, r0
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f001 ff26 	bl	8004ab8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	441a      	add	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	441a      	add	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d809      	bhi.n	8002cae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d203      	bcs.n	8002cae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1be      	bne.n	8002c2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d811      	bhi.n	8002cde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	6939      	ldr	r1, [r7, #16]
 8002cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cda:	4013      	ands	r3, r2
 8002cdc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	333c      	adds	r3, #60	; 0x3c
 8002d00:	3304      	adds	r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d17b      	bne.n	8002e16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4a61      	ldr	r2, [pc, #388]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f240 80b9 	bls.w	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80b3 	beq.w	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d50:	6093      	str	r3, [r2, #8]
 8002d52:	e0a7      	b.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	6093      	str	r3, [r2, #8]
 8002d70:	e098      	b.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 8093 	bne.w	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d90f      	bls.n	8002da6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	e07e      	b.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	3304      	adds	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d114      	bne.n	8002e08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002df0:	461a      	mov	r2, r3
 8002df2:	2101      	movs	r1, #1
 8002df4:	f002 f8f6 	bl	8004fe4 <USB_EP0_OutStart>
 8002df8:	e006      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	441a      	add	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f004 fb42 	bl	8007498 <HAL_PCD_DataOutStageCallback>
 8002e14:	e046      	b.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d124      	bne.n	8002e68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	6093      	str	r3, [r2, #8]
 8002e3c:	e032      	b.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	2320      	movs	r3, #32
 8002e58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f004 fb19 	bl	8007498 <HAL_PCD_DataOutStageCallback>
 8002e66:	e01d      	b.n	8002ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d114      	bne.n	8002e98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e90:	461a      	mov	r2, r3
 8002e92:	2100      	movs	r1, #0
 8002e94:	f002 f8a6 	bl	8004fe4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f004 fafa 	bl	8007498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	4f54300a 	.word	0x4f54300a
 8002eb4:	4f54310a 	.word	0x4f54310a

08002eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	333c      	adds	r3, #60	; 0x3c
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d90e      	bls.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f004 fab1 	bl	8007474 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90c      	bls.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	f002 f858 	bl	8004fe4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	4f54300a 	.word	0x4f54300a

08002f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	4613      	mov	r3, r2
 8002f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f62:	883b      	ldrh	r3, [r7, #0]
 8002f64:	0419      	lsls	r1, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f70:	e028      	b.n	8002fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ec      	bcc.n	8002f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	0418      	lsls	r0, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4302      	orrs	r2, r0
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e267      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b7e      	ldr	r3, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6c      	ldr	r2, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b69      	ldr	r3, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fa46 	bl	8001554 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fa42 	bl	8001554 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e207      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fa32 	bl	8001554 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fa2e 	bl	8001554 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f3      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe f9e7 	bl	8001554 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe f9e3 	bl	8001554 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a8      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe f9c6 	bl	8001554 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fe f9c2 	bl	8001554 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e187      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe f9a6 	bl	8001554 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe f9a2 	bl	8001554 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e167      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe f98f 	bl	8001554 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe f98b 	bl	8001554 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e150      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a7c      	ldr	r2, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe f94b 	bl	8001554 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe f947 	bl	8001554 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a63      	ldr	r2, [pc, #396]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x30c>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5e      	ldr	r2, [pc, #376]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 8003318:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a57      	ldr	r2, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe f90c 	bl	8001554 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe f908 	bl	8001554 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fe f8f6 	bl	8001554 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe f8f2 	bl	8001554 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b5      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d05c      	beq.n	8003470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d141      	bne.n	8003442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe f8c6 	bl	8001554 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe f8c2 	bl	8001554 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7fe f89b 	bl	8001554 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe f897 	bl	8001554 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e05c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x416>
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe f884 	bl	8001554 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe f880 	bl	8001554 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e038      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fd ffb2 	bl	8001554 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fd ffae 	bl	8001554 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd ff12 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	0800c380 	.word	0x0800c380
 80036c0:	20000000 	.word	0x20000000
 80036c4:	20000004 	.word	0x20000004

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b090      	sub	sp, #64	; 0x40
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80a1 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e09b      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003700:	e09b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003706:	e098      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	627a      	str	r2, [r7, #36]	; 0x24
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003734:	fb03 f201 	mul.w	r2, r3, r1
 8003738:	2300      	movs	r3, #0
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003742:	fba0 1202 	umull	r1, r2, r0, r2
 8003746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003748:	460a      	mov	r2, r1
 800374a:	62ba      	str	r2, [r7, #40]	; 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	2200      	movs	r2, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003762:	f7fd fa99 	bl	8000c98 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376e:	e053      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	2200      	movs	r2, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	617a      	str	r2, [r7, #20]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003782:	f04f 0b00 	mov.w	fp, #0
 8003786:	4652      	mov	r2, sl
 8003788:	465b      	mov	r3, fp
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	0159      	lsls	r1, r3, #5
 8003794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003798:	0150      	lsls	r0, r2, #5
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ebb2 080a 	subs.w	r8, r2, sl
 80037a2:	eb63 090b 	sbc.w	r9, r3, fp
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ba:	ebb2 0408 	subs.w	r4, r2, r8
 80037be:	eb63 0509 	sbc.w	r5, r3, r9
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	00eb      	lsls	r3, r5, #3
 80037cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d0:	00e2      	lsls	r2, r4, #3
 80037d2:	4614      	mov	r4, r2
 80037d4:	461d      	mov	r5, r3
 80037d6:	eb14 030a 	adds.w	r3, r4, sl
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	eb45 030b 	adc.w	r3, r5, fp
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ee:	4629      	mov	r1, r5
 80037f0:	028b      	lsls	r3, r1, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f8:	4621      	mov	r1, r4
 80037fa:	028a      	lsls	r2, r1, #10
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	2200      	movs	r2, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	f7fd fa44 	bl	8000c98 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800383c:	4618      	mov	r0, r3
 800383e:	3740      	adds	r7, #64	; 0x40
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000

0800386c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800386c:	b084      	sub	sp, #16
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	f107 001c 	add.w	r0, r7, #28
 800387a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	d122      	bne.n	80038ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 fbee 	bl	80050a0 <USB_CoreReset>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e01a      	b.n	8003900 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f001 fbe2 	bl	80050a0 <USB_CoreReset>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
 80038f2:	e005      	b.n	8003900 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10b      	bne.n	800391e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f043 0206 	orr.w	r2, r3, #6
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800392a:	b004      	add	sp, #16
 800392c:	4770      	bx	lr
	...

08003930 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d165      	bne.n	8003a10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <USB_SetTurnaroundTime+0x11c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d906      	bls.n	800395a <USB_SetTurnaroundTime+0x2a>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4a40      	ldr	r2, [pc, #256]	; (8003a50 <USB_SetTurnaroundTime+0x120>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d202      	bcs.n	800395a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003954:	230f      	movs	r3, #15
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e062      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <USB_SetTurnaroundTime+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d306      	bcc.n	8003970 <USB_SetTurnaroundTime+0x40>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <USB_SetTurnaroundTime+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d202      	bcs.n	8003970 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800396a:	230e      	movs	r3, #14
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e057      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <USB_SetTurnaroundTime+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d306      	bcc.n	8003986 <USB_SetTurnaroundTime+0x56>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a37      	ldr	r2, [pc, #220]	; (8003a58 <USB_SetTurnaroundTime+0x128>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d202      	bcs.n	8003986 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003980:	230d      	movs	r3, #13
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e04c      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <USB_SetTurnaroundTime+0x128>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d306      	bcc.n	800399c <USB_SetTurnaroundTime+0x6c>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4a32      	ldr	r2, [pc, #200]	; (8003a5c <USB_SetTurnaroundTime+0x12c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d802      	bhi.n	800399c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003996:	230c      	movs	r3, #12
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e041      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <USB_SetTurnaroundTime+0x12c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d906      	bls.n	80039b2 <USB_SetTurnaroundTime+0x82>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4a2e      	ldr	r2, [pc, #184]	; (8003a60 <USB_SetTurnaroundTime+0x130>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d802      	bhi.n	80039b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039ac:	230b      	movs	r3, #11
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e036      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <USB_SetTurnaroundTime+0x130>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d906      	bls.n	80039c8 <USB_SetTurnaroundTime+0x98>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <USB_SetTurnaroundTime+0x134>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d802      	bhi.n	80039c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039c2:	230a      	movs	r3, #10
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e02b      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <USB_SetTurnaroundTime+0x134>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d906      	bls.n	80039de <USB_SetTurnaroundTime+0xae>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <USB_SetTurnaroundTime+0x138>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d202      	bcs.n	80039de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039d8:	2309      	movs	r3, #9
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e020      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <USB_SetTurnaroundTime+0x138>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d306      	bcc.n	80039f4 <USB_SetTurnaroundTime+0xc4>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <USB_SetTurnaroundTime+0x13c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d802      	bhi.n	80039f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039ee:	2308      	movs	r3, #8
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e015      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <USB_SetTurnaroundTime+0x13c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d906      	bls.n	8003a0a <USB_SetTurnaroundTime+0xda>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <USB_SetTurnaroundTime+0x140>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d202      	bcs.n	8003a0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a04:	2307      	movs	r3, #7
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e00a      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e007      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a16:	2309      	movs	r3, #9
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e001      	b.n	8003a20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a1c:	2309      	movs	r3, #9
 8003a1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	00d8acbf 	.word	0x00d8acbf
 8003a50:	00e4e1c0 	.word	0x00e4e1c0
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	01067380 	.word	0x01067380
 8003a5c:	011a499f 	.word	0x011a499f
 8003a60:	01312cff 	.word	0x01312cff
 8003a64:	014ca43f 	.word	0x014ca43f
 8003a68:	016e3600 	.word	0x016e3600
 8003a6c:	01a6ab1f 	.word	0x01a6ab1f
 8003a70:	01e84800 	.word	0x01e84800

08003a74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f043 0201 	orr.w	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d115      	bne.n	8003b06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f7fd fd40 	bl	800156c <HAL_Delay>
      ms++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f001 fa45 	bl	8004f82 <USB_GetMode>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d01e      	beq.n	8003b3c <USB_SetCurrentMode+0x84>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b31      	cmp	r3, #49	; 0x31
 8003b02:	d9f0      	bls.n	8003ae6 <USB_SetCurrentMode+0x2e>
 8003b04:	e01a      	b.n	8003b3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d115      	bne.n	8003b38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f7fd fd27 	bl	800156c <HAL_Delay>
      ms++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f001 fa2c 	bl	8004f82 <USB_GetMode>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <USB_SetCurrentMode+0x84>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b31      	cmp	r3, #49	; 0x31
 8003b34:	d9f0      	bls.n	8003b18 <USB_SetCurrentMode+0x60>
 8003b36:	e001      	b.n	8003b3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e005      	b.n	8003b48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b32      	cmp	r3, #50	; 0x32
 8003b40:	d101      	bne.n	8003b46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b50:	b084      	sub	sp, #16
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e009      	b.n	8003b84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3340      	adds	r3, #64	; 0x40
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3301      	adds	r3, #1
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b0e      	cmp	r3, #14
 8003b88:	d9f2      	bls.n	8003b70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11c      	bne.n	8003bca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc8:	e00b      	b.n	8003be2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	680b      	ldr	r3, [r1, #0]
 8003c00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10c      	bne.n	8003c22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f965 	bl	8003ee0 <USB_SetDevSpeed>
 8003c16:	e008      	b.n	8003c2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c18:	2101      	movs	r1, #1
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f960 	bl	8003ee0 <USB_SetDevSpeed>
 8003c20:	e003      	b.n	8003c2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c22:	2103      	movs	r1, #3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f95b 	bl	8003ee0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8f3 	bl	8003e18 <USB_FlushTxFifo>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f91f 	bl	8003e80 <USB_FlushRxFifo>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e043      	b.n	8003cfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8c:	d118      	bne.n	8003cc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e013      	b.n	8003cd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e008      	b.n	8003cd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3b7      	bcc.n	8003c76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	e043      	b.n	8003d94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d22:	d118      	bne.n	8003d56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e013      	b.n	8003d68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e008      	b.n	8003d68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	2300      	movs	r3, #0
 8003d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3301      	adds	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3b7      	bcc.n	8003d0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <USB_DevInit+0x2c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d107      	bne.n	8003e04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e10:	b004      	add	sp, #16
 8003e12:	4770      	bx	lr
 8003e14:	803c3800 	.word	0x803c3800

08003e18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <USB_FlushTxFifo+0x64>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e01b      	b.n	8003e70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	daf2      	bge.n	8003e26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	019b      	lsls	r3, r3, #6
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <USB_FlushTxFifo+0x64>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e006      	b.n	8003e70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d0f0      	beq.n	8003e50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	00030d40 	.word	0x00030d40

08003e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a11      	ldr	r2, [pc, #68]	; (8003edc <USB_FlushRxFifo+0x5c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e018      	b.n	8003ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	daf2      	bge.n	8003e8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2210      	movs	r2, #16
 8003eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <USB_FlushRxFifo+0x5c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e006      	b.n	8003ed0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d0f0      	beq.n	8003eb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	00030d40 	.word	0x00030d40

08003ee0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0306 	and.w	r3, r3, #6
 8003f2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
 8003f36:	e00a      	b.n	8003f4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d002      	beq.n	8003f44 <USB_GetDevSpeed+0x32>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d102      	bne.n	8003f4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f44:	2302      	movs	r3, #2
 8003f46:	75fb      	strb	r3, [r7, #23]
 8003f48:	e001      	b.n	8003f4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f4a:	230f      	movs	r3, #15
 8003f4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d13a      	bne.n	8003fee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d155      	bne.n	800405c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	791b      	ldrb	r3, [r3, #4]
 8003fca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	059b      	lsls	r3, r3, #22
 8003fd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e036      	b.n	800405c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800400c:	4313      	orrs	r3, r2
 800400e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11a      	bne.n	800405c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	791b      	ldrb	r3, [r3, #4]
 8004040:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004042:	430b      	orrs	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d161      	bne.n	800414c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800409a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800409e:	d11f      	bne.n	80040e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004100:	4013      	ands	r3, r2
 8004102:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	b29b      	uxth	r3, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004124:	4013      	ands	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	0159      	lsls	r1, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	440b      	add	r3, r1
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	4619      	mov	r1, r3
 8004144:	4b35      	ldr	r3, [pc, #212]	; (800421c <USB_DeactivateEndpoint+0x1b0>)
 8004146:	4013      	ands	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
 800414a:	e060      	b.n	800420e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800415e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004162:	d11f      	bne.n	80041a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004182:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	2101      	movs	r1, #1
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	041b      	lsls	r3, r3, #16
 80041bc:	43db      	mvns	r3, r3
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c4:	4013      	ands	r3, r2
 80041c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f303 	lsl.w	r3, r1, r3
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	43db      	mvns	r3, r3
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e8:	4013      	ands	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0159      	lsls	r1, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	440b      	add	r3, r1
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	4619      	mov	r1, r3
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <USB_DeactivateEndpoint+0x1b4>)
 800420a:	4013      	ands	r3, r2
 800420c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	ec337800 	.word	0xec337800
 8004220:	eff37800 	.word	0xeff37800

08004224 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b01      	cmp	r3, #1
 8004242:	f040 815c 	bne.w	80044fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d132      	bne.n	80042b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800426c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	440a      	add	r2, r1
 8004288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	0cdb      	lsrs	r3, r3, #19
 80042ae:	04db      	lsls	r3, r3, #19
 80042b0:	6113      	str	r3, [r2, #16]
 80042b2:	e074      	b.n	800439e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ce:	0cdb      	lsrs	r3, r3, #19
 80042d0:	04db      	lsls	r3, r3, #19
 80042d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6999      	ldr	r1, [r3, #24]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	440b      	add	r3, r1
 8004310:	1e59      	subs	r1, r3, #1
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	fbb1 f3f3 	udiv	r3, r1, r3
 800431a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800431c:	4b9d      	ldr	r3, [pc, #628]	; (8004594 <USB_EPStartXfer+0x370>)
 800431e:	400b      	ands	r3, r1
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	0148      	lsls	r0, r1, #5
 8004324:	69f9      	ldr	r1, [r7, #28]
 8004326:	4401      	add	r1, r0
 8004328:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	0148      	lsls	r0, r1, #5
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	4401      	add	r1, r0
 800434e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004352:	4313      	orrs	r3, r2
 8004354:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	791b      	ldrb	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d11f      	bne.n	800439e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004378:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800437c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800439c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d14b      	bne.n	800443c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b8:	461a      	mov	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d128      	bne.n	800441a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d110      	bne.n	80043fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e00f      	b.n	800441a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e133      	b.n	80046a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800445a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	791b      	ldrb	r3, [r3, #4]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d015      	beq.n	8004490 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 811b 	beq.w	80046a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	69f9      	ldr	r1, [r7, #28]
 8004486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800448a:	4313      	orrs	r3, r2
 800448c:	634b      	str	r3, [r1, #52]	; 0x34
 800448e:	e109      	b.n	80046a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d110      	bne.n	80044c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e00f      	b.n	80044e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6919      	ldr	r1, [r3, #16]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	b298      	uxth	r0, r3
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4603      	mov	r3, r0
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fade 	bl	8004ab8 <USB_WritePacket>
 80044fc:	e0d2      	b.n	80046a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	0cdb      	lsrs	r3, r3, #19
 800451a:	04db      	lsls	r3, r3, #19
 800451c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800453c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004540:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d126      	bne.n	8004598 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	0148      	lsls	r0, r1, #5
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	4401      	add	r1, r0
 8004568:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800456c:	4313      	orrs	r3, r2
 800456e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800458e:	6113      	str	r3, [r2, #16]
 8004590:	e03a      	b.n	8004608 <USB_EPStartXfer+0x3e4>
 8004592:	bf00      	nop
 8004594:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	8afa      	ldrh	r2, [r7, #22]
 80045b4:	fb03 f202 	mul.w	r2, r3, r2
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	8afb      	ldrh	r3, [r7, #22]
 80045cc:	04d9      	lsls	r1, r3, #19
 80045ce:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <USB_EPStartXfer+0x48c>)
 80045d0:	400b      	ands	r3, r1
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	0148      	lsls	r0, r1, #5
 80045d6:	69f9      	ldr	r1, [r7, #28]
 80045d8:	4401      	add	r1, r0
 80045da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045de:	4313      	orrs	r3, r2
 80045e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	0148      	lsls	r0, r1, #5
 80045fc:	69f9      	ldr	r1, [r7, #28]
 80045fe:	4401      	add	r1, r0
 8004600:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004604:	4313      	orrs	r3, r2
 8004606:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10d      	bne.n	800462a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	460a      	mov	r2, r1
 8004628:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	791b      	ldrb	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d128      	bne.n	8004684 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d110      	bne.n	8004664 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00f      	b.n	8004684 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004682:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800469e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	1ff80000 	.word	0x1ff80000

080046b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	f040 80ce 	bne.w	8004872 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d132      	bne.n	8004744 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473c:	0cdb      	lsrs	r3, r3, #19
 800473e:	04db      	lsls	r3, r3, #19
 8004740:	6113      	str	r3, [r2, #16]
 8004742:	e04e      	b.n	80047e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475e:	0cdb      	lsrs	r3, r3, #19
 8004760:	04db      	lsls	r3, r3, #19
 8004762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	0151      	lsls	r1, r2, #5
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	440a      	add	r2, r1
 800477a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004782:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004786:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d903      	bls.n	800479c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	0148      	lsls	r0, r1, #5
 80047d6:	6979      	ldr	r1, [r7, #20]
 80047d8:	4401      	add	r1, r0
 80047da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047de:	4313      	orrs	r3, r2
 80047e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d11e      	bne.n	8004826 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e097      	b.n	8004956 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004844:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8083 	beq.w	8004956 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	6979      	ldr	r1, [r7, #20]
 8004868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486c:	4313      	orrs	r3, r2
 800486e:	634b      	str	r3, [r1, #52]	; 0x34
 8004870:	e071      	b.n	8004956 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488c:	0cdb      	lsrs	r3, r3, #19
 800488e:	04db      	lsls	r3, r3, #19
 8004890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004904:	6939      	ldr	r1, [r7, #16]
 8004906:	0148      	lsls	r0, r1, #5
 8004908:	6979      	ldr	r1, [r7, #20]
 800490a:	4401      	add	r1, r0
 800490c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004910:	4313      	orrs	r3, r2
 8004912:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10d      	bne.n	8004936 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6919      	ldr	r1, [r3, #16]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	460a      	mov	r2, r1
 8004934:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004954:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d14a      	bne.n	8004a18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499a:	f040 8086 	bne.w	8004aaa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d902      	bls.n	80049fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	75fb      	strb	r3, [r7, #23]
          break;
 80049fa:	e056      	b.n	8004aaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a14:	d0e7      	beq.n	80049e6 <USB_EPStopXfer+0x82>
 8004a16:	e048      	b.n	8004aaa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a30:	d13b      	bne.n	8004aaa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d902      	bls.n	8004a90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a8e:	e00c      	b.n	8004aaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa8:	d0e7      	beq.n	8004a7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	71fb      	strb	r3, [r7, #7]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d123      	bne.n	8004b26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ade:	88bb      	ldrh	r3, [r7, #4]
 8004ae0:	3303      	adds	r3, #3
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e018      	b.n	8004b1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	031a      	lsls	r2, r3, #12
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af8:	461a      	mov	r2, r3
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	3301      	adds	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3301      	adds	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3e2      	bcc.n	8004aec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3724      	adds	r7, #36	; 0x24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b08b      	sub	sp, #44	; 0x2c
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	e014      	b.n	8004b8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	3301      	adds	r3, #1
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	3301      	adds	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	3301      	adds	r3, #1
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d3e6      	bcc.n	8004b60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b92:	8bfb      	ldrh	r3, [r7, #30]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01e      	beq.n	8004bd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	701a      	strb	r2, [r3, #0]
      i++;
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004bca:	8bfb      	ldrh	r3, [r7, #30]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bd0:	8bfb      	ldrh	r3, [r7, #30]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ea      	bne.n	8004bac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	372c      	adds	r7, #44	; 0x2c
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d12c      	bne.n	8004c5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	db12      	blt.n	8004c38 <USB_EPSetStall+0x54>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e02b      	b.n	8004cb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	db12      	blt.n	8004c92 <USB_EPSetStall+0xae>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00f      	beq.n	8004c92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d128      	bne.n	8004d2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	791b      	ldrb	r3, [r3, #4]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d003      	beq.n	8004d0c <USB_EPClearStall+0x4c>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	791b      	ldrb	r3, [r3, #4]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d138      	bne.n	8004d7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e027      	b.n	8004d7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	791b      	ldrb	r3, [r3, #4]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d003      	beq.n	8004d5e <USB_EPClearStall+0x9e>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	791b      	ldrb	r3, [r3, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d10f      	bne.n	8004d7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004daa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e06:	f023 0302 	bic.w	r3, r3, #2
 8004e0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e34:	f023 0303 	bic.w	r3, r3, #3
 8004e38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e74:	68fb      	ldr	r3, [r7, #12]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	b29b      	uxth	r3, r3
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f18:	68bb      	ldr	r3, [r7, #8]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	01db      	lsls	r3, r3, #7
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4013      	ands	r3, r2
 8004f72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f74:	68bb      	ldr	r3, [r7, #8]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	460b      	mov	r3, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	333c      	adds	r3, #60	; 0x3c
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4a26      	ldr	r2, [pc, #152]	; (800509c <USB_EP0_OutStart+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d90a      	bls.n	800501e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005018:	d101      	bne.n	800501e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e037      	b.n	800508e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005024:	461a      	mov	r2, r3
 8005026:	2300      	movs	r3, #0
 8005028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504c:	f043 0318 	orr.w	r3, r3, #24
 8005050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005064:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10f      	bne.n	800508c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005086:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800508a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	4f54300a 	.word	0x4f54300a

080050a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <USB_CoreReset+0x64>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e01b      	b.n	80050f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	daf2      	bge.n	80050ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <USB_CoreReset+0x64>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e006      	b.n	80050f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d0f0      	beq.n	80050d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	00030d40 	.word	0x00030d40

08005108 <USBD_CDC_Init>:
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
 8005114:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005118:	f002 fc1e 	bl	8007958 <USBD_static_malloc>
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <USBD_CDC_Init+0x30>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	32b0      	adds	r2, #176	; 0xb0
 800512e:	2100      	movs	r1, #0
 8005130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005134:	2302      	movs	r3, #2
 8005136:	e0d4      	b.n	80052e2 <USBD_CDC_Init+0x1da>
 8005138:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800513c:	2100      	movs	r1, #0
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f002 fc80 	bl	8007a44 <memset>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	32b0      	adds	r2, #176	; 0xb0
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	32b0      	adds	r2, #176	; 0xb0
 800515e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7c1b      	ldrb	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d138      	bne.n	80051e2 <USBD_CDC_Init+0xda>
 8005170:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <USBD_CDC_Init+0x1e4>)
 8005172:	7819      	ldrb	r1, [r3, #0]
 8005174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005178:	2202      	movs	r2, #2
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f002 fac9 	bl	8007712 <USBD_LL_OpenEP>
 8005180:	4b5a      	ldr	r3, [pc, #360]	; (80052ec <USBD_CDC_Init+0x1e4>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 020f 	and.w	r2, r3, #15
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	3324      	adds	r3, #36	; 0x24
 8005196:	2201      	movs	r2, #1
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	4b55      	ldr	r3, [pc, #340]	; (80052f0 <USBD_CDC_Init+0x1e8>)
 800519c:	7819      	ldrb	r1, [r3, #0]
 800519e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a2:	2202      	movs	r2, #2
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f002 fab4 	bl	8007712 <USBD_LL_OpenEP>
 80051aa:	4b51      	ldr	r3, [pc, #324]	; (80052f0 <USBD_CDC_Init+0x1e8>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	f003 020f 	and.w	r2, r3, #15
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051c2:	2201      	movs	r2, #1
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <USBD_CDC_Init+0x1ec>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3326      	adds	r3, #38	; 0x26
 80051dc:	2210      	movs	r2, #16
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e035      	b.n	800524e <USBD_CDC_Init+0x146>
 80051e2:	4b42      	ldr	r3, [pc, #264]	; (80052ec <USBD_CDC_Init+0x1e4>)
 80051e4:	7819      	ldrb	r1, [r3, #0]
 80051e6:	2340      	movs	r3, #64	; 0x40
 80051e8:	2202      	movs	r2, #2
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f002 fa91 	bl	8007712 <USBD_LL_OpenEP>
 80051f0:	4b3e      	ldr	r3, [pc, #248]	; (80052ec <USBD_CDC_Init+0x1e4>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3324      	adds	r3, #36	; 0x24
 8005206:	2201      	movs	r2, #1
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <USBD_CDC_Init+0x1e8>)
 800520c:	7819      	ldrb	r1, [r3, #0]
 800520e:	2340      	movs	r3, #64	; 0x40
 8005210:	2202      	movs	r2, #2
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f002 fa7d 	bl	8007712 <USBD_LL_OpenEP>
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <USBD_CDC_Init+0x1e8>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005230:	2201      	movs	r2, #1
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <USBD_CDC_Init+0x1ec>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	3326      	adds	r3, #38	; 0x26
 800524a:	2210      	movs	r2, #16
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <USBD_CDC_Init+0x1ec>)
 8005250:	7819      	ldrb	r1, [r3, #0]
 8005252:	2308      	movs	r3, #8
 8005254:	2203      	movs	r2, #3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f002 fa5b 	bl	8007712 <USBD_LL_OpenEP>
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <USBD_CDC_Init+0x1ec>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3324      	adds	r3, #36	; 0x24
 8005272:	2201      	movs	r2, #1
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	33b0      	adds	r3, #176	; 0xb0
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4798      	blx	r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <USBD_CDC_Init+0x1a8>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e018      	b.n	80052e2 <USBD_CDC_Init+0x1da>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7c1b      	ldrb	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <USBD_CDC_Init+0x1c6>
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <USBD_CDC_Init+0x1e8>)
 80052ba:	7819      	ldrb	r1, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f002 fb12 	bl	80078f0 <USBD_LL_PrepareReceive>
 80052cc:	e008      	b.n	80052e0 <USBD_CDC_Init+0x1d8>
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <USBD_CDC_Init+0x1e8>)
 80052d0:	7819      	ldrb	r1, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f002 fb08 	bl	80078f0 <USBD_LL_PrepareReceive>
 80052e0:	2300      	movs	r3, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000093 	.word	0x20000093
 80052f0:	20000094 	.word	0x20000094
 80052f4:	20000095 	.word	0x20000095

080052f8 <USBD_CDC_DeInit>:
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
 8005304:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <USBD_CDC_DeInit+0xf8>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f002 fa27 	bl	800775e <USBD_LL_CloseEP>
 8005310:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <USBD_CDC_DeInit+0xf8>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3324      	adds	r3, #36	; 0x24
 8005326:	2200      	movs	r2, #0
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <USBD_CDC_DeInit+0xfc>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f002 fa14 	bl	800775e <USBD_LL_CloseEP>
 8005336:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <USBD_CDC_DeInit+0xfc>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800534e:	2200      	movs	r2, #0
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <USBD_CDC_DeInit+0x100>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f002 fa00 	bl	800775e <USBD_LL_CloseEP>
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <USBD_CDC_DeInit+0x100>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	3324      	adds	r3, #36	; 0x24
 8005374:	2200      	movs	r2, #0
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	4b1f      	ldr	r3, [pc, #124]	; (80053f8 <USBD_CDC_DeInit+0x100>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 020f 	and.w	r2, r3, #15
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3326      	adds	r3, #38	; 0x26
 800538e:	2200      	movs	r2, #0
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	32b0      	adds	r2, #176	; 0xb0
 800539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01f      	beq.n	80053e4 <USBD_CDC_DeInit+0xec>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	33b0      	adds	r3, #176	; 0xb0
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4798      	blx	r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	32b0      	adds	r2, #176	; 0xb0
 80053c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f002 fad4 	bl	8007974 <USBD_static_free>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32b0      	adds	r2, #176	; 0xb0
 80053d6:	2100      	movs	r1, #0
 80053d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80053e4:	2300      	movs	r3, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000093 	.word	0x20000093
 80053f4:	20000094 	.word	0x20000094
 80053f8:	20000095 	.word	0x20000095

080053fc <USBD_CDC_Setup>:
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	32b0      	adds	r2, #176	; 0xb0
 8005410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	2300      	movs	r3, #0
 8005418:	737b      	strb	r3, [r7, #13]
 800541a:	2300      	movs	r3, #0
 800541c:	817b      	strh	r3, [r7, #10]
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <USBD_CDC_Setup+0x30>
 8005428:	2303      	movs	r3, #3
 800542a:	e0bf      	b.n	80055ac <USBD_CDC_Setup+0x1b0>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005434:	2b00      	cmp	r3, #0
 8005436:	d050      	beq.n	80054da <USBD_CDC_Setup+0xde>
 8005438:	2b20      	cmp	r3, #32
 800543a:	f040 80af 	bne.w	800559c <USBD_CDC_Setup+0x1a0>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	88db      	ldrh	r3, [r3, #6]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d03a      	beq.n	80054bc <USBD_CDC_Setup+0xc0>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b25b      	sxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	da1b      	bge.n	8005488 <USBD_CDC_Setup+0x8c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	33b0      	adds	r3, #176	; 0xb0
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	7850      	ldrb	r0, [r2, #1]
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	88d2      	ldrh	r2, [r2, #6]
 800546c:	4798      	blx	r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	88db      	ldrh	r3, [r3, #6]
 8005472:	2b07      	cmp	r3, #7
 8005474:	bf28      	it	cs
 8005476:	2307      	movcs	r3, #7
 8005478:	81fb      	strh	r3, [r7, #14]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	89fa      	ldrh	r2, [r7, #14]
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 fd43 	bl	8006f0c <USBD_CtlSendData>
 8005486:	e090      	b.n	80055aa <USBD_CDC_Setup+0x1ae>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785a      	ldrb	r2, [r3, #1]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	88db      	ldrh	r3, [r3, #6]
 8005496:	2b3f      	cmp	r3, #63	; 0x3f
 8005498:	d803      	bhi.n	80054a2 <USBD_CDC_Setup+0xa6>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	88db      	ldrh	r3, [r3, #6]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	e000      	b.n	80054a4 <USBD_CDC_Setup+0xa8>
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80054aa:	6939      	ldr	r1, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054b2:	461a      	mov	r2, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fd55 	bl	8006f64 <USBD_CtlPrepareRx>
 80054ba:	e076      	b.n	80055aa <USBD_CDC_Setup+0x1ae>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	33b0      	adds	r3, #176	; 0xb0
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	7850      	ldrb	r0, [r2, #1]
 80054d2:	2200      	movs	r2, #0
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	4798      	blx	r3
 80054d8:	e067      	b.n	80055aa <USBD_CDC_Setup+0x1ae>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b0b      	cmp	r3, #11
 80054e0:	d851      	bhi.n	8005586 <USBD_CDC_Setup+0x18a>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <USBD_CDC_Setup+0xec>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	08005519 	.word	0x08005519
 80054ec:	08005595 	.word	0x08005595
 80054f0:	08005587 	.word	0x08005587
 80054f4:	08005587 	.word	0x08005587
 80054f8:	08005587 	.word	0x08005587
 80054fc:	08005587 	.word	0x08005587
 8005500:	08005587 	.word	0x08005587
 8005504:	08005587 	.word	0x08005587
 8005508:	08005587 	.word	0x08005587
 800550c:	08005587 	.word	0x08005587
 8005510:	08005543 	.word	0x08005543
 8005514:	0800556d 	.word	0x0800556d
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b03      	cmp	r3, #3
 8005522:	d107      	bne.n	8005534 <USBD_CDC_Setup+0x138>
 8005524:	f107 030a 	add.w	r3, r7, #10
 8005528:	2202      	movs	r2, #2
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f001 fced 	bl	8006f0c <USBD_CtlSendData>
 8005532:	e032      	b.n	800559a <USBD_CDC_Setup+0x19e>
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 fc77 	bl	8006e2a <USBD_CtlError>
 800553c:	2303      	movs	r3, #3
 800553e:	75fb      	strb	r3, [r7, #23]
 8005540:	e02b      	b.n	800559a <USBD_CDC_Setup+0x19e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b03      	cmp	r3, #3
 800554c:	d107      	bne.n	800555e <USBD_CDC_Setup+0x162>
 800554e:	f107 030d 	add.w	r3, r7, #13
 8005552:	2201      	movs	r2, #1
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fcd8 	bl	8006f0c <USBD_CtlSendData>
 800555c:	e01d      	b.n	800559a <USBD_CDC_Setup+0x19e>
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 fc62 	bl	8006e2a <USBD_CtlError>
 8005566:	2303      	movs	r3, #3
 8005568:	75fb      	strb	r3, [r7, #23]
 800556a:	e016      	b.n	800559a <USBD_CDC_Setup+0x19e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d00f      	beq.n	8005598 <USBD_CDC_Setup+0x19c>
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fc55 	bl	8006e2a <USBD_CtlError>
 8005580:	2303      	movs	r3, #3
 8005582:	75fb      	strb	r3, [r7, #23]
 8005584:	e008      	b.n	8005598 <USBD_CDC_Setup+0x19c>
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 fc4e 	bl	8006e2a <USBD_CtlError>
 800558e:	2303      	movs	r3, #3
 8005590:	75fb      	strb	r3, [r7, #23]
 8005592:	e002      	b.n	800559a <USBD_CDC_Setup+0x19e>
 8005594:	bf00      	nop
 8005596:	e008      	b.n	80055aa <USBD_CDC_Setup+0x1ae>
 8005598:	bf00      	nop
 800559a:	e006      	b.n	80055aa <USBD_CDC_Setup+0x1ae>
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 fc43 	bl	8006e2a <USBD_CtlError>
 80055a4:	2303      	movs	r3, #3
 80055a6:	75fb      	strb	r3, [r7, #23]
 80055a8:	bf00      	nop
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_CDC_DataIn>:
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	32b0      	adds	r2, #176	; 0xb0
 80055d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <USBD_CDC_DataIn+0x2a>
 80055da:	2303      	movs	r3, #3
 80055dc:	e065      	b.n	80056aa <USBD_CDC_DataIn+0xf6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	32b0      	adds	r2, #176	; 0xb0
 80055e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	3318      	adds	r3, #24
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02f      	beq.n	8005668 <USBD_CDC_DataIn+0xb4>
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	3318      	adds	r3, #24
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f003 010f 	and.w	r1, r3, #15
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	460b      	mov	r3, r1
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4403      	add	r3, r0
 8005630:	3348      	adds	r3, #72	; 0x48
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fbb2 f1f3 	udiv	r1, r2, r3
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d112      	bne.n	8005668 <USBD_CDC_DataIn+0xb4>
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	f003 020f 	and.w	r2, r3, #15
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3318      	adds	r3, #24
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	78f9      	ldrb	r1, [r7, #3]
 800565c:	2300      	movs	r3, #0
 800565e:	2200      	movs	r2, #0
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f002 f924 	bl	80078ae <USBD_LL_Transmit>
 8005666:	e01f      	b.n	80056a8 <USBD_CDC_DataIn+0xf4>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	33b0      	adds	r3, #176	; 0xb0
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d010      	beq.n	80056a8 <USBD_CDC_DataIn+0xf4>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	33b0      	adds	r3, #176	; 0xb0
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	4798      	blx	r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBD_CDC_DataOut>:
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	32b0      	adds	r2, #176	; 0xb0
 80056c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	32b0      	adds	r2, #176	; 0xb0
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <USBD_CDC_DataOut+0x32>
 80056e0:	2303      	movs	r3, #3
 80056e2:	e01a      	b.n	800571a <USBD_CDC_DataOut+0x68>
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f002 f922 	bl	8007932 <USBD_LL_GetRxDataSize>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	33b0      	adds	r3, #176	; 0xb0
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005714:	4611      	mov	r1, r2
 8005716:	4798      	blx	r3
 8005718:	2300      	movs	r3, #0
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBD_CDC_EP0_RxReady>:
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	32b0      	adds	r2, #176	; 0xb0
 8005734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <USBD_CDC_EP0_RxReady+0x22>
 8005740:	2303      	movs	r3, #3
 8005742:	e025      	b.n	8005790 <USBD_CDC_EP0_RxReady+0x6e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	33b0      	adds	r3, #176	; 0xb0
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <USBD_CDC_EP0_RxReady+0x6c>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800575e:	2bff      	cmp	r3, #255	; 0xff
 8005760:	d015      	beq.n	800578e <USBD_CDC_EP0_RxReady+0x6c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	33b0      	adds	r3, #176	; 0xb0
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 8005782:	b292      	uxth	r2, r2
 8005784:	4798      	blx	r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	22ff      	movs	r2, #255	; 0xff
 800578a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800578e:	2300      	movs	r3, #0
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <USBD_CDC_GetFSCfgDesc>:
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	2182      	movs	r1, #130	; 0x82
 80057a2:	4818      	ldr	r0, [pc, #96]	; (8005804 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057a4:	f000 fd09 	bl	80061ba <USBD_GetEpDesc>
 80057a8:	6178      	str	r0, [r7, #20]
 80057aa:	2101      	movs	r1, #1
 80057ac:	4815      	ldr	r0, [pc, #84]	; (8005804 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057ae:	f000 fd04 	bl	80061ba <USBD_GetEpDesc>
 80057b2:	6138      	str	r0, [r7, #16]
 80057b4:	2181      	movs	r1, #129	; 0x81
 80057b6:	4813      	ldr	r0, [pc, #76]	; (8005804 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057b8:	f000 fcff 	bl	80061ba <USBD_GetEpDesc>
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <USBD_CDC_GetFSCfgDesc+0x32>
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2210      	movs	r2, #16
 80057c8:	719a      	strb	r2, [r3, #6]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <USBD_CDC_GetFSCfgDesc+0x46>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d8:	711a      	strb	r2, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	715a      	strb	r2, [r3, #5]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d006      	beq.n	80057f2 <USBD_CDC_GetFSCfgDesc+0x5a>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ec:	711a      	strb	r2, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	715a      	strb	r2, [r3, #5]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2243      	movs	r2, #67	; 0x43
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000050 	.word	0x20000050

08005808 <USBD_CDC_GetHSCfgDesc>:
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	2182      	movs	r1, #130	; 0x82
 8005812:	4818      	ldr	r0, [pc, #96]	; (8005874 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005814:	f000 fcd1 	bl	80061ba <USBD_GetEpDesc>
 8005818:	6178      	str	r0, [r7, #20]
 800581a:	2101      	movs	r1, #1
 800581c:	4815      	ldr	r0, [pc, #84]	; (8005874 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800581e:	f000 fccc 	bl	80061ba <USBD_GetEpDesc>
 8005822:	6138      	str	r0, [r7, #16]
 8005824:	2181      	movs	r1, #129	; 0x81
 8005826:	4813      	ldr	r0, [pc, #76]	; (8005874 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005828:	f000 fcc7 	bl	80061ba <USBD_GetEpDesc>
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <USBD_CDC_GetHSCfgDesc+0x32>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2210      	movs	r2, #16
 8005838:	719a      	strb	r2, [r3, #6]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <USBD_CDC_GetHSCfgDesc+0x46>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2200      	movs	r2, #0
 8005844:	711a      	strb	r2, [r3, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f042 0202 	orr.w	r2, r2, #2
 800584c:	715a      	strb	r2, [r3, #5]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d006      	beq.n	8005862 <USBD_CDC_GetHSCfgDesc+0x5a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	711a      	strb	r2, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f042 0202 	orr.w	r2, r2, #2
 8005860:	715a      	strb	r2, [r3, #5]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2243      	movs	r2, #67	; 0x43
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	4b02      	ldr	r3, [pc, #8]	; (8005874 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000050 	.word	0x20000050

08005878 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	2182      	movs	r1, #130	; 0x82
 8005882:	4818      	ldr	r0, [pc, #96]	; (80058e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005884:	f000 fc99 	bl	80061ba <USBD_GetEpDesc>
 8005888:	6178      	str	r0, [r7, #20]
 800588a:	2101      	movs	r1, #1
 800588c:	4815      	ldr	r0, [pc, #84]	; (80058e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800588e:	f000 fc94 	bl	80061ba <USBD_GetEpDesc>
 8005892:	6138      	str	r0, [r7, #16]
 8005894:	2181      	movs	r1, #129	; 0x81
 8005896:	4813      	ldr	r0, [pc, #76]	; (80058e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005898:	f000 fc8f 	bl	80061ba <USBD_GetEpDesc>
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2210      	movs	r2, #16
 80058a8:	719a      	strb	r2, [r3, #6]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b8:	711a      	strb	r2, [r3, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	715a      	strb	r2, [r3, #5]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058cc:	711a      	strb	r2, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	715a      	strb	r2, [r3, #5]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2243      	movs	r2, #67	; 0x43
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000050 	.word	0x20000050

080058e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	220a      	movs	r2, #10
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	4b03      	ldr	r3, [pc, #12]	; (8005904 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	2000000c 	.word	0x2000000c

08005908 <USBD_CDC_RegisterInterface>:
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <USBD_CDC_RegisterInterface+0x14>
 8005918:	2303      	movs	r3, #3
 800591a:	e009      	b.n	8005930 <USBD_CDC_RegisterInterface+0x28>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	33b0      	adds	r3, #176	; 0xb0
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	2300      	movs	r3, #0
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USBD_CDC_SetTxBuffer>:
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	32b0      	adds	r2, #176	; 0xb0
 8005952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <USBD_CDC_SetTxBuffer+0x26>
 800595e:	2303      	movs	r3, #3
 8005960:	e008      	b.n	8005974 <USBD_CDC_SetTxBuffer+0x38>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005972:	2300      	movs	r3, #0
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USBD_CDC_SetRxBuffer>:
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	32b0      	adds	r2, #176	; 0xb0
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <USBD_CDC_SetRxBuffer+0x24>
 80059a0:	2303      	movs	r3, #3
 80059a2:	e004      	b.n	80059ae <USBD_CDC_SetRxBuffer+0x2e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80059ac:	2300      	movs	r3, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <USBD_CDC_ReceivePacket>:
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	32b0      	adds	r2, #176	; 0xb0
 80059ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	32b0      	adds	r2, #176	; 0xb0
 80059de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <USBD_CDC_ReceivePacket+0x2e>
 80059e6:	2303      	movs	r3, #3
 80059e8:	e018      	b.n	8005a1c <USBD_CDC_ReceivePacket+0x60>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	7c1b      	ldrb	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <USBD_CDC_ReceivePacket+0x4c>
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <USBD_CDC_ReceivePacket+0x68>)
 80059f4:	7819      	ldrb	r1, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 ff75 	bl	80078f0 <USBD_LL_PrepareReceive>
 8005a06:	e008      	b.n	8005a1a <USBD_CDC_ReceivePacket+0x5e>
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <USBD_CDC_ReceivePacket+0x68>)
 8005a0a:	7819      	ldrb	r1, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 ff6b 	bl	80078f0 <USBD_LL_PrepareReceive>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000094 	.word	0x20000094

08005a28 <USBD_Init>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4613      	mov	r3, r2
 8005a34:	71fb      	strb	r3, [r7, #7]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <USBD_Init+0x18>
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e01f      	b.n	8005a80 <USBD_Init+0x58>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <USBD_Init+0x3e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	79fa      	ldrb	r2, [r7, #7]
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 fde5 	bl	8007644 <USBD_LL_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_RegisterClass>:
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	81fb      	strh	r3, [r7, #14]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <USBD_RegisterClass+0x18>
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e025      	b.n	8005aec <USBD_RegisterClass+0x64>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	32ae      	adds	r2, #174	; 0xae
 8005ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00f      	beq.n	8005adc <USBD_RegisterClass+0x54>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	32ae      	adds	r2, #174	; 0xae
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	f107 020e 	add.w	r2, r7, #14
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4798      	blx	r3
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8005aea:	2300      	movs	r3, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_Start>:
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fded 	bl	80076dc <USBD_LL_Start>
 8005b02:	4603      	mov	r3, r0
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBD_RunTestMode>:
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	2300      	movs	r3, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USBD_SetClassConfig>:
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	70fb      	strb	r3, [r7, #3]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d009      	beq.n	8005b50 <USBD_SetClassConfig+0x2e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	4611      	mov	r1, r2
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <USBD_ClrClassConfig>:
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	4611      	mov	r1, r2
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <USBD_ClrClassConfig+0x2a>
 8005b80:	2303      	movs	r3, #3
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_LL_SetupStage>:
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 f908 	bl	8006db6 <USBD_ParseSetupRequest>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d01a      	beq.n	8005c00 <USBD_LL_SetupStage+0x72>
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d822      	bhi.n	8005c14 <USBD_LL_SetupStage+0x86>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <USBD_LL_SetupStage+0x4a>
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d00a      	beq.n	8005bec <USBD_LL_SetupStage+0x5e>
 8005bd6:	e01d      	b.n	8005c14 <USBD_LL_SetupStage+0x86>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fb5f 	bl	80062a4 <USBD_StdDevReq>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	e020      	b.n	8005c2e <USBD_LL_SetupStage+0xa0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fbc7 	bl	8006388 <USBD_StdItfReq>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73fb      	strb	r3, [r7, #15]
 8005bfe:	e016      	b.n	8005c2e <USBD_LL_SetupStage+0xa0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fc29 	bl	8006460 <USBD_StdEPReq>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	e00c      	b.n	8005c2e <USBD_LL_SetupStage+0xa0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fdba 	bl	800779c <USBD_LL_StallEP>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	bf00      	nop
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBD_LL_DataOutStage>:
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	460b      	mov	r3, r1
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	72fb      	strb	r3, [r7, #11]
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d16e      	bne.n	8005d2e <USBD_LL_DataOutStage+0xf6>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	f040 8098 	bne.w	8005d94 <USBD_LL_DataOutStage+0x15c>
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d913      	bls.n	8005c98 <USBD_LL_DataOutStage+0x60>
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	1ad2      	subs	r2, r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bf28      	it	cs
 8005c8a:	4613      	movcs	r3, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f001 f984 	bl	8006f9e <USBD_CtlContinueRx>
 8005c96:	e07d      	b.n	8005d94 <USBD_LL_DataOutStage+0x15c>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d014      	beq.n	8005cd0 <USBD_LL_DataOutStage+0x98>
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d81d      	bhi.n	8005ce6 <USBD_LL_DataOutStage+0xae>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <USBD_LL_DataOutStage+0x7c>
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d003      	beq.n	8005cba <USBD_LL_DataOutStage+0x82>
 8005cb2:	e018      	b.n	8005ce6 <USBD_LL_DataOutStage+0xae>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	75bb      	strb	r3, [r7, #22]
 8005cb8:	e018      	b.n	8005cec <USBD_LL_DataOutStage+0xb4>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fa5e 	bl	8006186 <USBD_CoreFindIF>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75bb      	strb	r3, [r7, #22]
 8005cce:	e00d      	b.n	8005cec <USBD_LL_DataOutStage+0xb4>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fa60 	bl	80061a0 <USBD_CoreFindEP>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75bb      	strb	r3, [r7, #22]
 8005ce4:	e002      	b.n	8005cec <USBD_LL_DataOutStage+0xb4>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75bb      	strb	r3, [r7, #22]
 8005cea:	bf00      	nop
 8005cec:	7dbb      	ldrb	r3, [r7, #22]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d119      	bne.n	8005d26 <USBD_LL_DataOutStage+0xee>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d113      	bne.n	8005d26 <USBD_LL_DataOutStage+0xee>
 8005cfe:	7dba      	ldrb	r2, [r7, #22]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	32ae      	adds	r2, #174	; 0xae
 8005d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <USBD_LL_DataOutStage+0xee>
 8005d0e:	7dba      	ldrb	r2, [r7, #22]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8005d16:	7dba      	ldrb	r2, [r7, #22]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	32ae      	adds	r2, #174	; 0xae
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	4798      	blx	r3
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f001 f94a 	bl	8006fc0 <USBD_CtlSendStatus>
 8005d2c:	e032      	b.n	8005d94 <USBD_LL_DataOutStage+0x15c>
 8005d2e:	7afb      	ldrb	r3, [r7, #11]
 8005d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	4619      	mov	r1, r3
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fa31 	bl	80061a0 <USBD_CoreFindEP>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75bb      	strb	r3, [r7, #22]
 8005d42:	7dbb      	ldrb	r3, [r7, #22]
 8005d44:	2bff      	cmp	r3, #255	; 0xff
 8005d46:	d025      	beq.n	8005d94 <USBD_LL_DataOutStage+0x15c>
 8005d48:	7dbb      	ldrb	r3, [r7, #22]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d122      	bne.n	8005d94 <USBD_LL_DataOutStage+0x15c>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d117      	bne.n	8005d8a <USBD_LL_DataOutStage+0x152>
 8005d5a:	7dba      	ldrb	r2, [r7, #22]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	32ae      	adds	r2, #174	; 0xae
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00f      	beq.n	8005d8a <USBD_LL_DataOutStage+0x152>
 8005d6a:	7dba      	ldrb	r2, [r7, #22]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8005d72:	7dba      	ldrb	r2, [r7, #22]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	32ae      	adds	r2, #174	; 0xae
 8005d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	7afa      	ldrb	r2, [r7, #11]
 8005d80:	4611      	mov	r1, r2
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	4798      	blx	r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	75fb      	strb	r3, [r7, #23]
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <USBD_LL_DataOutStage+0x15c>
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	e000      	b.n	8005d96 <USBD_LL_DataOutStage+0x15e>
 8005d94:	2300      	movs	r3, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_LL_DataInStage>:
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b086      	sub	sp, #24
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	460b      	mov	r3, r1
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	72fb      	strb	r3, [r7, #11]
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d16f      	bne.n	8005e92 <USBD_LL_DataInStage+0xf4>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3314      	adds	r3, #20
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d15a      	bne.n	8005e78 <USBD_LL_DataInStage+0xda>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d914      	bls.n	8005df8 <USBD_LL_DataInStage+0x5a>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	461a      	mov	r2, r3
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f001 f8ac 	bl	8006f42 <USBD_CtlContinueSendData>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2200      	movs	r2, #0
 8005dee:	2100      	movs	r1, #0
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f001 fd7d 	bl	80078f0 <USBD_LL_PrepareReceive>
 8005df6:	e03f      	b.n	8005e78 <USBD_LL_DataInStage+0xda>
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d11c      	bne.n	8005e3e <USBD_LL_DataInStage+0xa0>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d316      	bcc.n	8005e3e <USBD_LL_DataInStage+0xa0>
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d20f      	bcs.n	8005e3e <USBD_LL_DataInStage+0xa0>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2100      	movs	r1, #0
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f001 f88d 	bl	8006f42 <USBD_CtlContinueSendData>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8005e30:	2300      	movs	r3, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f001 fd5a 	bl	80078f0 <USBD_LL_PrepareReceive>
 8005e3c:	e01c      	b.n	8005e78 <USBD_LL_DataInStage+0xda>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d10f      	bne.n	8005e6a <USBD_LL_DataInStage+0xcc>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <USBD_LL_DataInStage+0xcc>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	4798      	blx	r3
 8005e6a:	2180      	movs	r1, #128	; 0x80
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f001 fc95 	bl	800779c <USBD_LL_StallEP>
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f001 f8b7 	bl	8006fe6 <USBD_CtlReceiveStatus>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d03a      	beq.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff fe42 	bl	8005b0c <USBD_RunTestMode>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e90:	e032      	b.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f97f 	bl	80061a0 <USBD_CoreFindEP>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	2bff      	cmp	r3, #255	; 0xff
 8005eaa:	d025      	beq.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d122      	bne.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d11c      	bne.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005ebe:	7dfa      	ldrb	r2, [r7, #23]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	32ae      	adds	r2, #174	; 0xae
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d014      	beq.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005ece:	7dfa      	ldrb	r2, [r7, #23]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8005ed6:	7dfa      	ldrb	r2, [r7, #23]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	32ae      	adds	r2, #174	; 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	7afa      	ldrb	r2, [r7, #11]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	75bb      	strb	r3, [r7, #22]
 8005eee:	7dbb      	ldrb	r3, [r7, #22]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <USBD_LL_DataInStage+0x15a>
 8005ef4:	7dbb      	ldrb	r3, [r7, #22]
 8005ef6:	e000      	b.n	8005efa <USBD_LL_DataInStage+0x15c>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_LL_Reset>:
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	605a      	str	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d014      	beq.n	8005f68 <USBD_LL_Reset+0x66>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <USBD_LL_Reset+0x66>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6852      	ldr	r2, [r2, #4]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	4611      	mov	r1, r2
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <USBD_LL_Reset+0x66>
 8005f64:	2303      	movs	r3, #3
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fbcf 	bl	8007712 <USBD_LL_OpenEP>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2240      	movs	r2, #64	; 0x40
 8005f80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8005f84:	2340      	movs	r3, #64	; 0x40
 8005f86:	2200      	movs	r2, #0
 8005f88:	2180      	movs	r1, #128	; 0x80
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fbc1 	bl	8007712 <USBD_LL_OpenEP>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	849a      	strh	r2, [r3, #36]	; 0x24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2240      	movs	r2, #64	; 0x40
 8005f9a:	621a      	str	r2, [r3, #32]
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <USBD_LL_SetSpeed>:
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	741a      	strb	r2, [r3, #16]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USBD_LL_Suspend>:
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USBD_LL_Resume>:
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b04      	cmp	r3, #4
 8006004:	d106      	bne.n	8006014 <USBD_LL_Resume+0x22>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800600c:	b2da      	uxtb	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006014:	2300      	movs	r3, #0
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USBD_LL_SOF>:
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b03      	cmp	r3, #3
 8006034:	d110      	bne.n	8006058 <USBD_LL_SOF+0x36>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <USBD_LL_SOF+0x36>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <USBD_LL_SOF+0x36>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
 8006058:	2300      	movs	r3, #0
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <USBD_LL_IsoINIncomplete>:
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	32ae      	adds	r2, #174	; 0xae
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <USBD_LL_IsoINIncomplete+0x22>
 8006080:	2303      	movs	r3, #3
 8006082:	e01c      	b.n	80060be <USBD_LL_IsoINIncomplete+0x5c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b03      	cmp	r3, #3
 800608e:	d115      	bne.n	80060bc <USBD_LL_IsoINIncomplete+0x5a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	32ae      	adds	r2, #174	; 0xae
 800609a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <USBD_LL_IsoINIncomplete+0x5a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	32ae      	adds	r2, #174	; 0xae
 80060ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	4611      	mov	r1, r2
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	4798      	blx	r3
 80060bc:	2300      	movs	r3, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_LL_IsoOUTIncomplete>:
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70fb      	strb	r3, [r7, #3]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	32ae      	adds	r2, #174	; 0xae
 80060dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <USBD_LL_IsoOUTIncomplete+0x22>
 80060e4:	2303      	movs	r3, #3
 80060e6:	e01c      	b.n	8006122 <USBD_LL_IsoOUTIncomplete+0x5c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d115      	bne.n	8006120 <USBD_LL_IsoOUTIncomplete+0x5a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	32ae      	adds	r2, #174	; 0xae
 80060fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <USBD_LL_IsoOUTIncomplete+0x5a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32ae      	adds	r2, #174	; 0xae
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	4611      	mov	r1, r2
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
 8006120:	2300      	movs	r3, #0
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_LL_DevConnected>:
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	2300      	movs	r3, #0
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USBD_LL_DevDisconnected>:
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <USBD_LL_DevDisconnected+0x3c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6852      	ldr	r2, [r2, #4]
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	4611      	mov	r1, r2
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USBD_LL_DevDisconnected+0x3c>
 8006178:	2303      	movs	r3, #3
 800617a:	73fb      	strb	r3, [r7, #15]
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_CoreFindIF>:
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	70fb      	strb	r3, [r7, #3]
 8006192:	2300      	movs	r3, #0
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USBD_CoreFindEP>:
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
 80061ac:	2300      	movs	r3, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USBD_GetEpDesc>:
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	885b      	ldrh	r3, [r3, #2]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	429a      	cmp	r2, r3
 80061e0:	d920      	bls.n	8006224 <USBD_GetEpDesc+0x6a>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	e013      	b.n	8006214 <USBD_GetEpDesc+0x5a>
 80061ec:	f107 030a 	add.w	r3, r7, #10
 80061f0:	4619      	mov	r1, r3
 80061f2:	6978      	ldr	r0, [r7, #20]
 80061f4:	f000 f81b 	bl	800622e <USBD_GetNextDesc>
 80061f8:	6178      	str	r0, [r7, #20]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d108      	bne.n	8006214 <USBD_GetEpDesc+0x5a>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	789b      	ldrb	r3, [r3, #2]
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	429a      	cmp	r2, r3
 800620e:	d008      	beq.n	8006222 <USBD_GetEpDesc+0x68>
 8006210:	2300      	movs	r3, #0
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	885b      	ldrh	r3, [r3, #2]
 8006218:	b29a      	uxth	r2, r3
 800621a:	897b      	ldrh	r3, [r7, #10]
 800621c:	429a      	cmp	r2, r3
 800621e:	d8e5      	bhi.n	80061ec <USBD_GetEpDesc+0x32>
 8006220:	e000      	b.n	8006224 <USBD_GetEpDesc+0x6a>
 8006222:	bf00      	nop
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_GetNextDesc>:
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	881a      	ldrh	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	4413      	add	r3, r2
 8006248:	b29a      	uxth	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <SWAPBYTE>:
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	827b      	strh	r3, [r7, #18]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3301      	adds	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	823b      	strh	r3, [r7, #16]
 8006286:	8a3b      	ldrh	r3, [r7, #16]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	b21a      	sxth	r2, r3
 800628c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006290:	4313      	orrs	r3, r2
 8006292:	b21b      	sxth	r3, r3
 8006294:	81fb      	strh	r3, [r7, #14]
 8006296:	89fb      	ldrh	r3, [r7, #14]
 8006298:	4618      	mov	r0, r3
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USBD_StdDevReq>:
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d005      	beq.n	80062ca <USBD_StdDevReq+0x26>
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d857      	bhi.n	8006372 <USBD_StdDevReq+0xce>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00f      	beq.n	80062e6 <USBD_StdDevReq+0x42>
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d153      	bne.n	8006372 <USBD_StdDevReq+0xce>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	32ae      	adds	r2, #174	; 0xae
 80062d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e04a      	b.n	800637c <USBD_StdDevReq+0xd8>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b09      	cmp	r3, #9
 80062ec:	d83b      	bhi.n	8006366 <USBD_StdDevReq+0xc2>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <USBD_StdDevReq+0x50>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006349 	.word	0x08006349
 80062f8:	0800635d 	.word	0x0800635d
 80062fc:	08006367 	.word	0x08006367
 8006300:	08006353 	.word	0x08006353
 8006304:	08006367 	.word	0x08006367
 8006308:	08006327 	.word	0x08006327
 800630c:	0800631d 	.word	0x0800631d
 8006310:	08006367 	.word	0x08006367
 8006314:	0800633f 	.word	0x0800633f
 8006318:	08006331 	.word	0x08006331
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa3c 	bl	800679c <USBD_GetDescriptor>
 8006324:	e024      	b.n	8006370 <USBD_StdDevReq+0xcc>
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fba1 	bl	8006a70 <USBD_SetAddress>
 800632e:	e01f      	b.n	8006370 <USBD_StdDevReq+0xcc>
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fbe0 	bl	8006af8 <USBD_SetConfig>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e018      	b.n	8006370 <USBD_StdDevReq+0xcc>
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fc83 	bl	8006c4c <USBD_GetConfig>
 8006346:	e013      	b.n	8006370 <USBD_StdDevReq+0xcc>
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fcb4 	bl	8006cb8 <USBD_GetStatus>
 8006350:	e00e      	b.n	8006370 <USBD_StdDevReq+0xcc>
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fce3 	bl	8006d20 <USBD_SetFeature>
 800635a:	e009      	b.n	8006370 <USBD_StdDevReq+0xcc>
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fd07 	bl	8006d72 <USBD_ClrFeature>
 8006364:	e004      	b.n	8006370 <USBD_StdDevReq+0xcc>
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fd5e 	bl	8006e2a <USBD_CtlError>
 800636e:	bf00      	nop
 8006370:	e004      	b.n	800637c <USBD_StdDevReq+0xd8>
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fd58 	bl	8006e2a <USBD_CtlError>
 800637a:	bf00      	nop
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop

08006388 <USBD_StdItfReq>:
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d005      	beq.n	80063ae <USBD_StdItfReq+0x26>
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d852      	bhi.n	800644c <USBD_StdItfReq+0xc4>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <USBD_StdItfReq+0x26>
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d14e      	bne.n	800644c <USBD_StdItfReq+0xc4>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d840      	bhi.n	800643e <USBD_StdItfReq+0xb6>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	889b      	ldrh	r3, [r3, #4]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d836      	bhi.n	8006434 <USBD_StdItfReq+0xac>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	889b      	ldrh	r3, [r3, #4]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fed9 	bl	8006186 <USBD_CoreFindIF>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73bb      	strb	r3, [r7, #14]
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2bff      	cmp	r3, #255	; 0xff
 80063dc:	d01d      	beq.n	800641a <USBD_StdItfReq+0x92>
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11a      	bne.n	800641a <USBD_StdItfReq+0x92>
 80063e4:	7bba      	ldrb	r2, [r7, #14]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32ae      	adds	r2, #174	; 0xae
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00f      	beq.n	8006414 <USBD_StdItfReq+0x8c>
 80063f4:	7bba      	ldrb	r2, [r7, #14]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80063fc:	7bba      	ldrb	r2, [r7, #14]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	32ae      	adds	r2, #174	; 0xae
 8006402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	e004      	b.n	800641e <USBD_StdItfReq+0x96>
 8006414:	2303      	movs	r3, #3
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e001      	b.n	800641e <USBD_StdItfReq+0x96>
 800641a:	2303      	movs	r3, #3
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	88db      	ldrh	r3, [r3, #6]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d110      	bne.n	8006448 <USBD_StdItfReq+0xc0>
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <USBD_StdItfReq+0xc0>
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fdc7 	bl	8006fc0 <USBD_CtlSendStatus>
 8006432:	e009      	b.n	8006448 <USBD_StdItfReq+0xc0>
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fcf7 	bl	8006e2a <USBD_CtlError>
 800643c:	e004      	b.n	8006448 <USBD_StdItfReq+0xc0>
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fcf2 	bl	8006e2a <USBD_CtlError>
 8006446:	e000      	b.n	800644a <USBD_StdItfReq+0xc2>
 8006448:	bf00      	nop
 800644a:	e004      	b.n	8006456 <USBD_StdItfReq+0xce>
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fceb 	bl	8006e2a <USBD_CtlError>
 8006454:	bf00      	nop
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_StdEPReq>:
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	889b      	ldrh	r3, [r3, #4]
 8006472:	73bb      	strb	r3, [r7, #14]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d007      	beq.n	8006490 <USBD_StdEPReq+0x30>
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	f200 817f 	bhi.w	8006784 <USBD_StdEPReq+0x324>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d02a      	beq.n	80064e0 <USBD_StdEPReq+0x80>
 800648a:	2b20      	cmp	r3, #32
 800648c:	f040 817a 	bne.w	8006784 <USBD_StdEPReq+0x324>
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fe83 	bl	80061a0 <USBD_CoreFindEP>
 800649a:	4603      	mov	r3, r0
 800649c:	737b      	strb	r3, [r7, #13]
 800649e:	7b7b      	ldrb	r3, [r7, #13]
 80064a0:	2bff      	cmp	r3, #255	; 0xff
 80064a2:	f000 8174 	beq.w	800678e <USBD_StdEPReq+0x32e>
 80064a6:	7b7b      	ldrb	r3, [r7, #13]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f040 8170 	bne.w	800678e <USBD_StdEPReq+0x32e>
 80064ae:	7b7a      	ldrb	r2, [r7, #13]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80064b6:	7b7a      	ldrb	r2, [r7, #13]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	32ae      	adds	r2, #174	; 0xae
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8163 	beq.w	800678e <USBD_StdEPReq+0x32e>
 80064c8:	7b7a      	ldrb	r2, [r7, #13]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32ae      	adds	r2, #174	; 0xae
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
 80064da:	4603      	mov	r3, r0
 80064dc:	73fb      	strb	r3, [r7, #15]
 80064de:	e156      	b.n	800678e <USBD_StdEPReq+0x32e>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d008      	beq.n	80064fa <USBD_StdEPReq+0x9a>
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	f300 8145 	bgt.w	8006778 <USBD_StdEPReq+0x318>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 809b 	beq.w	800662a <USBD_StdEPReq+0x1ca>
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d03c      	beq.n	8006572 <USBD_StdEPReq+0x112>
 80064f8:	e13e      	b.n	8006778 <USBD_StdEPReq+0x318>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d002      	beq.n	800650c <USBD_StdEPReq+0xac>
 8006506:	2b03      	cmp	r3, #3
 8006508:	d016      	beq.n	8006538 <USBD_StdEPReq+0xd8>
 800650a:	e02c      	b.n	8006566 <USBD_StdEPReq+0x106>
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <USBD_StdEPReq+0xce>
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b80      	cmp	r3, #128	; 0x80
 8006516:	d00a      	beq.n	800652e <USBD_StdEPReq+0xce>
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 f93d 	bl	800779c <USBD_LL_StallEP>
 8006522:	2180      	movs	r1, #128	; 0x80
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f939 	bl	800779c <USBD_LL_StallEP>
 800652a:	bf00      	nop
 800652c:	e020      	b.n	8006570 <USBD_StdEPReq+0x110>
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fc7a 	bl	8006e2a <USBD_CtlError>
 8006536:	e01b      	b.n	8006570 <USBD_StdEPReq+0x110>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	885b      	ldrh	r3, [r3, #2]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10e      	bne.n	800655e <USBD_StdEPReq+0xfe>
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <USBD_StdEPReq+0xfe>
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d008      	beq.n	800655e <USBD_StdEPReq+0xfe>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	88db      	ldrh	r3, [r3, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <USBD_StdEPReq+0xfe>
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f91f 	bl	800779c <USBD_LL_StallEP>
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fd2e 	bl	8006fc0 <USBD_CtlSendStatus>
 8006564:	e004      	b.n	8006570 <USBD_StdEPReq+0x110>
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fc5e 	bl	8006e2a <USBD_CtlError>
 800656e:	bf00      	nop
 8006570:	e107      	b.n	8006782 <USBD_StdEPReq+0x322>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d002      	beq.n	8006584 <USBD_StdEPReq+0x124>
 800657e:	2b03      	cmp	r3, #3
 8006580:	d016      	beq.n	80065b0 <USBD_StdEPReq+0x150>
 8006582:	e04b      	b.n	800661c <USBD_StdEPReq+0x1bc>
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <USBD_StdEPReq+0x146>
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d00a      	beq.n	80065a6 <USBD_StdEPReq+0x146>
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f901 	bl	800779c <USBD_LL_StallEP>
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f8fd 	bl	800779c <USBD_LL_StallEP>
 80065a2:	bf00      	nop
 80065a4:	e040      	b.n	8006628 <USBD_StdEPReq+0x1c8>
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fc3e 	bl	8006e2a <USBD_CtlError>
 80065ae:	e03b      	b.n	8006628 <USBD_StdEPReq+0x1c8>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	885b      	ldrh	r3, [r3, #2]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d136      	bne.n	8006626 <USBD_StdEPReq+0x1c6>
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <USBD_StdEPReq+0x16c>
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f907 	bl	80077da <USBD_LL_ClearStallEP>
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fcf7 	bl	8006fc0 <USBD_CtlSendStatus>
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fde2 	bl	80061a0 <USBD_CoreFindEP>
 80065dc:	4603      	mov	r3, r0
 80065de:	737b      	strb	r3, [r7, #13]
 80065e0:	7b7b      	ldrb	r3, [r7, #13]
 80065e2:	2bff      	cmp	r3, #255	; 0xff
 80065e4:	d01f      	beq.n	8006626 <USBD_StdEPReq+0x1c6>
 80065e6:	7b7b      	ldrb	r3, [r7, #13]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11c      	bne.n	8006626 <USBD_StdEPReq+0x1c6>
 80065ec:	7b7a      	ldrb	r2, [r7, #13]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80065f4:	7b7a      	ldrb	r2, [r7, #13]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	32ae      	adds	r2, #174	; 0xae
 80065fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <USBD_StdEPReq+0x1c6>
 8006604:	7b7a      	ldrb	r2, [r7, #13]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32ae      	adds	r2, #174	; 0xae
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	e004      	b.n	8006626 <USBD_StdEPReq+0x1c6>
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fc03 	bl	8006e2a <USBD_CtlError>
 8006624:	e000      	b.n	8006628 <USBD_StdEPReq+0x1c8>
 8006626:	bf00      	nop
 8006628:	e0ab      	b.n	8006782 <USBD_StdEPReq+0x322>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d002      	beq.n	800663c <USBD_StdEPReq+0x1dc>
 8006636:	2b03      	cmp	r3, #3
 8006638:	d032      	beq.n	80066a0 <USBD_StdEPReq+0x240>
 800663a:	e097      	b.n	800676c <USBD_StdEPReq+0x30c>
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <USBD_StdEPReq+0x1f2>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d004      	beq.n	8006652 <USBD_StdEPReq+0x1f2>
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fbed 	bl	8006e2a <USBD_CtlError>
 8006650:	e091      	b.n	8006776 <USBD_StdEPReq+0x316>
 8006652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006656:	2b00      	cmp	r3, #0
 8006658:	da0b      	bge.n	8006672 <USBD_StdEPReq+0x212>
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	3310      	adds	r3, #16
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	3304      	adds	r3, #4
 8006670:	e00b      	b.n	800668a <USBD_StdEPReq+0x22a>
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	3304      	adds	r3, #4
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2202      	movs	r2, #2
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fc37 	bl	8006f0c <USBD_CtlSendData>
 800669e:	e06a      	b.n	8006776 <USBD_StdEPReq+0x316>
 80066a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da11      	bge.n	80066cc <USBD_StdEPReq+0x26c>
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	f003 020f 	and.w	r2, r3, #15
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	3324      	adds	r3, #36	; 0x24
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d117      	bne.n	80066f2 <USBD_StdEPReq+0x292>
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fbb0 	bl	8006e2a <USBD_CtlError>
 80066ca:	e054      	b.n	8006776 <USBD_StdEPReq+0x316>
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	f003 020f 	and.w	r2, r3, #15
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <USBD_StdEPReq+0x292>
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fb9d 	bl	8006e2a <USBD_CtlError>
 80066f0:	e041      	b.n	8006776 <USBD_StdEPReq+0x316>
 80066f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da0b      	bge.n	8006712 <USBD_StdEPReq+0x2b2>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	3310      	adds	r3, #16
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	e00b      	b.n	800672a <USBD_StdEPReq+0x2ca>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	4413      	add	r3, r2
 8006728:	3304      	adds	r3, #4
 800672a:	60bb      	str	r3, [r7, #8]
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <USBD_StdEPReq+0x2d8>
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b80      	cmp	r3, #128	; 0x80
 8006736:	d103      	bne.n	8006740 <USBD_StdEPReq+0x2e0>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e00e      	b.n	800675e <USBD_StdEPReq+0x2fe>
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 f867 	bl	8007818 <USBD_LL_IsStallEP>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <USBD_StdEPReq+0x2f8>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e002      	b.n	800675e <USBD_StdEPReq+0x2fe>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2202      	movs	r2, #2
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fbd1 	bl	8006f0c <USBD_CtlSendData>
 800676a:	e004      	b.n	8006776 <USBD_StdEPReq+0x316>
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb5b 	bl	8006e2a <USBD_CtlError>
 8006774:	bf00      	nop
 8006776:	e004      	b.n	8006782 <USBD_StdEPReq+0x322>
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fb55 	bl	8006e2a <USBD_CtlError>
 8006780:	bf00      	nop
 8006782:	e005      	b.n	8006790 <USBD_StdEPReq+0x330>
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fb4f 	bl	8006e2a <USBD_CtlError>
 800678c:	e000      	b.n	8006790 <USBD_StdEPReq+0x330>
 800678e:	bf00      	nop
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <USBD_GetDescriptor>:
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	2300      	movs	r3, #0
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	2300      	movs	r3, #0
 80067b0:	72fb      	strb	r3, [r7, #11]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	885b      	ldrh	r3, [r3, #2]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	2b06      	cmp	r3, #6
 80067be:	f200 8128 	bhi.w	8006a12 <USBD_GetDescriptor+0x276>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <USBD_GetDescriptor+0x2c>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	0800683d 	.word	0x0800683d
 80067d4:	08006a13 	.word	0x08006a13
 80067d8:	08006a13 	.word	0x08006a13
 80067dc:	080069b3 	.word	0x080069b3
 80067e0:	080069df 	.word	0x080069df
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	7c12      	ldrb	r2, [r2, #16]
 80067f0:	f107 0108 	add.w	r1, r7, #8
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	e112      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7c1b      	ldrb	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10d      	bne.n	8006820 <USBD_GetDescriptor+0x84>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	f107 0208 	add.w	r2, r7, #8
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	2202      	movs	r2, #2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e100      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f107 0208 	add.w	r2, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	2202      	movs	r2, #2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	e0f2      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	885b      	ldrh	r3, [r3, #2]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b05      	cmp	r3, #5
 8006844:	f200 80ac 	bhi.w	80069a0 <USBD_GetDescriptor+0x204>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <USBD_GetDescriptor+0xb4>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006869 	.word	0x08006869
 8006854:	0800689d 	.word	0x0800689d
 8006858:	080068d1 	.word	0x080068d1
 800685c:	08006905 	.word	0x08006905
 8006860:	08006939 	.word	0x08006939
 8006864:	0800696d 	.word	0x0800696d
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <USBD_GetDescriptor+0xf0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	7c12      	ldrb	r2, [r2, #16]
 8006880:	f107 0108 	add.w	r1, r7, #8
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	e091      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 facb 	bl	8006e2a <USBD_CtlError>
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	3301      	adds	r3, #1
 8006898:	72fb      	strb	r3, [r7, #11]
 800689a:	e089      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <USBD_GetDescriptor+0x124>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	7c12      	ldrb	r2, [r2, #16]
 80068b4:	f107 0108 	add.w	r1, r7, #8
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	e077      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fab1 	bl	8006e2a <USBD_CtlError>
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	3301      	adds	r3, #1
 80068cc:	72fb      	strb	r3, [r7, #11]
 80068ce:	e06f      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_GetDescriptor+0x158>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	7c12      	ldrb	r2, [r2, #16]
 80068e8:	f107 0108 	add.w	r1, r7, #8
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	e05d      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa97 	bl	8006e2a <USBD_CtlError>
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	3301      	adds	r3, #1
 8006900:	72fb      	strb	r3, [r7, #11]
 8006902:	e055      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <USBD_GetDescriptor+0x18c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	e043      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa7d 	bl	8006e2a <USBD_CtlError>
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	3301      	adds	r3, #1
 8006934:	72fb      	strb	r3, [r7, #11]
 8006936:	e03b      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0x1c0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	e029      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa63 	bl	8006e2a <USBD_CtlError>
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
 800696a:	e021      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x1f4>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	e00f      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa49 	bl	8006e2a <USBD_CtlError>
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
 800699e:	e007      	b.n	80069b0 <USBD_GetDescriptor+0x214>
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa41 	bl	8006e2a <USBD_CtlError>
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	3301      	adds	r3, #1
 80069ac:	72fb      	strb	r3, [r7, #11]
 80069ae:	bf00      	nop
 80069b0:	e037      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	7c1b      	ldrb	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <USBD_GetDescriptor+0x232>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	f107 0208 	add.w	r2, r7, #8
 80069c6:	4610      	mov	r0, r2
 80069c8:	4798      	blx	r3
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	e029      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fa2a 	bl	8006e2a <USBD_CtlError>
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	3301      	adds	r3, #1
 80069da:	72fb      	strb	r3, [r7, #11]
 80069dc:	e021      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7c1b      	ldrb	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <USBD_GetDescriptor+0x266>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	f107 0208 	add.w	r2, r7, #8
 80069f2:	4610      	mov	r0, r2
 80069f4:	4798      	blx	r3
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	2207      	movs	r2, #7
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e00f      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa10 	bl	8006e2a <USBD_CtlError>
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	72fb      	strb	r3, [r7, #11]
 8006a10:	e007      	b.n	8006a22 <USBD_GetDescriptor+0x286>
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa08 	bl	8006e2a <USBD_CtlError>
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	72fb      	strb	r3, [r7, #11]
 8006a20:	bf00      	nop
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d11e      	bne.n	8006a66 <USBD_GetDescriptor+0x2ca>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	88db      	ldrh	r3, [r3, #6]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d016      	beq.n	8006a5e <USBD_GetDescriptor+0x2c2>
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <USBD_GetDescriptor+0x2b8>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	88da      	ldrh	r2, [r3, #6]
 8006a3a:	893b      	ldrh	r3, [r7, #8]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	bf28      	it	cs
 8006a40:	4613      	movcs	r3, r2
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	813b      	strh	r3, [r7, #8]
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fa5d 	bl	8006f0c <USBD_CtlSendData>
 8006a52:	e009      	b.n	8006a68 <USBD_GetDescriptor+0x2cc>
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9e7 	bl	8006e2a <USBD_CtlError>
 8006a5c:	e004      	b.n	8006a68 <USBD_GetDescriptor+0x2cc>
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 faae 	bl	8006fc0 <USBD_CtlSendStatus>
 8006a64:	e000      	b.n	8006a68 <USBD_GetDescriptor+0x2cc>
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop

08006a70 <USBD_SetAddress>:
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	889b      	ldrh	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d131      	bne.n	8006ae6 <USBD_SetAddress+0x76>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	88db      	ldrh	r3, [r3, #6]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d12d      	bne.n	8006ae6 <USBD_SetAddress+0x76>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	885b      	ldrh	r3, [r3, #2]
 8006a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a90:	d829      	bhi.n	8006ae6 <USBD_SetAddress+0x76>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	885b      	ldrh	r3, [r3, #2]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a9c:	73fb      	strb	r3, [r7, #15]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d104      	bne.n	8006ab4 <USBD_SetAddress+0x44>
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f9bc 	bl	8006e2a <USBD_CtlError>
 8006ab2:	e01d      	b.n	8006af0 <USBD_SetAddress+0x80>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7bfa      	ldrb	r2, [r7, #15]
 8006ab8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fed5 	bl	8007870 <USBD_LL_SetUSBAddress>
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa7a 	bl	8006fc0 <USBD_CtlSendStatus>
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <USBD_SetAddress+0x6c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006ada:	e009      	b.n	8006af0 <USBD_SetAddress+0x80>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006ae4:	e004      	b.n	8006af0 <USBD_SetAddress+0x80>
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f99e 	bl	8006e2a <USBD_CtlError>
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_SetConfig>:
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	885b      	ldrh	r3, [r3, #2]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	4b4e      	ldr	r3, [pc, #312]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	4b4d      	ldr	r3, [pc, #308]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d905      	bls.n	8006b24 <USBD_SetConfig+0x2c>
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f985 	bl	8006e2a <USBD_CtlError>
 8006b20:	2303      	movs	r3, #3
 8006b22:	e08c      	b.n	8006c3e <USBD_SetConfig+0x146>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d002      	beq.n	8006b36 <USBD_SetConfig+0x3e>
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d029      	beq.n	8006b88 <USBD_SetConfig+0x90>
 8006b34:	e075      	b.n	8006c22 <USBD_SetConfig+0x12a>
 8006b36:	4b44      	ldr	r3, [pc, #272]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d020      	beq.n	8006b80 <USBD_SetConfig+0x88>
 8006b3e:	4b42      	ldr	r3, [pc, #264]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
 8006b48:	4b3f      	ldr	r3, [pc, #252]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe ffe7 	bl	8005b22 <USBD_SetClassConfig>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <USBD_SetConfig+0x78>
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f962 	bl	8006e2a <USBD_CtlError>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006b6e:	e065      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa25 	bl	8006fc0 <USBD_CtlSendStatus>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006b7e:	e05d      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa1d 	bl	8006fc0 <USBD_CtlSendStatus>
 8006b86:	e059      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006b88:	4b2f      	ldr	r3, [pc, #188]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d112      	bne.n	8006bb6 <USBD_SetConfig+0xbe>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <USBD_SetConfig+0x150>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	4b29      	ldr	r3, [pc, #164]	; (8006c48 <USBD_SetConfig+0x150>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fe ffd6 	bl	8005b5a <USBD_ClrClassConfig>
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa06 	bl	8006fc0 <USBD_CtlSendStatus>
 8006bb4:	e042      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006bb6:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <USBD_SetConfig+0x150>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d02a      	beq.n	8006c1a <USBD_SetConfig+0x122>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fe ffc4 	bl	8005b5a <USBD_ClrClassConfig>
 8006bd2:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <USBD_SetConfig+0x150>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	605a      	str	r2, [r3, #4]
 8006bdc:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <USBD_SetConfig+0x150>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe ff9d 	bl	8005b22 <USBD_SetClassConfig>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00f      	beq.n	8006c12 <USBD_SetConfig+0x11a>
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f918 	bl	8006e2a <USBD_CtlError>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fe ffa9 	bl	8005b5a <USBD_ClrClassConfig>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8006c10:	e014      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9d4 	bl	8006fc0 <USBD_CtlSendStatus>
 8006c18:	e010      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9d0 	bl	8006fc0 <USBD_CtlSendStatus>
 8006c20:	e00c      	b.n	8006c3c <USBD_SetConfig+0x144>
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f900 	bl	8006e2a <USBD_CtlError>
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <USBD_SetConfig+0x150>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fe ff92 	bl	8005b5a <USBD_ClrClassConfig>
 8006c36:	2303      	movs	r3, #3
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	bf00      	nop
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200002f4 	.word	0x200002f4

08006c4c <USBD_GetConfig>:
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d004      	beq.n	8006c68 <USBD_GetConfig+0x1c>
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f8e2 	bl	8006e2a <USBD_CtlError>
 8006c66:	e023      	b.n	8006cb0 <USBD_GetConfig+0x64>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	dc02      	bgt.n	8006c7a <USBD_GetConfig+0x2e>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dc03      	bgt.n	8006c80 <USBD_GetConfig+0x34>
 8006c78:	e015      	b.n	8006ca6 <USBD_GetConfig+0x5a>
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d00b      	beq.n	8006c96 <USBD_GetConfig+0x4a>
 8006c7e:	e012      	b.n	8006ca6 <USBD_GetConfig+0x5a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f93c 	bl	8006f0c <USBD_CtlSendData>
 8006c94:	e00c      	b.n	8006cb0 <USBD_GetConfig+0x64>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f934 	bl	8006f0c <USBD_CtlSendData>
 8006ca4:	e004      	b.n	8006cb0 <USBD_GetConfig+0x64>
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f8be 	bl	8006e2a <USBD_CtlError>
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_GetStatus>:
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d81e      	bhi.n	8006d0e <USBD_GetStatus+0x56>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	88db      	ldrh	r3, [r3, #6]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d004      	beq.n	8006ce2 <USBD_GetStatus+0x2a>
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f8a5 	bl	8006e2a <USBD_CtlError>
 8006ce0:	e01a      	b.n	8006d18 <USBD_GetStatus+0x60>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <USBD_GetStatus+0x46>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f043 0202 	orr.w	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	330c      	adds	r3, #12
 8006d02:	2202      	movs	r2, #2
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f900 	bl	8006f0c <USBD_CtlSendData>
 8006d0c:	e004      	b.n	8006d18 <USBD_GetStatus+0x60>
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f88a 	bl	8006e2a <USBD_CtlError>
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_SetFeature>:
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	885b      	ldrh	r3, [r3, #2]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d107      	bne.n	8006d42 <USBD_SetFeature+0x22>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f940 	bl	8006fc0 <USBD_CtlSendStatus>
 8006d40:	e013      	b.n	8006d6a <USBD_SetFeature+0x4a>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d10b      	bne.n	8006d62 <USBD_SetFeature+0x42>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	889b      	ldrh	r3, [r3, #4]
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f930 	bl	8006fc0 <USBD_CtlSendStatus>
 8006d60:	e003      	b.n	8006d6a <USBD_SetFeature+0x4a>
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f860 	bl	8006e2a <USBD_CtlError>
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_ClrFeature>:
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d80b      	bhi.n	8006da2 <USBD_ClrFeature+0x30>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	885b      	ldrh	r3, [r3, #2]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10c      	bne.n	8006dac <USBD_ClrFeature+0x3a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f910 	bl	8006fc0 <USBD_CtlSendStatus>
 8006da0:	e004      	b.n	8006dac <USBD_ClrFeature+0x3a>
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f840 	bl	8006e2a <USBD_CtlError>
 8006daa:	e000      	b.n	8006dae <USBD_ClrFeature+0x3c>
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_ParseSetupRequest>:
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	781a      	ldrb	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	781a      	ldrb	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	705a      	strb	r2, [r3, #1]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff fa41 	bl	8006268 <SWAPBYTE>
 8006de6:	4603      	mov	r3, r0
 8006de8:	461a      	mov	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	805a      	strh	r2, [r3, #2]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fa34 	bl	8006268 <SWAPBYTE>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	809a      	strh	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fa27 	bl	8006268 <SWAPBYTE>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	80da      	strh	r2, [r3, #6]
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_CtlError>:
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fcb0 	bl	800779c <USBD_LL_StallEP>
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fcac 	bl	800779c <USBD_LL_StallEP>
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_GetString>:
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d036      	beq.n	8006ed0 <USBD_GetString+0x84>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	6938      	ldr	r0, [r7, #16]
 8006e68:	f000 f836 	bl	8006ed8 <USBD_GetLen>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	3301      	adds	r3, #1
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	4413      	add	r3, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	75fb      	strb	r3, [r7, #23]
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	2203      	movs	r2, #3
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	75fb      	strb	r3, [r7, #23]
 8006e9c:	e013      	b.n	8006ec6 <USBD_GetString+0x7a>
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3301      	adds	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	75fb      	strb	r3, [r7, #23]
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	4413      	add	r3, r2
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e7      	bne.n	8006e9e <USBD_GetString+0x52>
 8006ece:	e000      	b.n	8006ed2 <USBD_GetString+0x86>
 8006ed0:	bf00      	nop
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_GetLen>:
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	e005      	b.n	8006ef6 <USBD_GetLen+0x1e>
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	3301      	adds	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f5      	bne.n	8006eea <USBD_GetLen+0x12>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBD_CtlSendData>:
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	619a      	str	r2, [r3, #24]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	61da      	str	r2, [r3, #28]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	2100      	movs	r1, #0
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 fcbb 	bl	80078ae <USBD_LL_Transmit>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_CtlContinueSendData>:
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	2100      	movs	r1, #0
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fcaa 	bl	80078ae <USBD_LL_Transmit>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_CtlPrepareRx>:
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2203      	movs	r2, #3
 8006f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fcae 	bl	80078f0 <USBD_LL_PrepareReceive>
 8006f94:	2300      	movs	r3, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_CtlContinueRx>:
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fc9d 	bl	80078f0 <USBD_LL_PrepareReceive>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_CtlSendStatus>:
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fc69 	bl	80078ae <USBD_LL_Transmit>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_CtlReceiveStatus>:
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2205      	movs	r2, #5
 8006ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fc77 	bl	80078f0 <USBD_LL_PrepareReceive>
 8007002:	2300      	movs	r3, #0
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <MX_USB_DEVICE_Init>:
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
 8007010:	2200      	movs	r2, #0
 8007012:	4912      	ldr	r1, [pc, #72]	; (800705c <MX_USB_DEVICE_Init+0x50>)
 8007014:	4812      	ldr	r0, [pc, #72]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 8007016:	f7fe fd07 	bl	8005a28 <USBD_Init>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <MX_USB_DEVICE_Init+0x18>
 8007020:	f7fa f8ce 	bl	80011c0 <Error_Handler>
 8007024:	490f      	ldr	r1, [pc, #60]	; (8007064 <MX_USB_DEVICE_Init+0x58>)
 8007026:	480e      	ldr	r0, [pc, #56]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 8007028:	f7fe fd2e 	bl	8005a88 <USBD_RegisterClass>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_USB_DEVICE_Init+0x2a>
 8007032:	f7fa f8c5 	bl	80011c0 <Error_Handler>
 8007036:	490c      	ldr	r1, [pc, #48]	; (8007068 <MX_USB_DEVICE_Init+0x5c>)
 8007038:	4809      	ldr	r0, [pc, #36]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 800703a:	f7fe fc65 	bl	8005908 <USBD_CDC_RegisterInterface>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <MX_USB_DEVICE_Init+0x3c>
 8007044:	f7fa f8bc 	bl	80011c0 <Error_Handler>
 8007048:	4805      	ldr	r0, [pc, #20]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 800704a:	f7fe fd53 	bl	8005af4 <USBD_Start>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <MX_USB_DEVICE_Init+0x4c>
 8007054:	f7fa f8b4 	bl	80011c0 <Error_Handler>
 8007058:	bf00      	nop
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200000ac 	.word	0x200000ac
 8007060:	200002f8 	.word	0x200002f8
 8007064:	20000018 	.word	0x20000018
 8007068:	20000098 	.word	0x20000098

0800706c <CDC_Init_FS>:
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
 8007070:	2200      	movs	r2, #0
 8007072:	4905      	ldr	r1, [pc, #20]	; (8007088 <CDC_Init_FS+0x1c>)
 8007074:	4805      	ldr	r0, [pc, #20]	; (800708c <CDC_Init_FS+0x20>)
 8007076:	f7fe fc61 	bl	800593c <USBD_CDC_SetTxBuffer>
 800707a:	4905      	ldr	r1, [pc, #20]	; (8007090 <CDC_Init_FS+0x24>)
 800707c:	4803      	ldr	r0, [pc, #12]	; (800708c <CDC_Init_FS+0x20>)
 800707e:	f7fe fc7f 	bl	8005980 <USBD_CDC_SetRxBuffer>
 8007082:	2300      	movs	r3, #0
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	200009d4 	.word	0x200009d4
 800708c:	200002f8 	.word	0x200002f8
 8007090:	200005d4 	.word	0x200005d4

08007094 <CDC_DeInit_FS>:
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
 8007098:	2300      	movs	r3, #0
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <CDC_Control_FS>:
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	71fb      	strb	r3, [r7, #7]
 80070b0:	4613      	mov	r3, r2
 80070b2:	80bb      	strh	r3, [r7, #4]
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b23      	cmp	r3, #35	; 0x23
 80070b8:	d84a      	bhi.n	8007150 <CDC_Control_FS+0xac>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <CDC_Control_FS+0x1c>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	08007151 	.word	0x08007151
 80070c4:	08007151 	.word	0x08007151
 80070c8:	08007151 	.word	0x08007151
 80070cc:	08007151 	.word	0x08007151
 80070d0:	08007151 	.word	0x08007151
 80070d4:	08007151 	.word	0x08007151
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007151 	.word	0x08007151
 80070e0:	08007151 	.word	0x08007151
 80070e4:	08007151 	.word	0x08007151
 80070e8:	08007151 	.word	0x08007151
 80070ec:	08007151 	.word	0x08007151
 80070f0:	08007151 	.word	0x08007151
 80070f4:	08007151 	.word	0x08007151
 80070f8:	08007151 	.word	0x08007151
 80070fc:	08007151 	.word	0x08007151
 8007100:	08007151 	.word	0x08007151
 8007104:	08007151 	.word	0x08007151
 8007108:	08007151 	.word	0x08007151
 800710c:	08007151 	.word	0x08007151
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
 800711c:	08007151 	.word	0x08007151
 8007120:	08007151 	.word	0x08007151
 8007124:	08007151 	.word	0x08007151
 8007128:	08007151 	.word	0x08007151
 800712c:	08007151 	.word	0x08007151
 8007130:	08007151 	.word	0x08007151
 8007134:	08007151 	.word	0x08007151
 8007138:	08007151 	.word	0x08007151
 800713c:	08007151 	.word	0x08007151
 8007140:	08007151 	.word	0x08007151
 8007144:	08007151 	.word	0x08007151
 8007148:	08007151 	.word	0x08007151
 800714c:	08007151 	.word	0x08007151
 8007150:	bf00      	nop
 8007152:	2300      	movs	r3, #0
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <CDC_Receive_FS>:
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4805      	ldr	r0, [pc, #20]	; (8007184 <CDC_Receive_FS+0x24>)
 800716e:	f7fe fc07 	bl	8005980 <USBD_CDC_SetRxBuffer>
 8007172:	4804      	ldr	r0, [pc, #16]	; (8007184 <CDC_Receive_FS+0x24>)
 8007174:	f7fe fc22 	bl	80059bc <USBD_CDC_ReceivePacket>
 8007178:	2300      	movs	r3, #0
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200002f8 	.word	0x200002f8

08007188 <CDC_TransmitCplt_FS>:
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
 800719a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800719e:	4618      	mov	r0, r3
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <USBD_FS_DeviceDescriptor>:
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	71fb      	strb	r3, [r7, #7]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2212      	movs	r2, #18
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <USBD_FS_DeviceDescriptor+0x20>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	200000c8 	.word	0x200000c8

080071d0 <USBD_FS_LangIDStrDescriptor>:
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	71fb      	strb	r3, [r7, #7]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2204      	movs	r2, #4
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <USBD_FS_LangIDStrDescriptor+0x20>)
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	200000dc 	.word	0x200000dc

080071f4 <USBD_FS_ProductStrDescriptor>:
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <USBD_FS_ProductStrDescriptor+0x1e>
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4907      	ldr	r1, [pc, #28]	; (8007228 <USBD_FS_ProductStrDescriptor+0x34>)
 800720a:	4808      	ldr	r0, [pc, #32]	; (800722c <USBD_FS_ProductStrDescriptor+0x38>)
 800720c:	f7ff fe1e 	bl	8006e4c <USBD_GetString>
 8007210:	e004      	b.n	800721c <USBD_FS_ProductStrDescriptor+0x28>
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <USBD_FS_ProductStrDescriptor+0x34>)
 8007216:	4805      	ldr	r0, [pc, #20]	; (800722c <USBD_FS_ProductStrDescriptor+0x38>)
 8007218:	f7ff fe18 	bl	8006e4c <USBD_GetString>
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <USBD_FS_ProductStrDescriptor+0x34>)
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000dd4 	.word	0x20000dd4
 800722c:	0800c338 	.word	0x0800c338

08007230 <USBD_FS_ManufacturerStrDescriptor>:
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	6039      	str	r1, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4904      	ldr	r1, [pc, #16]	; (8007250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007240:	4804      	ldr	r0, [pc, #16]	; (8007254 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007242:	f7ff fe03 	bl	8006e4c <USBD_GetString>
 8007246:	4b02      	ldr	r3, [pc, #8]	; (8007250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000dd4 	.word	0x20000dd4
 8007254:	0800c350 	.word	0x0800c350

08007258 <USBD_FS_SerialStrDescriptor>:
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	71fb      	strb	r3, [r7, #7]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	221a      	movs	r2, #26
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	f000 f843 	bl	80072f4 <Get_SerialNum>
 800726e:	4b02      	ldr	r3, [pc, #8]	; (8007278 <USBD_FS_SerialStrDescriptor+0x20>)
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	200000e0 	.word	0x200000e0

0800727c <USBD_FS_ConfigStrDescriptor>:
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <USBD_FS_ConfigStrDescriptor+0x1e>
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	4907      	ldr	r1, [pc, #28]	; (80072b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007292:	4808      	ldr	r0, [pc, #32]	; (80072b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007294:	f7ff fdda 	bl	8006e4c <USBD_GetString>
 8007298:	e004      	b.n	80072a4 <USBD_FS_ConfigStrDescriptor+0x28>
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	4904      	ldr	r1, [pc, #16]	; (80072b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800729e:	4805      	ldr	r0, [pc, #20]	; (80072b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072a0:	f7ff fdd4 	bl	8006e4c <USBD_GetString>
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000dd4 	.word	0x20000dd4
 80072b4:	0800c364 	.word	0x0800c364

080072b8 <USBD_FS_InterfaceStrDescriptor>:
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	71fb      	strb	r3, [r7, #7]
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ce:	4808      	ldr	r0, [pc, #32]	; (80072f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072d0:	f7ff fdbc 	bl	8006e4c <USBD_GetString>
 80072d4:	e004      	b.n	80072e0 <USBD_FS_InterfaceStrDescriptor+0x28>
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4904      	ldr	r1, [pc, #16]	; (80072ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072da:	4805      	ldr	r0, [pc, #20]	; (80072f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072dc:	f7ff fdb6 	bl	8006e4c <USBD_GetString>
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000dd4 	.word	0x20000dd4
 80072f0:	0800c370 	.word	0x0800c370

080072f4 <Get_SerialNum>:
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <Get_SerialNum+0x44>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <Get_SerialNum+0x48>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <Get_SerialNum+0x4c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <Get_SerialNum+0x3a>
 800731a:	2208      	movs	r2, #8
 800731c:	4909      	ldr	r1, [pc, #36]	; (8007344 <Get_SerialNum+0x50>)
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f814 	bl	800734c <IntToUnicode>
 8007324:	2204      	movs	r2, #4
 8007326:	4908      	ldr	r1, [pc, #32]	; (8007348 <Get_SerialNum+0x54>)
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f000 f80f 	bl	800734c <IntToUnicode>
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	1fff7a10 	.word	0x1fff7a10
 800733c:	1fff7a14 	.word	0x1fff7a14
 8007340:	1fff7a18 	.word	0x1fff7a18
 8007344:	200000e2 	.word	0x200000e2
 8007348:	200000f2 	.word	0x200000f2

0800734c <IntToUnicode>:
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]
 8007362:	e027      	b.n	80073b4 <IntToUnicode+0x68>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	0f1b      	lsrs	r3, r3, #28
 8007368:	2b09      	cmp	r3, #9
 800736a:	d80b      	bhi.n	8007384 <IntToUnicode+0x38>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0f1b      	lsrs	r3, r3, #28
 8007370:	b2da      	uxtb	r2, r3
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4619      	mov	r1, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	440b      	add	r3, r1
 800737c:	3230      	adds	r2, #48	; 0x30
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e00a      	b.n	800739a <IntToUnicode+0x4e>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	0f1b      	lsrs	r3, r3, #28
 8007388:	b2da      	uxtb	r2, r3
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4619      	mov	r1, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	440b      	add	r3, r1
 8007394:	3237      	adds	r2, #55	; 0x37
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	3301      	adds	r3, #1
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4413      	add	r3, r2
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	3301      	adds	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
 80073b4:	7dfa      	ldrb	r2, [r7, #23]
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d3d3      	bcc.n	8007364 <IntToUnicode+0x18>
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <HAL_PCD_MspInit>:
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	60da      	str	r2, [r3, #12]
 80073e2:	611a      	str	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ec:	d13a      	bne.n	8007464 <HAL_PCD_MspInit+0x98>
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	4b1e      	ldr	r3, [pc, #120]	; (800746c <HAL_PCD_MspInit+0xa0>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	4a1d      	ldr	r2, [pc, #116]	; (800746c <HAL_PCD_MspInit+0xa0>)
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	6313      	str	r3, [r2, #48]	; 0x30
 80073fe:	4b1b      	ldr	r3, [pc, #108]	; (800746c <HAL_PCD_MspInit+0xa0>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	2302      	movs	r3, #2
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	2303      	movs	r3, #3
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	230a      	movs	r3, #10
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
 8007420:	f107 0314 	add.w	r3, r7, #20
 8007424:	4619      	mov	r1, r3
 8007426:	4812      	ldr	r0, [pc, #72]	; (8007470 <HAL_PCD_MspInit+0xa4>)
 8007428:	f7fa f9d6 	bl	80017d8 <HAL_GPIO_Init>
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <HAL_PCD_MspInit+0xa0>)
 800742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007430:	4a0e      	ldr	r2, [pc, #56]	; (800746c <HAL_PCD_MspInit+0xa0>)
 8007432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007436:	6353      	str	r3, [r2, #52]	; 0x34
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <HAL_PCD_MspInit+0xa0>)
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	4a0a      	ldr	r2, [pc, #40]	; (800746c <HAL_PCD_MspInit+0xa0>)
 8007442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007446:	6453      	str	r3, [r2, #68]	; 0x44
 8007448:	4b08      	ldr	r3, [pc, #32]	; (800746c <HAL_PCD_MspInit+0xa0>)
 800744a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	2043      	movs	r0, #67	; 0x43
 800745a:	f7fa f986 	bl	800176a <HAL_NVIC_SetPriority>
 800745e:	2043      	movs	r0, #67	; 0x43
 8007460:	f7fa f99f 	bl	80017a2 <HAL_NVIC_EnableIRQ>
 8007464:	bf00      	nop
 8007466:	3728      	adds	r7, #40	; 0x28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40023800 	.word	0x40023800
 8007470:	40020000 	.word	0x40020000

08007474 <HAL_PCD_SetupStageCallback>:
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f7fe fb7f 	bl	8005b8e <USBD_LL_SetupStage>
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_PCD_DataOutStageCallback>:
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	4619      	mov	r1, r3
 80074c2:	f7fe fbb9 	bl	8005c38 <USBD_LL_DataOutStage>
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_PCD_DataInStageCallback>:
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	334c      	adds	r3, #76	; 0x4c
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	4619      	mov	r1, r3
 80074f6:	f7fe fc52 	bl	8005d9e <USBD_LL_DataInStage>
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_PCD_SOFCallback>:
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fd86 	bl	8006022 <USBD_LL_SOF>
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_PCD_ResetCallback>:
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d001      	beq.n	8007536 <HAL_PCD_ResetCallback+0x18>
 8007532:	f7f9 fe45 	bl	80011c0 <Error_Handler>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe fd30 	bl	8005fa6 <USBD_LL_SetSpeed>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fcd8 	bl	8005f02 <USBD_LL_Reset>
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_PCD_SuspendCallback>:
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fd2b 	bl	8005fc6 <USBD_LL_Suspend>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <HAL_PCD_SuspendCallback+0x40>
 8007590:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <HAL_PCD_SuspendCallback+0x48>)
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	4a03      	ldr	r2, [pc, #12]	; (80075a4 <HAL_PCD_SuspendCallback+0x48>)
 8007596:	f043 0306 	orr.w	r3, r3, #6
 800759a:	6113      	str	r3, [r2, #16]
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	e000ed00 	.word	0xe000ed00

080075a8 <HAL_PCD_ResumeCallback>:
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fd1b 	bl	8005ff2 <USBD_LL_Resume>
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_ISOOUTIncompleteCallback>:
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fd73 	bl	80060c6 <USBD_LL_IsoOUTIncomplete>
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_PCD_ISOINIncompleteCallback>:
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fd2f 	bl	8006062 <USBD_LL_IsoINIncomplete>
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_PCD_ConnectCallback>:
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fd85 	bl	800612a <USBD_LL_DevConnected>
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_PCD_DisconnectCallback>:
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe fd82 	bl	8006140 <USBD_LL_DevDisconnected>
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_Init>:
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d13c      	bne.n	80076ce <USBD_LL_Init+0x8a>
 8007654:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <USBD_LL_Init+0x94>)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <USBD_LL_Init+0x94>)
 8007660:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8007664:	4b1c      	ldr	r3, [pc, #112]	; (80076d8 <USBD_LL_Init+0x94>)
 8007666:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <USBD_LL_Init+0x94>)
 800766e:	2204      	movs	r2, #4
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <USBD_LL_Init+0x94>)
 8007674:	2202      	movs	r2, #2
 8007676:	60da      	str	r2, [r3, #12]
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <USBD_LL_Init+0x94>)
 800767a:	2200      	movs	r2, #0
 800767c:	611a      	str	r2, [r3, #16]
 800767e:	4b16      	ldr	r3, [pc, #88]	; (80076d8 <USBD_LL_Init+0x94>)
 8007680:	2202      	movs	r2, #2
 8007682:	619a      	str	r2, [r3, #24]
 8007684:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <USBD_LL_Init+0x94>)
 8007686:	2200      	movs	r2, #0
 8007688:	61da      	str	r2, [r3, #28]
 800768a:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <USBD_LL_Init+0x94>)
 800768c:	2200      	movs	r2, #0
 800768e:	621a      	str	r2, [r3, #32]
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <USBD_LL_Init+0x94>)
 8007692:	2200      	movs	r2, #0
 8007694:	625a      	str	r2, [r3, #36]	; 0x24
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <USBD_LL_Init+0x94>)
 8007698:	2200      	movs	r2, #0
 800769a:	62da      	str	r2, [r3, #44]	; 0x2c
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <USBD_LL_Init+0x94>)
 800769e:	2200      	movs	r2, #0
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30
 80076a2:	480d      	ldr	r0, [pc, #52]	; (80076d8 <USBD_LL_Init+0x94>)
 80076a4:	f7fa fa35 	bl	8001b12 <HAL_PCD_Init>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <USBD_LL_Init+0x6e>
 80076ae:	f7f9 fd87 	bl	80011c0 <Error_Handler>
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	4808      	ldr	r0, [pc, #32]	; (80076d8 <USBD_LL_Init+0x94>)
 80076b6:	f7fb fc8c 	bl	8002fd2 <HAL_PCDEx_SetRxFiFo>
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	2100      	movs	r1, #0
 80076be:	4806      	ldr	r0, [pc, #24]	; (80076d8 <USBD_LL_Init+0x94>)
 80076c0:	f7fb fc40 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
 80076c4:	2280      	movs	r2, #128	; 0x80
 80076c6:	2101      	movs	r1, #1
 80076c8:	4803      	ldr	r0, [pc, #12]	; (80076d8 <USBD_LL_Init+0x94>)
 80076ca:	f7fb fc3b 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
 80076ce:	2300      	movs	r3, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000fd4 	.word	0x20000fd4

080076dc <USBD_LL_Start>:
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
 80076e8:	2300      	movs	r3, #0
 80076ea:	73bb      	strb	r3, [r7, #14]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fa fb2a 	bl	8001d4c <HAL_PCD_Start>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f942 	bl	8007988 <USBD_Get_USB_Status>
 8007704:	4603      	mov	r3, r0
 8007706:	73bb      	strb	r3, [r7, #14]
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_OpenEP>:
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	4608      	mov	r0, r1
 800771c:	4611      	mov	r1, r2
 800771e:	461a      	mov	r2, r3
 8007720:	4603      	mov	r3, r0
 8007722:	70fb      	strb	r3, [r7, #3]
 8007724:	460b      	mov	r3, r1
 8007726:	70bb      	strb	r3, [r7, #2]
 8007728:	4613      	mov	r3, r2
 800772a:	803b      	strh	r3, [r7, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800773a:	78bb      	ldrb	r3, [r7, #2]
 800773c:	883a      	ldrh	r2, [r7, #0]
 800773e:	78f9      	ldrb	r1, [r7, #3]
 8007740:	f7fa fffb 	bl	800273a <HAL_PCD_EP_Open>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f91c 	bl	8007988 <USBD_Get_USB_Status>
 8007750:	4603      	mov	r3, r0
 8007752:	73bb      	strb	r3, [r7, #14]
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_CloseEP>:
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
 800776e:	2300      	movs	r3, #0
 8007770:	73bb      	strb	r3, [r7, #14]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fb f844 	bl	800280a <HAL_PCD_EP_Close>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f8fd 	bl	8007988 <USBD_Get_USB_Status>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_StallEP>:
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	2300      	movs	r3, #0
 80077ae:	73bb      	strb	r3, [r7, #14]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fb f91c 	bl	80029f8 <HAL_PCD_EP_SetStall>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f8de 	bl	8007988 <USBD_Get_USB_Status>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_ClearStallEP>:
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
 80077ea:	2300      	movs	r3, #0
 80077ec:	73bb      	strb	r3, [r7, #14]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077f4:	78fa      	ldrb	r2, [r7, #3]
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fb f961 	bl	8002ac0 <HAL_PCD_EP_ClrStall>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 f8bf 	bl	8007988 <USBD_Get_USB_Status>
 800780a:	4603      	mov	r3, r0
 800780c:	73bb      	strb	r3, [r7, #14]
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_LL_IsStallEP>:
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007830:	2b00      	cmp	r3, #0
 8007832:	da0b      	bge.n	800784c <USBD_LL_IsStallEP+0x34>
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783a:	68f9      	ldr	r1, [r7, #12]
 800783c:	4613      	mov	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	333e      	adds	r3, #62	; 0x3e
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	e00b      	b.n	8007864 <USBD_LL_IsStallEP+0x4c>
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USBD_LL_SetUSBAddress>:
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
 8007880:	2300      	movs	r3, #0
 8007882:	73bb      	strb	r3, [r7, #14]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fa ff2e 	bl	80026f0 <HAL_PCD_SetAddress>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 f874 	bl	8007988 <USBD_Get_USB_Status>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73bb      	strb	r3, [r7, #14]
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_LL_Transmit>:
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	460b      	mov	r3, r1
 80078bc:	72fb      	strb	r3, [r7, #11]
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
 80078c2:	2300      	movs	r3, #0
 80078c4:	75bb      	strb	r3, [r7, #22]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078cc:	7af9      	ldrb	r1, [r7, #11]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	f7fb f847 	bl	8002964 <HAL_PCD_EP_Transmit>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 f853 	bl	8007988 <USBD_Get_USB_Status>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75bb      	strb	r3, [r7, #22]
 80078e6:	7dbb      	ldrb	r3, [r7, #22]
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_LL_PrepareReceive>:
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	460b      	mov	r3, r1
 80078fe:	72fb      	strb	r3, [r7, #11]
 8007900:	2300      	movs	r3, #0
 8007902:	75fb      	strb	r3, [r7, #23]
 8007904:	2300      	movs	r3, #0
 8007906:	75bb      	strb	r3, [r7, #22]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800790e:	7af9      	ldrb	r1, [r7, #11]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	f7fa ffc3 	bl	800289e <HAL_PCD_EP_Receive>
 8007918:	4603      	mov	r3, r0
 800791a:	75fb      	strb	r3, [r7, #23]
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f832 	bl	8007988 <USBD_Get_USB_Status>
 8007924:	4603      	mov	r3, r0
 8007926:	75bb      	strb	r3, [r7, #22]
 8007928:	7dbb      	ldrb	r3, [r7, #22]
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_LL_GetRxDataSize>:
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	460b      	mov	r3, r1
 800793c:	70fb      	strb	r3, [r7, #3]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	4611      	mov	r1, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f7fa fff3 	bl	8002934 <HAL_PCD_EP_GetRxCount>
 800794e:	4603      	mov	r3, r0
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_static_malloc>:
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	4b03      	ldr	r3, [pc, #12]	; (8007970 <USBD_static_malloc+0x18>)
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	200014e0 	.word	0x200014e0

08007974 <USBD_static_free>:
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBD_Get_USB_Status>:
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	71fb      	strb	r3, [r7, #7]
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d817      	bhi.n	80079cc <USBD_Get_USB_Status+0x44>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <USBD_Get_USB_Status+0x1c>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079bb 	.word	0x080079bb
 80079ac:	080079c1 	.word	0x080079c1
 80079b0:	080079c7 	.word	0x080079c7
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
 80079b8:	e00b      	b.n	80079d2 <USBD_Get_USB_Status+0x4a>
 80079ba:	2303      	movs	r3, #3
 80079bc:	73fb      	strb	r3, [r7, #15]
 80079be:	e008      	b.n	80079d2 <USBD_Get_USB_Status+0x4a>
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	e005      	b.n	80079d2 <USBD_Get_USB_Status+0x4a>
 80079c6:	2303      	movs	r3, #3
 80079c8:	73fb      	strb	r3, [r7, #15]
 80079ca:	e002      	b.n	80079d2 <USBD_Get_USB_Status+0x4a>
 80079cc:	2303      	movs	r3, #3
 80079ce:	73fb      	strb	r3, [r7, #15]
 80079d0:	bf00      	nop
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <__errno>:
 80079e0:	4b01      	ldr	r3, [pc, #4]	; (80079e8 <__errno+0x8>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200000fc 	.word	0x200000fc

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4d0d      	ldr	r5, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4c0d      	ldr	r4, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	2600      	movs	r6, #0
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	4d0b      	ldr	r5, [pc, #44]	; (8007a2c <__libc_init_array+0x40>)
 80079fe:	4c0c      	ldr	r4, [pc, #48]	; (8007a30 <__libc_init_array+0x44>)
 8007a00:	f004 fc8e 	bl	800c320 <_init>
 8007a04:	1b64      	subs	r4, r4, r5
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	2600      	movs	r6, #0
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a14:	4798      	blx	r3
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	4798      	blx	r3
 8007a20:	3601      	adds	r6, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	0800c83c 	.word	0x0800c83c
 8007a28:	0800c83c 	.word	0x0800c83c
 8007a2c:	0800c83c 	.word	0x0800c83c
 8007a30:	0800c840 	.word	0x0800c840

08007a34 <malloc>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <malloc+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f000 b877 	b.w	8007b2c <_malloc_r>
 8007a3e:	bf00      	nop
 8007a40:	200000fc 	.word	0x200000fc

08007a44 <memset>:
 8007a44:	4402      	add	r2, r0
 8007a46:	4603      	mov	r3, r0
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d100      	bne.n	8007a4e <memset+0xa>
 8007a4c:	4770      	bx	lr
 8007a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a52:	e7f9      	b.n	8007a48 <memset+0x4>

08007a54 <_free_r>:
 8007a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d044      	beq.n	8007ae4 <_free_r+0x90>
 8007a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5e:	9001      	str	r0, [sp, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f1a1 0404 	sub.w	r4, r1, #4
 8007a66:	bfb8      	it	lt
 8007a68:	18e4      	addlt	r4, r4, r3
 8007a6a:	f003 f83f 	bl	800aaec <__malloc_lock>
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <_free_r+0x94>)
 8007a70:	9801      	ldr	r0, [sp, #4]
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	b933      	cbnz	r3, 8007a84 <_free_r+0x30>
 8007a76:	6063      	str	r3, [r4, #4]
 8007a78:	6014      	str	r4, [r2, #0]
 8007a7a:	b003      	add	sp, #12
 8007a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a80:	f003 b83a 	b.w	800aaf8 <__malloc_unlock>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d908      	bls.n	8007a9a <_free_r+0x46>
 8007a88:	6825      	ldr	r5, [r4, #0]
 8007a8a:	1961      	adds	r1, r4, r5
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf01      	itttt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	1949      	addeq	r1, r1, r5
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	e7ed      	b.n	8007a76 <_free_r+0x22>
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_free_r+0x50>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d9fa      	bls.n	8007a9a <_free_r+0x46>
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	1855      	adds	r5, r2, r1
 8007aa8:	42a5      	cmp	r5, r4
 8007aaa:	d10b      	bne.n	8007ac4 <_free_r+0x70>
 8007aac:	6824      	ldr	r4, [r4, #0]
 8007aae:	4421      	add	r1, r4
 8007ab0:	1854      	adds	r4, r2, r1
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	d1e0      	bne.n	8007a7a <_free_r+0x26>
 8007ab8:	681c      	ldr	r4, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	4421      	add	r1, r4
 8007ac0:	6011      	str	r1, [r2, #0]
 8007ac2:	e7da      	b.n	8007a7a <_free_r+0x26>
 8007ac4:	d902      	bls.n	8007acc <_free_r+0x78>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	e7d6      	b.n	8007a7a <_free_r+0x26>
 8007acc:	6825      	ldr	r5, [r4, #0]
 8007ace:	1961      	adds	r1, r4, r5
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf04      	itt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	bf04      	itt	eq
 8007adc:	1949      	addeq	r1, r1, r5
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	6054      	str	r4, [r2, #4]
 8007ae2:	e7ca      	b.n	8007a7a <_free_r+0x26>
 8007ae4:	b003      	add	sp, #12
 8007ae6:	bd30      	pop	{r4, r5, pc}
 8007ae8:	20001700 	.word	0x20001700

08007aec <sbrk_aligned>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4e0e      	ldr	r6, [pc, #56]	; (8007b28 <sbrk_aligned+0x3c>)
 8007af0:	460c      	mov	r4, r1
 8007af2:	6831      	ldr	r1, [r6, #0]
 8007af4:	4605      	mov	r5, r0
 8007af6:	b911      	cbnz	r1, 8007afe <sbrk_aligned+0x12>
 8007af8:	f000 ff06 	bl	8008908 <_sbrk_r>
 8007afc:	6030      	str	r0, [r6, #0]
 8007afe:	4621      	mov	r1, r4
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 ff01 	bl	8008908 <_sbrk_r>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d00a      	beq.n	8007b20 <sbrk_aligned+0x34>
 8007b0a:	1cc4      	adds	r4, r0, #3
 8007b0c:	f024 0403 	bic.w	r4, r4, #3
 8007b10:	42a0      	cmp	r0, r4
 8007b12:	d007      	beq.n	8007b24 <sbrk_aligned+0x38>
 8007b14:	1a21      	subs	r1, r4, r0
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 fef6 	bl	8008908 <_sbrk_r>
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d101      	bne.n	8007b24 <sbrk_aligned+0x38>
 8007b20:	f04f 34ff 	mov.w	r4, #4294967295
 8007b24:	4620      	mov	r0, r4
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	20001704 	.word	0x20001704

08007b2c <_malloc_r>:
 8007b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b30:	1ccd      	adds	r5, r1, #3
 8007b32:	f025 0503 	bic.w	r5, r5, #3
 8007b36:	3508      	adds	r5, #8
 8007b38:	2d0c      	cmp	r5, #12
 8007b3a:	bf38      	it	cc
 8007b3c:	250c      	movcc	r5, #12
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	4607      	mov	r7, r0
 8007b42:	db01      	blt.n	8007b48 <_malloc_r+0x1c>
 8007b44:	42a9      	cmp	r1, r5
 8007b46:	d905      	bls.n	8007b54 <_malloc_r+0x28>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	4630      	mov	r0, r6
 8007b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b54:	4e2e      	ldr	r6, [pc, #184]	; (8007c10 <_malloc_r+0xe4>)
 8007b56:	f002 ffc9 	bl	800aaec <__malloc_lock>
 8007b5a:	6833      	ldr	r3, [r6, #0]
 8007b5c:	461c      	mov	r4, r3
 8007b5e:	bb34      	cbnz	r4, 8007bae <_malloc_r+0x82>
 8007b60:	4629      	mov	r1, r5
 8007b62:	4638      	mov	r0, r7
 8007b64:	f7ff ffc2 	bl	8007aec <sbrk_aligned>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	d14d      	bne.n	8007c0a <_malloc_r+0xde>
 8007b6e:	6834      	ldr	r4, [r6, #0]
 8007b70:	4626      	mov	r6, r4
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	d140      	bne.n	8007bf8 <_malloc_r+0xcc>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	eb04 0803 	add.w	r8, r4, r3
 8007b80:	f000 fec2 	bl	8008908 <_sbrk_r>
 8007b84:	4580      	cmp	r8, r0
 8007b86:	d13a      	bne.n	8007bfe <_malloc_r+0xd2>
 8007b88:	6821      	ldr	r1, [r4, #0]
 8007b8a:	3503      	adds	r5, #3
 8007b8c:	1a6d      	subs	r5, r5, r1
 8007b8e:	f025 0503 	bic.w	r5, r5, #3
 8007b92:	3508      	adds	r5, #8
 8007b94:	2d0c      	cmp	r5, #12
 8007b96:	bf38      	it	cc
 8007b98:	250c      	movcc	r5, #12
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff ffa5 	bl	8007aec <sbrk_aligned>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d02b      	beq.n	8007bfe <_malloc_r+0xd2>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	442b      	add	r3, r5
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	e00e      	b.n	8007bcc <_malloc_r+0xa0>
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	1b52      	subs	r2, r2, r5
 8007bb2:	d41e      	bmi.n	8007bf2 <_malloc_r+0xc6>
 8007bb4:	2a0b      	cmp	r2, #11
 8007bb6:	d916      	bls.n	8007be6 <_malloc_r+0xba>
 8007bb8:	1961      	adds	r1, r4, r5
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	6025      	str	r5, [r4, #0]
 8007bbe:	bf18      	it	ne
 8007bc0:	6059      	strne	r1, [r3, #4]
 8007bc2:	6863      	ldr	r3, [r4, #4]
 8007bc4:	bf08      	it	eq
 8007bc6:	6031      	streq	r1, [r6, #0]
 8007bc8:	5162      	str	r2, [r4, r5]
 8007bca:	604b      	str	r3, [r1, #4]
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f104 060b 	add.w	r6, r4, #11
 8007bd2:	f002 ff91 	bl	800aaf8 <__malloc_unlock>
 8007bd6:	f026 0607 	bic.w	r6, r6, #7
 8007bda:	1d23      	adds	r3, r4, #4
 8007bdc:	1af2      	subs	r2, r6, r3
 8007bde:	d0b6      	beq.n	8007b4e <_malloc_r+0x22>
 8007be0:	1b9b      	subs	r3, r3, r6
 8007be2:	50a3      	str	r3, [r4, r2]
 8007be4:	e7b3      	b.n	8007b4e <_malloc_r+0x22>
 8007be6:	6862      	ldr	r2, [r4, #4]
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	bf0c      	ite	eq
 8007bec:	6032      	streq	r2, [r6, #0]
 8007bee:	605a      	strne	r2, [r3, #4]
 8007bf0:	e7ec      	b.n	8007bcc <_malloc_r+0xa0>
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	6864      	ldr	r4, [r4, #4]
 8007bf6:	e7b2      	b.n	8007b5e <_malloc_r+0x32>
 8007bf8:	4634      	mov	r4, r6
 8007bfa:	6876      	ldr	r6, [r6, #4]
 8007bfc:	e7b9      	b.n	8007b72 <_malloc_r+0x46>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4638      	mov	r0, r7
 8007c04:	f002 ff78 	bl	800aaf8 <__malloc_unlock>
 8007c08:	e7a1      	b.n	8007b4e <_malloc_r+0x22>
 8007c0a:	6025      	str	r5, [r4, #0]
 8007c0c:	e7de      	b.n	8007bcc <_malloc_r+0xa0>
 8007c0e:	bf00      	nop
 8007c10:	20001700 	.word	0x20001700

08007c14 <__cvt>:
 8007c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	ec55 4b10 	vmov	r4, r5, d0
 8007c1c:	2d00      	cmp	r5, #0
 8007c1e:	460e      	mov	r6, r1
 8007c20:	4619      	mov	r1, r3
 8007c22:	462b      	mov	r3, r5
 8007c24:	bfbb      	ittet	lt
 8007c26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c2a:	461d      	movlt	r5, r3
 8007c2c:	2300      	movge	r3, #0
 8007c2e:	232d      	movlt	r3, #45	; 0x2d
 8007c30:	700b      	strb	r3, [r1, #0]
 8007c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c38:	4691      	mov	r9, r2
 8007c3a:	f023 0820 	bic.w	r8, r3, #32
 8007c3e:	bfbc      	itt	lt
 8007c40:	4622      	movlt	r2, r4
 8007c42:	4614      	movlt	r4, r2
 8007c44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c48:	d005      	beq.n	8007c56 <__cvt+0x42>
 8007c4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c4e:	d100      	bne.n	8007c52 <__cvt+0x3e>
 8007c50:	3601      	adds	r6, #1
 8007c52:	2102      	movs	r1, #2
 8007c54:	e000      	b.n	8007c58 <__cvt+0x44>
 8007c56:	2103      	movs	r1, #3
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	ab02      	add	r3, sp, #8
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	ec45 4b10 	vmov	d0, r4, r5
 8007c64:	4653      	mov	r3, sl
 8007c66:	4632      	mov	r2, r6
 8007c68:	f001 fdbe 	bl	80097e8 <_dtoa_r>
 8007c6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c70:	4607      	mov	r7, r0
 8007c72:	d102      	bne.n	8007c7a <__cvt+0x66>
 8007c74:	f019 0f01 	tst.w	r9, #1
 8007c78:	d022      	beq.n	8007cc0 <__cvt+0xac>
 8007c7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c7e:	eb07 0906 	add.w	r9, r7, r6
 8007c82:	d110      	bne.n	8007ca6 <__cvt+0x92>
 8007c84:	783b      	ldrb	r3, [r7, #0]
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	d10a      	bne.n	8007ca0 <__cvt+0x8c>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c96:	b918      	cbnz	r0, 8007ca0 <__cvt+0x8c>
 8007c98:	f1c6 0601 	rsb	r6, r6, #1
 8007c9c:	f8ca 6000 	str.w	r6, [sl]
 8007ca0:	f8da 3000 	ldr.w	r3, [sl]
 8007ca4:	4499      	add	r9, r3
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7f8 ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb2:	b108      	cbz	r0, 8007cb8 <__cvt+0xa4>
 8007cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cb8:	2230      	movs	r2, #48	; 0x30
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	454b      	cmp	r3, r9
 8007cbe:	d307      	bcc.n	8007cd0 <__cvt+0xbc>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cc4:	1bdb      	subs	r3, r3, r7
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	b004      	add	sp, #16
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	1c59      	adds	r1, r3, #1
 8007cd2:	9103      	str	r1, [sp, #12]
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e7f0      	b.n	8007cba <__cvt+0xa6>

08007cd8 <__exponent>:
 8007cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	bfb8      	it	lt
 8007ce0:	4249      	neglt	r1, r1
 8007ce2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ce6:	bfb4      	ite	lt
 8007ce8:	222d      	movlt	r2, #45	; 0x2d
 8007cea:	222b      	movge	r2, #43	; 0x2b
 8007cec:	2909      	cmp	r1, #9
 8007cee:	7042      	strb	r2, [r0, #1]
 8007cf0:	dd2a      	ble.n	8007d48 <__exponent+0x70>
 8007cf2:	f10d 0407 	add.w	r4, sp, #7
 8007cf6:	46a4      	mov	ip, r4
 8007cf8:	270a      	movs	r7, #10
 8007cfa:	46a6      	mov	lr, r4
 8007cfc:	460a      	mov	r2, r1
 8007cfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d02:	fb07 1516 	mls	r5, r7, r6, r1
 8007d06:	3530      	adds	r5, #48	; 0x30
 8007d08:	2a63      	cmp	r2, #99	; 0x63
 8007d0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d12:	4631      	mov	r1, r6
 8007d14:	dcf1      	bgt.n	8007cfa <__exponent+0x22>
 8007d16:	3130      	adds	r1, #48	; 0x30
 8007d18:	f1ae 0502 	sub.w	r5, lr, #2
 8007d1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d20:	1c44      	adds	r4, r0, #1
 8007d22:	4629      	mov	r1, r5
 8007d24:	4561      	cmp	r1, ip
 8007d26:	d30a      	bcc.n	8007d3e <__exponent+0x66>
 8007d28:	f10d 0209 	add.w	r2, sp, #9
 8007d2c:	eba2 020e 	sub.w	r2, r2, lr
 8007d30:	4565      	cmp	r5, ip
 8007d32:	bf88      	it	hi
 8007d34:	2200      	movhi	r2, #0
 8007d36:	4413      	add	r3, r2
 8007d38:	1a18      	subs	r0, r3, r0
 8007d3a:	b003      	add	sp, #12
 8007d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d46:	e7ed      	b.n	8007d24 <__exponent+0x4c>
 8007d48:	2330      	movs	r3, #48	; 0x30
 8007d4a:	3130      	adds	r1, #48	; 0x30
 8007d4c:	7083      	strb	r3, [r0, #2]
 8007d4e:	70c1      	strb	r1, [r0, #3]
 8007d50:	1d03      	adds	r3, r0, #4
 8007d52:	e7f1      	b.n	8007d38 <__exponent+0x60>

08007d54 <_printf_float>:
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	ed2d 8b02 	vpush	{d8}
 8007d5c:	b08d      	sub	sp, #52	; 0x34
 8007d5e:	460c      	mov	r4, r1
 8007d60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d64:	4616      	mov	r6, r2
 8007d66:	461f      	mov	r7, r3
 8007d68:	4605      	mov	r5, r0
 8007d6a:	f002 fe9b 	bl	800aaa4 <_localeconv_r>
 8007d6e:	f8d0 a000 	ldr.w	sl, [r0]
 8007d72:	4650      	mov	r0, sl
 8007d74:	f7f8 fa34 	bl	80001e0 <strlen>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	9305      	str	r3, [sp, #20]
 8007d80:	f8d8 3000 	ldr.w	r3, [r8]
 8007d84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d88:	3307      	adds	r3, #7
 8007d8a:	f023 0307 	bic.w	r3, r3, #7
 8007d8e:	f103 0208 	add.w	r2, r3, #8
 8007d92:	f8c8 2000 	str.w	r2, [r8]
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007da2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007da6:	9307      	str	r3, [sp, #28]
 8007da8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dac:	ee08 0a10 	vmov	s16, r0
 8007db0:	4b9f      	ldr	r3, [pc, #636]	; (8008030 <_printf_float+0x2dc>)
 8007db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dba:	f7f8 febf 	bl	8000b3c <__aeabi_dcmpun>
 8007dbe:	bb88      	cbnz	r0, 8007e24 <_printf_float+0xd0>
 8007dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dc4:	4b9a      	ldr	r3, [pc, #616]	; (8008030 <_printf_float+0x2dc>)
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dca:	f7f8 fe99 	bl	8000b00 <__aeabi_dcmple>
 8007dce:	bb48      	cbnz	r0, 8007e24 <_printf_float+0xd0>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	f7f8 fe88 	bl	8000aec <__aeabi_dcmplt>
 8007ddc:	b110      	cbz	r0, 8007de4 <_printf_float+0x90>
 8007dde:	232d      	movs	r3, #45	; 0x2d
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de4:	4b93      	ldr	r3, [pc, #588]	; (8008034 <_printf_float+0x2e0>)
 8007de6:	4894      	ldr	r0, [pc, #592]	; (8008038 <_printf_float+0x2e4>)
 8007de8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dec:	bf94      	ite	ls
 8007dee:	4698      	movls	r8, r3
 8007df0:	4680      	movhi	r8, r0
 8007df2:	2303      	movs	r3, #3
 8007df4:	6123      	str	r3, [r4, #16]
 8007df6:	9b05      	ldr	r3, [sp, #20]
 8007df8:	f023 0204 	bic.w	r2, r3, #4
 8007dfc:	6022      	str	r2, [r4, #0]
 8007dfe:	f04f 0900 	mov.w	r9, #0
 8007e02:	9700      	str	r7, [sp, #0]
 8007e04:	4633      	mov	r3, r6
 8007e06:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f000 f9d8 	bl	80081c0 <_printf_common>
 8007e10:	3001      	adds	r0, #1
 8007e12:	f040 8090 	bne.w	8007f36 <_printf_float+0x1e2>
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	b00d      	add	sp, #52	; 0x34
 8007e1c:	ecbd 8b02 	vpop	{d8}
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fe86 	bl	8000b3c <__aeabi_dcmpun>
 8007e30:	b140      	cbz	r0, 8007e44 <_printf_float+0xf0>
 8007e32:	464b      	mov	r3, r9
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfbc      	itt	lt
 8007e38:	232d      	movlt	r3, #45	; 0x2d
 8007e3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e3e:	487f      	ldr	r0, [pc, #508]	; (800803c <_printf_float+0x2e8>)
 8007e40:	4b7f      	ldr	r3, [pc, #508]	; (8008040 <_printf_float+0x2ec>)
 8007e42:	e7d1      	b.n	8007de8 <_printf_float+0x94>
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e4a:	9206      	str	r2, [sp, #24]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	d13f      	bne.n	8007ed0 <_printf_float+0x17c>
 8007e50:	2306      	movs	r3, #6
 8007e52:	6063      	str	r3, [r4, #4]
 8007e54:	9b05      	ldr	r3, [sp, #20]
 8007e56:	6861      	ldr	r1, [r4, #4]
 8007e58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9303      	str	r3, [sp, #12]
 8007e60:	ab0a      	add	r3, sp, #40	; 0x28
 8007e62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e66:	ab09      	add	r3, sp, #36	; 0x24
 8007e68:	ec49 8b10 	vmov	d0, r8, r9
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	6022      	str	r2, [r4, #0]
 8007e70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff fecd 	bl	8007c14 <__cvt>
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e7e:	2b47      	cmp	r3, #71	; 0x47
 8007e80:	4680      	mov	r8, r0
 8007e82:	d108      	bne.n	8007e96 <_printf_float+0x142>
 8007e84:	1cc8      	adds	r0, r1, #3
 8007e86:	db02      	blt.n	8007e8e <_printf_float+0x13a>
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	dd41      	ble.n	8007f12 <_printf_float+0x1be>
 8007e8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e92:	fa5f fb8b 	uxtb.w	fp, fp
 8007e96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e9a:	d820      	bhi.n	8007ede <_printf_float+0x18a>
 8007e9c:	3901      	subs	r1, #1
 8007e9e:	465a      	mov	r2, fp
 8007ea0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ea4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ea6:	f7ff ff17 	bl	8007cd8 <__exponent>
 8007eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eac:	1813      	adds	r3, r2, r0
 8007eae:	2a01      	cmp	r2, #1
 8007eb0:	4681      	mov	r9, r0
 8007eb2:	6123      	str	r3, [r4, #16]
 8007eb4:	dc02      	bgt.n	8007ebc <_printf_float+0x168>
 8007eb6:	6822      	ldr	r2, [r4, #0]
 8007eb8:	07d2      	lsls	r2, r2, #31
 8007eba:	d501      	bpl.n	8007ec0 <_printf_float+0x16c>
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	6123      	str	r3, [r4, #16]
 8007ec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d09c      	beq.n	8007e02 <_printf_float+0xae>
 8007ec8:	232d      	movs	r3, #45	; 0x2d
 8007eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ece:	e798      	b.n	8007e02 <_printf_float+0xae>
 8007ed0:	9a06      	ldr	r2, [sp, #24]
 8007ed2:	2a47      	cmp	r2, #71	; 0x47
 8007ed4:	d1be      	bne.n	8007e54 <_printf_float+0x100>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1bc      	bne.n	8007e54 <_printf_float+0x100>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7b9      	b.n	8007e52 <_printf_float+0xfe>
 8007ede:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ee2:	d118      	bne.n	8007f16 <_printf_float+0x1c2>
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	6863      	ldr	r3, [r4, #4]
 8007ee8:	dd0b      	ble.n	8007f02 <_printf_float+0x1ae>
 8007eea:	6121      	str	r1, [r4, #16]
 8007eec:	b913      	cbnz	r3, 8007ef4 <_printf_float+0x1a0>
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	07d0      	lsls	r0, r2, #31
 8007ef2:	d502      	bpl.n	8007efa <_printf_float+0x1a6>
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	440b      	add	r3, r1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	65a1      	str	r1, [r4, #88]	; 0x58
 8007efc:	f04f 0900 	mov.w	r9, #0
 8007f00:	e7de      	b.n	8007ec0 <_printf_float+0x16c>
 8007f02:	b913      	cbnz	r3, 8007f0a <_printf_float+0x1b6>
 8007f04:	6822      	ldr	r2, [r4, #0]
 8007f06:	07d2      	lsls	r2, r2, #31
 8007f08:	d501      	bpl.n	8007f0e <_printf_float+0x1ba>
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	e7f4      	b.n	8007ef8 <_printf_float+0x1a4>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e7f2      	b.n	8007ef8 <_printf_float+0x1a4>
 8007f12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	db05      	blt.n	8007f28 <_printf_float+0x1d4>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	6121      	str	r1, [r4, #16]
 8007f20:	07d8      	lsls	r0, r3, #31
 8007f22:	d5ea      	bpl.n	8007efa <_printf_float+0x1a6>
 8007f24:	1c4b      	adds	r3, r1, #1
 8007f26:	e7e7      	b.n	8007ef8 <_printf_float+0x1a4>
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	bfd4      	ite	le
 8007f2c:	f1c1 0202 	rsble	r2, r1, #2
 8007f30:	2201      	movgt	r2, #1
 8007f32:	4413      	add	r3, r2
 8007f34:	e7e0      	b.n	8007ef8 <_printf_float+0x1a4>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	055a      	lsls	r2, r3, #21
 8007f3a:	d407      	bmi.n	8007f4c <_printf_float+0x1f8>
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	4642      	mov	r2, r8
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	d12c      	bne.n	8007fa4 <_printf_float+0x250>
 8007f4a:	e764      	b.n	8007e16 <_printf_float+0xc2>
 8007f4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f50:	f240 80e0 	bls.w	8008114 <_printf_float+0x3c0>
 8007f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f7f8 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d034      	beq.n	8007fce <_printf_float+0x27a>
 8007f64:	4a37      	ldr	r2, [pc, #220]	; (8008044 <_printf_float+0x2f0>)
 8007f66:	2301      	movs	r3, #1
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af51 	beq.w	8007e16 <_printf_float+0xc2>
 8007f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	db02      	blt.n	8007f82 <_printf_float+0x22e>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	07d8      	lsls	r0, r3, #31
 8007f80:	d510      	bpl.n	8007fa4 <_printf_float+0x250>
 8007f82:	ee18 3a10 	vmov	r3, s16
 8007f86:	4652      	mov	r2, sl
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af41 	beq.w	8007e16 <_printf_float+0xc2>
 8007f94:	f04f 0800 	mov.w	r8, #0
 8007f98:	f104 091a 	add.w	r9, r4, #26
 8007f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	4543      	cmp	r3, r8
 8007fa2:	dc09      	bgt.n	8007fb8 <_printf_float+0x264>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	079b      	lsls	r3, r3, #30
 8007fa8:	f100 8105 	bmi.w	80081b6 <_printf_float+0x462>
 8007fac:	68e0      	ldr	r0, [r4, #12]
 8007fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb0:	4298      	cmp	r0, r3
 8007fb2:	bfb8      	it	lt
 8007fb4:	4618      	movlt	r0, r3
 8007fb6:	e730      	b.n	8007e1a <_printf_float+0xc6>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	464a      	mov	r2, r9
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f af27 	beq.w	8007e16 <_printf_float+0xc2>
 8007fc8:	f108 0801 	add.w	r8, r8, #1
 8007fcc:	e7e6      	b.n	8007f9c <_printf_float+0x248>
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc39      	bgt.n	8008048 <_printf_float+0x2f4>
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	; (8008044 <_printf_float+0x2f0>)
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af19 	beq.w	8007e16 <_printf_float+0xc2>
 8007fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	d102      	bne.n	8007ff2 <_printf_float+0x29e>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d5d8      	bpl.n	8007fa4 <_printf_float+0x250>
 8007ff2:	ee18 3a10 	vmov	r3, s16
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f af09 	beq.w	8007e16 <_printf_float+0xc2>
 8008004:	f04f 0900 	mov.w	r9, #0
 8008008:	f104 0a1a 	add.w	sl, r4, #26
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	425b      	negs	r3, r3
 8008010:	454b      	cmp	r3, r9
 8008012:	dc01      	bgt.n	8008018 <_printf_float+0x2c4>
 8008014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008016:	e792      	b.n	8007f3e <_printf_float+0x1ea>
 8008018:	2301      	movs	r3, #1
 800801a:	4652      	mov	r2, sl
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f aef7 	beq.w	8007e16 <_printf_float+0xc2>
 8008028:	f109 0901 	add.w	r9, r9, #1
 800802c:	e7ee      	b.n	800800c <_printf_float+0x2b8>
 800802e:	bf00      	nop
 8008030:	7fefffff 	.word	0x7fefffff
 8008034:	0800c394 	.word	0x0800c394
 8008038:	0800c398 	.word	0x0800c398
 800803c:	0800c3a0 	.word	0x0800c3a0
 8008040:	0800c39c 	.word	0x0800c39c
 8008044:	0800c3a4 	.word	0x0800c3a4
 8008048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800804c:	429a      	cmp	r2, r3
 800804e:	bfa8      	it	ge
 8008050:	461a      	movge	r2, r3
 8008052:	2a00      	cmp	r2, #0
 8008054:	4691      	mov	r9, r2
 8008056:	dc37      	bgt.n	80080c8 <_printf_float+0x374>
 8008058:	f04f 0b00 	mov.w	fp, #0
 800805c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008060:	f104 021a 	add.w	r2, r4, #26
 8008064:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008066:	9305      	str	r3, [sp, #20]
 8008068:	eba3 0309 	sub.w	r3, r3, r9
 800806c:	455b      	cmp	r3, fp
 800806e:	dc33      	bgt.n	80080d8 <_printf_float+0x384>
 8008070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008074:	429a      	cmp	r2, r3
 8008076:	db3b      	blt.n	80080f0 <_printf_float+0x39c>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	07da      	lsls	r2, r3, #31
 800807c:	d438      	bmi.n	80080f0 <_printf_float+0x39c>
 800807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008080:	9a05      	ldr	r2, [sp, #20]
 8008082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008084:	1a9a      	subs	r2, r3, r2
 8008086:	eba3 0901 	sub.w	r9, r3, r1
 800808a:	4591      	cmp	r9, r2
 800808c:	bfa8      	it	ge
 800808e:	4691      	movge	r9, r2
 8008090:	f1b9 0f00 	cmp.w	r9, #0
 8008094:	dc35      	bgt.n	8008102 <_printf_float+0x3ae>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800809e:	f104 0a1a 	add.w	sl, r4, #26
 80080a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a6:	1a9b      	subs	r3, r3, r2
 80080a8:	eba3 0309 	sub.w	r3, r3, r9
 80080ac:	4543      	cmp	r3, r8
 80080ae:	f77f af79 	ble.w	8007fa4 <_printf_float+0x250>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4652      	mov	r2, sl
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	f43f aeaa 	beq.w	8007e16 <_printf_float+0xc2>
 80080c2:	f108 0801 	add.w	r8, r8, #1
 80080c6:	e7ec      	b.n	80080a2 <_printf_float+0x34e>
 80080c8:	4613      	mov	r3, r2
 80080ca:	4631      	mov	r1, r6
 80080cc:	4642      	mov	r2, r8
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	d1c0      	bne.n	8008058 <_printf_float+0x304>
 80080d6:	e69e      	b.n	8007e16 <_printf_float+0xc2>
 80080d8:	2301      	movs	r3, #1
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	9205      	str	r2, [sp, #20]
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f ae97 	beq.w	8007e16 <_printf_float+0xc2>
 80080e8:	9a05      	ldr	r2, [sp, #20]
 80080ea:	f10b 0b01 	add.w	fp, fp, #1
 80080ee:	e7b9      	b.n	8008064 <_printf_float+0x310>
 80080f0:	ee18 3a10 	vmov	r3, s16
 80080f4:	4652      	mov	r2, sl
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	d1be      	bne.n	800807e <_printf_float+0x32a>
 8008100:	e689      	b.n	8007e16 <_printf_float+0xc2>
 8008102:	9a05      	ldr	r2, [sp, #20]
 8008104:	464b      	mov	r3, r9
 8008106:	4442      	add	r2, r8
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	d1c1      	bne.n	8008096 <_printf_float+0x342>
 8008112:	e680      	b.n	8007e16 <_printf_float+0xc2>
 8008114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008116:	2a01      	cmp	r2, #1
 8008118:	dc01      	bgt.n	800811e <_printf_float+0x3ca>
 800811a:	07db      	lsls	r3, r3, #31
 800811c:	d538      	bpl.n	8008190 <_printf_float+0x43c>
 800811e:	2301      	movs	r3, #1
 8008120:	4642      	mov	r2, r8
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae74 	beq.w	8007e16 <_printf_float+0xc2>
 800812e:	ee18 3a10 	vmov	r3, s16
 8008132:	4652      	mov	r2, sl
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f ae6b 	beq.w	8007e16 <_printf_float+0xc2>
 8008140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	f7f8 fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800814c:	b9d8      	cbnz	r0, 8008186 <_printf_float+0x432>
 800814e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008150:	f108 0201 	add.w	r2, r8, #1
 8008154:	3b01      	subs	r3, #1
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	d10e      	bne.n	800817e <_printf_float+0x42a>
 8008160:	e659      	b.n	8007e16 <_printf_float+0xc2>
 8008162:	2301      	movs	r3, #1
 8008164:	4652      	mov	r2, sl
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f ae52 	beq.w	8007e16 <_printf_float+0xc2>
 8008172:	f108 0801 	add.w	r8, r8, #1
 8008176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008178:	3b01      	subs	r3, #1
 800817a:	4543      	cmp	r3, r8
 800817c:	dcf1      	bgt.n	8008162 <_printf_float+0x40e>
 800817e:	464b      	mov	r3, r9
 8008180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008184:	e6dc      	b.n	8007f40 <_printf_float+0x1ec>
 8008186:	f04f 0800 	mov.w	r8, #0
 800818a:	f104 0a1a 	add.w	sl, r4, #26
 800818e:	e7f2      	b.n	8008176 <_printf_float+0x422>
 8008190:	2301      	movs	r3, #1
 8008192:	4642      	mov	r2, r8
 8008194:	e7df      	b.n	8008156 <_printf_float+0x402>
 8008196:	2301      	movs	r3, #1
 8008198:	464a      	mov	r2, r9
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f ae38 	beq.w	8007e16 <_printf_float+0xc2>
 80081a6:	f108 0801 	add.w	r8, r8, #1
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081ae:	1a5b      	subs	r3, r3, r1
 80081b0:	4543      	cmp	r3, r8
 80081b2:	dcf0      	bgt.n	8008196 <_printf_float+0x442>
 80081b4:	e6fa      	b.n	8007fac <_printf_float+0x258>
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	f104 0919 	add.w	r9, r4, #25
 80081be:	e7f4      	b.n	80081aa <_printf_float+0x456>

080081c0 <_printf_common>:
 80081c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	4616      	mov	r6, r2
 80081c6:	4699      	mov	r9, r3
 80081c8:	688a      	ldr	r2, [r1, #8]
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	bfb8      	it	lt
 80081d4:	4613      	movlt	r3, r2
 80081d6:	6033      	str	r3, [r6, #0]
 80081d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081dc:	4607      	mov	r7, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	b10a      	cbz	r2, 80081e6 <_printf_common+0x26>
 80081e2:	3301      	adds	r3, #1
 80081e4:	6033      	str	r3, [r6, #0]
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	0699      	lsls	r1, r3, #26
 80081ea:	bf42      	ittt	mi
 80081ec:	6833      	ldrmi	r3, [r6, #0]
 80081ee:	3302      	addmi	r3, #2
 80081f0:	6033      	strmi	r3, [r6, #0]
 80081f2:	6825      	ldr	r5, [r4, #0]
 80081f4:	f015 0506 	ands.w	r5, r5, #6
 80081f8:	d106      	bne.n	8008208 <_printf_common+0x48>
 80081fa:	f104 0a19 	add.w	sl, r4, #25
 80081fe:	68e3      	ldr	r3, [r4, #12]
 8008200:	6832      	ldr	r2, [r6, #0]
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	42ab      	cmp	r3, r5
 8008206:	dc26      	bgt.n	8008256 <_printf_common+0x96>
 8008208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800820c:	1e13      	subs	r3, r2, #0
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	bf18      	it	ne
 8008212:	2301      	movne	r3, #1
 8008214:	0692      	lsls	r2, r2, #26
 8008216:	d42b      	bmi.n	8008270 <_printf_common+0xb0>
 8008218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	3001      	adds	r0, #1
 8008224:	d01e      	beq.n	8008264 <_printf_common+0xa4>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	68e5      	ldr	r5, [r4, #12]
 800822a:	6832      	ldr	r2, [r6, #0]
 800822c:	f003 0306 	and.w	r3, r3, #6
 8008230:	2b04      	cmp	r3, #4
 8008232:	bf08      	it	eq
 8008234:	1aad      	subeq	r5, r5, r2
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	bf0c      	ite	eq
 800823c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008240:	2500      	movne	r5, #0
 8008242:	4293      	cmp	r3, r2
 8008244:	bfc4      	itt	gt
 8008246:	1a9b      	subgt	r3, r3, r2
 8008248:	18ed      	addgt	r5, r5, r3
 800824a:	2600      	movs	r6, #0
 800824c:	341a      	adds	r4, #26
 800824e:	42b5      	cmp	r5, r6
 8008250:	d11a      	bne.n	8008288 <_printf_common+0xc8>
 8008252:	2000      	movs	r0, #0
 8008254:	e008      	b.n	8008268 <_printf_common+0xa8>
 8008256:	2301      	movs	r3, #1
 8008258:	4652      	mov	r2, sl
 800825a:	4649      	mov	r1, r9
 800825c:	4638      	mov	r0, r7
 800825e:	47c0      	blx	r8
 8008260:	3001      	adds	r0, #1
 8008262:	d103      	bne.n	800826c <_printf_common+0xac>
 8008264:	f04f 30ff 	mov.w	r0, #4294967295
 8008268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826c:	3501      	adds	r5, #1
 800826e:	e7c6      	b.n	80081fe <_printf_common+0x3e>
 8008270:	18e1      	adds	r1, r4, r3
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	2030      	movs	r0, #48	; 0x30
 8008276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800827a:	4422      	add	r2, r4
 800827c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008284:	3302      	adds	r3, #2
 8008286:	e7c7      	b.n	8008218 <_printf_common+0x58>
 8008288:	2301      	movs	r3, #1
 800828a:	4622      	mov	r2, r4
 800828c:	4649      	mov	r1, r9
 800828e:	4638      	mov	r0, r7
 8008290:	47c0      	blx	r8
 8008292:	3001      	adds	r0, #1
 8008294:	d0e6      	beq.n	8008264 <_printf_common+0xa4>
 8008296:	3601      	adds	r6, #1
 8008298:	e7d9      	b.n	800824e <_printf_common+0x8e>
	...

0800829c <_printf_i>:
 800829c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a0:	7e0f      	ldrb	r7, [r1, #24]
 80082a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082a4:	2f78      	cmp	r7, #120	; 0x78
 80082a6:	4691      	mov	r9, r2
 80082a8:	4680      	mov	r8, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	469a      	mov	sl, r3
 80082ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082b2:	d807      	bhi.n	80082c4 <_printf_i+0x28>
 80082b4:	2f62      	cmp	r7, #98	; 0x62
 80082b6:	d80a      	bhi.n	80082ce <_printf_i+0x32>
 80082b8:	2f00      	cmp	r7, #0
 80082ba:	f000 80d8 	beq.w	800846e <_printf_i+0x1d2>
 80082be:	2f58      	cmp	r7, #88	; 0x58
 80082c0:	f000 80a3 	beq.w	800840a <_printf_i+0x16e>
 80082c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082cc:	e03a      	b.n	8008344 <_printf_i+0xa8>
 80082ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082d2:	2b15      	cmp	r3, #21
 80082d4:	d8f6      	bhi.n	80082c4 <_printf_i+0x28>
 80082d6:	a101      	add	r1, pc, #4	; (adr r1, 80082dc <_printf_i+0x40>)
 80082d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082dc:	08008335 	.word	0x08008335
 80082e0:	08008349 	.word	0x08008349
 80082e4:	080082c5 	.word	0x080082c5
 80082e8:	080082c5 	.word	0x080082c5
 80082ec:	080082c5 	.word	0x080082c5
 80082f0:	080082c5 	.word	0x080082c5
 80082f4:	08008349 	.word	0x08008349
 80082f8:	080082c5 	.word	0x080082c5
 80082fc:	080082c5 	.word	0x080082c5
 8008300:	080082c5 	.word	0x080082c5
 8008304:	080082c5 	.word	0x080082c5
 8008308:	08008455 	.word	0x08008455
 800830c:	08008379 	.word	0x08008379
 8008310:	08008437 	.word	0x08008437
 8008314:	080082c5 	.word	0x080082c5
 8008318:	080082c5 	.word	0x080082c5
 800831c:	08008477 	.word	0x08008477
 8008320:	080082c5 	.word	0x080082c5
 8008324:	08008379 	.word	0x08008379
 8008328:	080082c5 	.word	0x080082c5
 800832c:	080082c5 	.word	0x080082c5
 8008330:	0800843f 	.word	0x0800843f
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	1d1a      	adds	r2, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	602a      	str	r2, [r5, #0]
 800833c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008344:	2301      	movs	r3, #1
 8008346:	e0a3      	b.n	8008490 <_printf_i+0x1f4>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	6829      	ldr	r1, [r5, #0]
 800834c:	0606      	lsls	r6, r0, #24
 800834e:	f101 0304 	add.w	r3, r1, #4
 8008352:	d50a      	bpl.n	800836a <_printf_i+0xce>
 8008354:	680e      	ldr	r6, [r1, #0]
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	2e00      	cmp	r6, #0
 800835a:	da03      	bge.n	8008364 <_printf_i+0xc8>
 800835c:	232d      	movs	r3, #45	; 0x2d
 800835e:	4276      	negs	r6, r6
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008364:	485e      	ldr	r0, [pc, #376]	; (80084e0 <_printf_i+0x244>)
 8008366:	230a      	movs	r3, #10
 8008368:	e019      	b.n	800839e <_printf_i+0x102>
 800836a:	680e      	ldr	r6, [r1, #0]
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008372:	bf18      	it	ne
 8008374:	b236      	sxthne	r6, r6
 8008376:	e7ef      	b.n	8008358 <_printf_i+0xbc>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	6820      	ldr	r0, [r4, #0]
 800837c:	1d19      	adds	r1, r3, #4
 800837e:	6029      	str	r1, [r5, #0]
 8008380:	0601      	lsls	r1, r0, #24
 8008382:	d501      	bpl.n	8008388 <_printf_i+0xec>
 8008384:	681e      	ldr	r6, [r3, #0]
 8008386:	e002      	b.n	800838e <_printf_i+0xf2>
 8008388:	0646      	lsls	r6, r0, #25
 800838a:	d5fb      	bpl.n	8008384 <_printf_i+0xe8>
 800838c:	881e      	ldrh	r6, [r3, #0]
 800838e:	4854      	ldr	r0, [pc, #336]	; (80084e0 <_printf_i+0x244>)
 8008390:	2f6f      	cmp	r7, #111	; 0x6f
 8008392:	bf0c      	ite	eq
 8008394:	2308      	moveq	r3, #8
 8008396:	230a      	movne	r3, #10
 8008398:	2100      	movs	r1, #0
 800839a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800839e:	6865      	ldr	r5, [r4, #4]
 80083a0:	60a5      	str	r5, [r4, #8]
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	bfa2      	ittt	ge
 80083a6:	6821      	ldrge	r1, [r4, #0]
 80083a8:	f021 0104 	bicge.w	r1, r1, #4
 80083ac:	6021      	strge	r1, [r4, #0]
 80083ae:	b90e      	cbnz	r6, 80083b4 <_printf_i+0x118>
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	d04d      	beq.n	8008450 <_printf_i+0x1b4>
 80083b4:	4615      	mov	r5, r2
 80083b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80083ba:	fb03 6711 	mls	r7, r3, r1, r6
 80083be:	5dc7      	ldrb	r7, [r0, r7]
 80083c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083c4:	4637      	mov	r7, r6
 80083c6:	42bb      	cmp	r3, r7
 80083c8:	460e      	mov	r6, r1
 80083ca:	d9f4      	bls.n	80083b6 <_printf_i+0x11a>
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d10b      	bne.n	80083e8 <_printf_i+0x14c>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	07de      	lsls	r6, r3, #31
 80083d4:	d508      	bpl.n	80083e8 <_printf_i+0x14c>
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	4299      	cmp	r1, r3
 80083dc:	bfde      	ittt	le
 80083de:	2330      	movle	r3, #48	; 0x30
 80083e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083e8:	1b52      	subs	r2, r2, r5
 80083ea:	6122      	str	r2, [r4, #16]
 80083ec:	f8cd a000 	str.w	sl, [sp]
 80083f0:	464b      	mov	r3, r9
 80083f2:	aa03      	add	r2, sp, #12
 80083f4:	4621      	mov	r1, r4
 80083f6:	4640      	mov	r0, r8
 80083f8:	f7ff fee2 	bl	80081c0 <_printf_common>
 80083fc:	3001      	adds	r0, #1
 80083fe:	d14c      	bne.n	800849a <_printf_i+0x1fe>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	b004      	add	sp, #16
 8008406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840a:	4835      	ldr	r0, [pc, #212]	; (80084e0 <_printf_i+0x244>)
 800840c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008410:	6829      	ldr	r1, [r5, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f851 6b04 	ldr.w	r6, [r1], #4
 8008418:	6029      	str	r1, [r5, #0]
 800841a:	061d      	lsls	r5, r3, #24
 800841c:	d514      	bpl.n	8008448 <_printf_i+0x1ac>
 800841e:	07df      	lsls	r7, r3, #31
 8008420:	bf44      	itt	mi
 8008422:	f043 0320 	orrmi.w	r3, r3, #32
 8008426:	6023      	strmi	r3, [r4, #0]
 8008428:	b91e      	cbnz	r6, 8008432 <_printf_i+0x196>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	f023 0320 	bic.w	r3, r3, #32
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	2310      	movs	r3, #16
 8008434:	e7b0      	b.n	8008398 <_printf_i+0xfc>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	f043 0320 	orr.w	r3, r3, #32
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	2378      	movs	r3, #120	; 0x78
 8008440:	4828      	ldr	r0, [pc, #160]	; (80084e4 <_printf_i+0x248>)
 8008442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008446:	e7e3      	b.n	8008410 <_printf_i+0x174>
 8008448:	0659      	lsls	r1, r3, #25
 800844a:	bf48      	it	mi
 800844c:	b2b6      	uxthmi	r6, r6
 800844e:	e7e6      	b.n	800841e <_printf_i+0x182>
 8008450:	4615      	mov	r5, r2
 8008452:	e7bb      	b.n	80083cc <_printf_i+0x130>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	6826      	ldr	r6, [r4, #0]
 8008458:	6961      	ldr	r1, [r4, #20]
 800845a:	1d18      	adds	r0, r3, #4
 800845c:	6028      	str	r0, [r5, #0]
 800845e:	0635      	lsls	r5, r6, #24
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	d501      	bpl.n	8008468 <_printf_i+0x1cc>
 8008464:	6019      	str	r1, [r3, #0]
 8008466:	e002      	b.n	800846e <_printf_i+0x1d2>
 8008468:	0670      	lsls	r0, r6, #25
 800846a:	d5fb      	bpl.n	8008464 <_printf_i+0x1c8>
 800846c:	8019      	strh	r1, [r3, #0]
 800846e:	2300      	movs	r3, #0
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	4615      	mov	r5, r2
 8008474:	e7ba      	b.n	80083ec <_printf_i+0x150>
 8008476:	682b      	ldr	r3, [r5, #0]
 8008478:	1d1a      	adds	r2, r3, #4
 800847a:	602a      	str	r2, [r5, #0]
 800847c:	681d      	ldr	r5, [r3, #0]
 800847e:	6862      	ldr	r2, [r4, #4]
 8008480:	2100      	movs	r1, #0
 8008482:	4628      	mov	r0, r5
 8008484:	f7f7 feb4 	bl	80001f0 <memchr>
 8008488:	b108      	cbz	r0, 800848e <_printf_i+0x1f2>
 800848a:	1b40      	subs	r0, r0, r5
 800848c:	6060      	str	r0, [r4, #4]
 800848e:	6863      	ldr	r3, [r4, #4]
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	2300      	movs	r3, #0
 8008494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008498:	e7a8      	b.n	80083ec <_printf_i+0x150>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	462a      	mov	r2, r5
 800849e:	4649      	mov	r1, r9
 80084a0:	4640      	mov	r0, r8
 80084a2:	47d0      	blx	sl
 80084a4:	3001      	adds	r0, #1
 80084a6:	d0ab      	beq.n	8008400 <_printf_i+0x164>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	079b      	lsls	r3, r3, #30
 80084ac:	d413      	bmi.n	80084d6 <_printf_i+0x23a>
 80084ae:	68e0      	ldr	r0, [r4, #12]
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	4298      	cmp	r0, r3
 80084b4:	bfb8      	it	lt
 80084b6:	4618      	movlt	r0, r3
 80084b8:	e7a4      	b.n	8008404 <_printf_i+0x168>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4632      	mov	r2, r6
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	47d0      	blx	sl
 80084c4:	3001      	adds	r0, #1
 80084c6:	d09b      	beq.n	8008400 <_printf_i+0x164>
 80084c8:	3501      	adds	r5, #1
 80084ca:	68e3      	ldr	r3, [r4, #12]
 80084cc:	9903      	ldr	r1, [sp, #12]
 80084ce:	1a5b      	subs	r3, r3, r1
 80084d0:	42ab      	cmp	r3, r5
 80084d2:	dcf2      	bgt.n	80084ba <_printf_i+0x21e>
 80084d4:	e7eb      	b.n	80084ae <_printf_i+0x212>
 80084d6:	2500      	movs	r5, #0
 80084d8:	f104 0619 	add.w	r6, r4, #25
 80084dc:	e7f5      	b.n	80084ca <_printf_i+0x22e>
 80084de:	bf00      	nop
 80084e0:	0800c3a6 	.word	0x0800c3a6
 80084e4:	0800c3b7 	.word	0x0800c3b7

080084e8 <_scanf_float>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	b087      	sub	sp, #28
 80084ee:	4617      	mov	r7, r2
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	688b      	ldr	r3, [r1, #8]
 80084f4:	1e5a      	subs	r2, r3, #1
 80084f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084fa:	bf83      	ittte	hi
 80084fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008500:	195b      	addhi	r3, r3, r5
 8008502:	9302      	strhi	r3, [sp, #8]
 8008504:	2300      	movls	r3, #0
 8008506:	bf86      	itte	hi
 8008508:	f240 135d 	movwhi	r3, #349	; 0x15d
 800850c:	608b      	strhi	r3, [r1, #8]
 800850e:	9302      	strls	r3, [sp, #8]
 8008510:	680b      	ldr	r3, [r1, #0]
 8008512:	468b      	mov	fp, r1
 8008514:	2500      	movs	r5, #0
 8008516:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800851a:	f84b 3b1c 	str.w	r3, [fp], #28
 800851e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008522:	4680      	mov	r8, r0
 8008524:	460c      	mov	r4, r1
 8008526:	465e      	mov	r6, fp
 8008528:	46aa      	mov	sl, r5
 800852a:	46a9      	mov	r9, r5
 800852c:	9501      	str	r5, [sp, #4]
 800852e:	68a2      	ldr	r2, [r4, #8]
 8008530:	b152      	cbz	r2, 8008548 <_scanf_float+0x60>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b4e      	cmp	r3, #78	; 0x4e
 8008538:	d864      	bhi.n	8008604 <_scanf_float+0x11c>
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d83c      	bhi.n	80085b8 <_scanf_float+0xd0>
 800853e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008542:	b2c8      	uxtb	r0, r1
 8008544:	280e      	cmp	r0, #14
 8008546:	d93a      	bls.n	80085be <_scanf_float+0xd6>
 8008548:	f1b9 0f00 	cmp.w	r9, #0
 800854c:	d003      	beq.n	8008556 <_scanf_float+0x6e>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800855a:	f1ba 0f01 	cmp.w	sl, #1
 800855e:	f200 8113 	bhi.w	8008788 <_scanf_float+0x2a0>
 8008562:	455e      	cmp	r6, fp
 8008564:	f200 8105 	bhi.w	8008772 <_scanf_float+0x28a>
 8008568:	2501      	movs	r5, #1
 800856a:	4628      	mov	r0, r5
 800856c:	b007      	add	sp, #28
 800856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008572:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008576:	2a0d      	cmp	r2, #13
 8008578:	d8e6      	bhi.n	8008548 <_scanf_float+0x60>
 800857a:	a101      	add	r1, pc, #4	; (adr r1, 8008580 <_scanf_float+0x98>)
 800857c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008580:	080086bf 	.word	0x080086bf
 8008584:	08008549 	.word	0x08008549
 8008588:	08008549 	.word	0x08008549
 800858c:	08008549 	.word	0x08008549
 8008590:	0800871f 	.word	0x0800871f
 8008594:	080086f7 	.word	0x080086f7
 8008598:	08008549 	.word	0x08008549
 800859c:	08008549 	.word	0x08008549
 80085a0:	080086cd 	.word	0x080086cd
 80085a4:	08008549 	.word	0x08008549
 80085a8:	08008549 	.word	0x08008549
 80085ac:	08008549 	.word	0x08008549
 80085b0:	08008549 	.word	0x08008549
 80085b4:	08008685 	.word	0x08008685
 80085b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085bc:	e7db      	b.n	8008576 <_scanf_float+0x8e>
 80085be:	290e      	cmp	r1, #14
 80085c0:	d8c2      	bhi.n	8008548 <_scanf_float+0x60>
 80085c2:	a001      	add	r0, pc, #4	; (adr r0, 80085c8 <_scanf_float+0xe0>)
 80085c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085c8:	08008677 	.word	0x08008677
 80085cc:	08008549 	.word	0x08008549
 80085d0:	08008677 	.word	0x08008677
 80085d4:	0800870b 	.word	0x0800870b
 80085d8:	08008549 	.word	0x08008549
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008661 	.word	0x08008661
 80085e4:	08008661 	.word	0x08008661
 80085e8:	08008661 	.word	0x08008661
 80085ec:	08008661 	.word	0x08008661
 80085f0:	08008661 	.word	0x08008661
 80085f4:	08008661 	.word	0x08008661
 80085f8:	08008661 	.word	0x08008661
 80085fc:	08008661 	.word	0x08008661
 8008600:	08008661 	.word	0x08008661
 8008604:	2b6e      	cmp	r3, #110	; 0x6e
 8008606:	d809      	bhi.n	800861c <_scanf_float+0x134>
 8008608:	2b60      	cmp	r3, #96	; 0x60
 800860a:	d8b2      	bhi.n	8008572 <_scanf_float+0x8a>
 800860c:	2b54      	cmp	r3, #84	; 0x54
 800860e:	d077      	beq.n	8008700 <_scanf_float+0x218>
 8008610:	2b59      	cmp	r3, #89	; 0x59
 8008612:	d199      	bne.n	8008548 <_scanf_float+0x60>
 8008614:	2d07      	cmp	r5, #7
 8008616:	d197      	bne.n	8008548 <_scanf_float+0x60>
 8008618:	2508      	movs	r5, #8
 800861a:	e029      	b.n	8008670 <_scanf_float+0x188>
 800861c:	2b74      	cmp	r3, #116	; 0x74
 800861e:	d06f      	beq.n	8008700 <_scanf_float+0x218>
 8008620:	2b79      	cmp	r3, #121	; 0x79
 8008622:	e7f6      	b.n	8008612 <_scanf_float+0x12a>
 8008624:	6821      	ldr	r1, [r4, #0]
 8008626:	05c8      	lsls	r0, r1, #23
 8008628:	d51a      	bpl.n	8008660 <_scanf_float+0x178>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008630:	6021      	str	r1, [r4, #0]
 8008632:	f109 0901 	add.w	r9, r9, #1
 8008636:	b11b      	cbz	r3, 8008640 <_scanf_float+0x158>
 8008638:	3b01      	subs	r3, #1
 800863a:	3201      	adds	r2, #1
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	60a2      	str	r2, [r4, #8]
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	3b01      	subs	r3, #1
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	3301      	adds	r3, #1
 800864a:	6123      	str	r3, [r4, #16]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3b01      	subs	r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	607b      	str	r3, [r7, #4]
 8008654:	f340 8084 	ble.w	8008760 <_scanf_float+0x278>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	e766      	b.n	800852e <_scanf_float+0x46>
 8008660:	eb1a 0f05 	cmn.w	sl, r5
 8008664:	f47f af70 	bne.w	8008548 <_scanf_float+0x60>
 8008668:	6822      	ldr	r2, [r4, #0]
 800866a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800866e:	6022      	str	r2, [r4, #0]
 8008670:	f806 3b01 	strb.w	r3, [r6], #1
 8008674:	e7e4      	b.n	8008640 <_scanf_float+0x158>
 8008676:	6822      	ldr	r2, [r4, #0]
 8008678:	0610      	lsls	r0, r2, #24
 800867a:	f57f af65 	bpl.w	8008548 <_scanf_float+0x60>
 800867e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008682:	e7f4      	b.n	800866e <_scanf_float+0x186>
 8008684:	f1ba 0f00 	cmp.w	sl, #0
 8008688:	d10e      	bne.n	80086a8 <_scanf_float+0x1c0>
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d10e      	bne.n	80086ae <_scanf_float+0x1c6>
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008696:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800869a:	d108      	bne.n	80086ae <_scanf_float+0x1c6>
 800869c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086a0:	6022      	str	r2, [r4, #0]
 80086a2:	f04f 0a01 	mov.w	sl, #1
 80086a6:	e7e3      	b.n	8008670 <_scanf_float+0x188>
 80086a8:	f1ba 0f02 	cmp.w	sl, #2
 80086ac:	d055      	beq.n	800875a <_scanf_float+0x272>
 80086ae:	2d01      	cmp	r5, #1
 80086b0:	d002      	beq.n	80086b8 <_scanf_float+0x1d0>
 80086b2:	2d04      	cmp	r5, #4
 80086b4:	f47f af48 	bne.w	8008548 <_scanf_float+0x60>
 80086b8:	3501      	adds	r5, #1
 80086ba:	b2ed      	uxtb	r5, r5
 80086bc:	e7d8      	b.n	8008670 <_scanf_float+0x188>
 80086be:	f1ba 0f01 	cmp.w	sl, #1
 80086c2:	f47f af41 	bne.w	8008548 <_scanf_float+0x60>
 80086c6:	f04f 0a02 	mov.w	sl, #2
 80086ca:	e7d1      	b.n	8008670 <_scanf_float+0x188>
 80086cc:	b97d      	cbnz	r5, 80086ee <_scanf_float+0x206>
 80086ce:	f1b9 0f00 	cmp.w	r9, #0
 80086d2:	f47f af3c 	bne.w	800854e <_scanf_float+0x66>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086e0:	f47f af39 	bne.w	8008556 <_scanf_float+0x6e>
 80086e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086e8:	6022      	str	r2, [r4, #0]
 80086ea:	2501      	movs	r5, #1
 80086ec:	e7c0      	b.n	8008670 <_scanf_float+0x188>
 80086ee:	2d03      	cmp	r5, #3
 80086f0:	d0e2      	beq.n	80086b8 <_scanf_float+0x1d0>
 80086f2:	2d05      	cmp	r5, #5
 80086f4:	e7de      	b.n	80086b4 <_scanf_float+0x1cc>
 80086f6:	2d02      	cmp	r5, #2
 80086f8:	f47f af26 	bne.w	8008548 <_scanf_float+0x60>
 80086fc:	2503      	movs	r5, #3
 80086fe:	e7b7      	b.n	8008670 <_scanf_float+0x188>
 8008700:	2d06      	cmp	r5, #6
 8008702:	f47f af21 	bne.w	8008548 <_scanf_float+0x60>
 8008706:	2507      	movs	r5, #7
 8008708:	e7b2      	b.n	8008670 <_scanf_float+0x188>
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	0591      	lsls	r1, r2, #22
 800870e:	f57f af1b 	bpl.w	8008548 <_scanf_float+0x60>
 8008712:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	f8cd 9004 	str.w	r9, [sp, #4]
 800871c:	e7a8      	b.n	8008670 <_scanf_float+0x188>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008724:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008728:	d006      	beq.n	8008738 <_scanf_float+0x250>
 800872a:	0550      	lsls	r0, r2, #21
 800872c:	f57f af0c 	bpl.w	8008548 <_scanf_float+0x60>
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	f43f af0f 	beq.w	8008556 <_scanf_float+0x6e>
 8008738:	0591      	lsls	r1, r2, #22
 800873a:	bf58      	it	pl
 800873c:	9901      	ldrpl	r1, [sp, #4]
 800873e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008742:	bf58      	it	pl
 8008744:	eba9 0101 	subpl.w	r1, r9, r1
 8008748:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800874c:	bf58      	it	pl
 800874e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	f04f 0900 	mov.w	r9, #0
 8008758:	e78a      	b.n	8008670 <_scanf_float+0x188>
 800875a:	f04f 0a03 	mov.w	sl, #3
 800875e:	e787      	b.n	8008670 <_scanf_float+0x188>
 8008760:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008764:	4639      	mov	r1, r7
 8008766:	4640      	mov	r0, r8
 8008768:	4798      	blx	r3
 800876a:	2800      	cmp	r0, #0
 800876c:	f43f aedf 	beq.w	800852e <_scanf_float+0x46>
 8008770:	e6ea      	b.n	8008548 <_scanf_float+0x60>
 8008772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800877a:	463a      	mov	r2, r7
 800877c:	4640      	mov	r0, r8
 800877e:	4798      	blx	r3
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	3b01      	subs	r3, #1
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	e6ec      	b.n	8008562 <_scanf_float+0x7a>
 8008788:	1e6b      	subs	r3, r5, #1
 800878a:	2b06      	cmp	r3, #6
 800878c:	d825      	bhi.n	80087da <_scanf_float+0x2f2>
 800878e:	2d02      	cmp	r5, #2
 8008790:	d836      	bhi.n	8008800 <_scanf_float+0x318>
 8008792:	455e      	cmp	r6, fp
 8008794:	f67f aee8 	bls.w	8008568 <_scanf_float+0x80>
 8008798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800879c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087a0:	463a      	mov	r2, r7
 80087a2:	4640      	mov	r0, r8
 80087a4:	4798      	blx	r3
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	e7f1      	b.n	8008792 <_scanf_float+0x2aa>
 80087ae:	9802      	ldr	r0, [sp, #8]
 80087b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087b8:	9002      	str	r0, [sp, #8]
 80087ba:	463a      	mov	r2, r7
 80087bc:	4640      	mov	r0, r8
 80087be:	4798      	blx	r3
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ca:	fa5f fa8a 	uxtb.w	sl, sl
 80087ce:	f1ba 0f02 	cmp.w	sl, #2
 80087d2:	d1ec      	bne.n	80087ae <_scanf_float+0x2c6>
 80087d4:	3d03      	subs	r5, #3
 80087d6:	b2ed      	uxtb	r5, r5
 80087d8:	1b76      	subs	r6, r6, r5
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	05da      	lsls	r2, r3, #23
 80087de:	d52f      	bpl.n	8008840 <_scanf_float+0x358>
 80087e0:	055b      	lsls	r3, r3, #21
 80087e2:	d510      	bpl.n	8008806 <_scanf_float+0x31e>
 80087e4:	455e      	cmp	r6, fp
 80087e6:	f67f aebf 	bls.w	8008568 <_scanf_float+0x80>
 80087ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087f2:	463a      	mov	r2, r7
 80087f4:	4640      	mov	r0, r8
 80087f6:	4798      	blx	r3
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	e7f1      	b.n	80087e4 <_scanf_float+0x2fc>
 8008800:	46aa      	mov	sl, r5
 8008802:	9602      	str	r6, [sp, #8]
 8008804:	e7df      	b.n	80087c6 <_scanf_float+0x2de>
 8008806:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	2965      	cmp	r1, #101	; 0x65
 800880e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008812:	f106 35ff 	add.w	r5, r6, #4294967295
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	d00c      	beq.n	8008834 <_scanf_float+0x34c>
 800881a:	2945      	cmp	r1, #69	; 0x45
 800881c:	d00a      	beq.n	8008834 <_scanf_float+0x34c>
 800881e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008822:	463a      	mov	r2, r7
 8008824:	4640      	mov	r0, r8
 8008826:	4798      	blx	r3
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800882e:	3b01      	subs	r3, #1
 8008830:	1eb5      	subs	r5, r6, #2
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008838:	463a      	mov	r2, r7
 800883a:	4640      	mov	r0, r8
 800883c:	4798      	blx	r3
 800883e:	462e      	mov	r6, r5
 8008840:	6825      	ldr	r5, [r4, #0]
 8008842:	f015 0510 	ands.w	r5, r5, #16
 8008846:	d159      	bne.n	80088fc <_scanf_float+0x414>
 8008848:	7035      	strb	r5, [r6, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008854:	d11b      	bne.n	800888e <_scanf_float+0x3a6>
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	454b      	cmp	r3, r9
 800885a:	eba3 0209 	sub.w	r2, r3, r9
 800885e:	d123      	bne.n	80088a8 <_scanf_float+0x3c0>
 8008860:	2200      	movs	r2, #0
 8008862:	4659      	mov	r1, fp
 8008864:	4640      	mov	r0, r8
 8008866:	f000 fea9 	bl	80095bc <_strtod_r>
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	f012 0f02 	tst.w	r2, #2
 8008872:	ec57 6b10 	vmov	r6, r7, d0
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	d021      	beq.n	80088be <_scanf_float+0x3d6>
 800887a:	9903      	ldr	r1, [sp, #12]
 800887c:	1d1a      	adds	r2, r3, #4
 800887e:	600a      	str	r2, [r1, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	e9c3 6700 	strd	r6, r7, [r3]
 8008886:	68e3      	ldr	r3, [r4, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	60e3      	str	r3, [r4, #12]
 800888c:	e66d      	b.n	800856a <_scanf_float+0x82>
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0e5      	beq.n	8008860 <_scanf_float+0x378>
 8008894:	9905      	ldr	r1, [sp, #20]
 8008896:	230a      	movs	r3, #10
 8008898:	462a      	mov	r2, r5
 800889a:	3101      	adds	r1, #1
 800889c:	4640      	mov	r0, r8
 800889e:	f000 ff15 	bl	80096cc <_strtol_r>
 80088a2:	9b04      	ldr	r3, [sp, #16]
 80088a4:	9e05      	ldr	r6, [sp, #20]
 80088a6:	1ac2      	subs	r2, r0, r3
 80088a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088ac:	429e      	cmp	r6, r3
 80088ae:	bf28      	it	cs
 80088b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088b4:	4912      	ldr	r1, [pc, #72]	; (8008900 <_scanf_float+0x418>)
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f83c 	bl	8008934 <siprintf>
 80088bc:	e7d0      	b.n	8008860 <_scanf_float+0x378>
 80088be:	9903      	ldr	r1, [sp, #12]
 80088c0:	f012 0f04 	tst.w	r2, #4
 80088c4:	f103 0204 	add.w	r2, r3, #4
 80088c8:	600a      	str	r2, [r1, #0]
 80088ca:	d1d9      	bne.n	8008880 <_scanf_float+0x398>
 80088cc:	f8d3 8000 	ldr.w	r8, [r3]
 80088d0:	ee10 2a10 	vmov	r2, s0
 80088d4:	ee10 0a10 	vmov	r0, s0
 80088d8:	463b      	mov	r3, r7
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f8 f92e 	bl	8000b3c <__aeabi_dcmpun>
 80088e0:	b128      	cbz	r0, 80088ee <_scanf_float+0x406>
 80088e2:	4808      	ldr	r0, [pc, #32]	; (8008904 <_scanf_float+0x41c>)
 80088e4:	f000 f820 	bl	8008928 <nanf>
 80088e8:	ed88 0a00 	vstr	s0, [r8]
 80088ec:	e7cb      	b.n	8008886 <_scanf_float+0x39e>
 80088ee:	4630      	mov	r0, r6
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f8 f981 	bl	8000bf8 <__aeabi_d2f>
 80088f6:	f8c8 0000 	str.w	r0, [r8]
 80088fa:	e7c4      	b.n	8008886 <_scanf_float+0x39e>
 80088fc:	2500      	movs	r5, #0
 80088fe:	e634      	b.n	800856a <_scanf_float+0x82>
 8008900:	0800c3c8 	.word	0x0800c3c8
 8008904:	0800c7d0 	.word	0x0800c7d0

08008908 <_sbrk_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d06      	ldr	r5, [pc, #24]	; (8008924 <_sbrk_r+0x1c>)
 800890c:	2300      	movs	r3, #0
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	f7f8 fd46 	bl	80013a4 <_sbrk>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_sbrk_r+0x1a>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_sbrk_r+0x1a>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	20001708 	.word	0x20001708

08008928 <nanf>:
 8008928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008930 <nanf+0x8>
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	7fc00000 	.word	0x7fc00000

08008934 <siprintf>:
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b500      	push	{lr}
 8008938:	b09c      	sub	sp, #112	; 0x70
 800893a:	ab1d      	add	r3, sp, #116	; 0x74
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	9006      	str	r0, [sp, #24]
 8008940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008944:	4809      	ldr	r0, [pc, #36]	; (800896c <siprintf+0x38>)
 8008946:	9107      	str	r1, [sp, #28]
 8008948:	9104      	str	r1, [sp, #16]
 800894a:	4909      	ldr	r1, [pc, #36]	; (8008970 <siprintf+0x3c>)
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	a902      	add	r1, sp, #8
 8008958:	f002 fe06 	bl	800b568 <_svfiprintf_r>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	b01c      	add	sp, #112	; 0x70
 8008964:	f85d eb04 	ldr.w	lr, [sp], #4
 8008968:	b003      	add	sp, #12
 800896a:	4770      	bx	lr
 800896c:	200000fc 	.word	0x200000fc
 8008970:	ffff0208 	.word	0xffff0208

08008974 <sulp>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	ec45 4b10 	vmov	d0, r4, r5
 800897e:	4616      	mov	r6, r2
 8008980:	f002 fc32 	bl	800b1e8 <__ulp>
 8008984:	ec51 0b10 	vmov	r0, r1, d0
 8008988:	b17e      	cbz	r6, 80089aa <sulp+0x36>
 800898a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800898e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008992:	2b00      	cmp	r3, #0
 8008994:	dd09      	ble.n	80089aa <sulp+0x36>
 8008996:	051b      	lsls	r3, r3, #20
 8008998:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800899c:	2400      	movs	r4, #0
 800899e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	0000      	movs	r0, r0
	...

080089b0 <_strtod_l>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	ed2d 8b02 	vpush	{d8}
 80089b8:	b09d      	sub	sp, #116	; 0x74
 80089ba:	461f      	mov	r7, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	9318      	str	r3, [sp, #96]	; 0x60
 80089c0:	4ba2      	ldr	r3, [pc, #648]	; (8008c4c <_strtod_l+0x29c>)
 80089c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	4604      	mov	r4, r0
 80089ca:	4618      	mov	r0, r3
 80089cc:	4688      	mov	r8, r1
 80089ce:	f7f7 fc07 	bl	80001e0 <strlen>
 80089d2:	f04f 0a00 	mov.w	sl, #0
 80089d6:	4605      	mov	r5, r0
 80089d8:	f04f 0b00 	mov.w	fp, #0
 80089dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80089e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	2a2b      	cmp	r2, #43	; 0x2b
 80089e6:	d04e      	beq.n	8008a86 <_strtod_l+0xd6>
 80089e8:	d83b      	bhi.n	8008a62 <_strtod_l+0xb2>
 80089ea:	2a0d      	cmp	r2, #13
 80089ec:	d834      	bhi.n	8008a58 <_strtod_l+0xa8>
 80089ee:	2a08      	cmp	r2, #8
 80089f0:	d834      	bhi.n	8008a5c <_strtod_l+0xac>
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d03e      	beq.n	8008a74 <_strtod_l+0xc4>
 80089f6:	2300      	movs	r3, #0
 80089f8:	930a      	str	r3, [sp, #40]	; 0x28
 80089fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089fc:	7833      	ldrb	r3, [r6, #0]
 80089fe:	2b30      	cmp	r3, #48	; 0x30
 8008a00:	f040 80b0 	bne.w	8008b64 <_strtod_l+0x1b4>
 8008a04:	7873      	ldrb	r3, [r6, #1]
 8008a06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a0a:	2b58      	cmp	r3, #88	; 0x58
 8008a0c:	d168      	bne.n	8008ae0 <_strtod_l+0x130>
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	ab18      	add	r3, sp, #96	; 0x60
 8008a14:	9702      	str	r7, [sp, #8]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4a8d      	ldr	r2, [pc, #564]	; (8008c50 <_strtod_l+0x2a0>)
 8008a1a:	ab19      	add	r3, sp, #100	; 0x64
 8008a1c:	a917      	add	r1, sp, #92	; 0x5c
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f001 fd38 	bl	800a494 <__gethex>
 8008a24:	f010 0707 	ands.w	r7, r0, #7
 8008a28:	4605      	mov	r5, r0
 8008a2a:	d005      	beq.n	8008a38 <_strtod_l+0x88>
 8008a2c:	2f06      	cmp	r7, #6
 8008a2e:	d12c      	bne.n	8008a8a <_strtod_l+0xda>
 8008a30:	3601      	adds	r6, #1
 8008a32:	2300      	movs	r3, #0
 8008a34:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a36:	930a      	str	r3, [sp, #40]	; 0x28
 8008a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 8590 	bne.w	8009560 <_strtod_l+0xbb0>
 8008a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a42:	b1eb      	cbz	r3, 8008a80 <_strtod_l+0xd0>
 8008a44:	4652      	mov	r2, sl
 8008a46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a4a:	ec43 2b10 	vmov	d0, r2, r3
 8008a4e:	b01d      	add	sp, #116	; 0x74
 8008a50:	ecbd 8b02 	vpop	{d8}
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	2a20      	cmp	r2, #32
 8008a5a:	d1cc      	bne.n	80089f6 <_strtod_l+0x46>
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a60:	e7be      	b.n	80089e0 <_strtod_l+0x30>
 8008a62:	2a2d      	cmp	r2, #45	; 0x2d
 8008a64:	d1c7      	bne.n	80089f6 <_strtod_l+0x46>
 8008a66:	2201      	movs	r2, #1
 8008a68:	920a      	str	r2, [sp, #40]	; 0x28
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1c2      	bne.n	80089fa <_strtod_l+0x4a>
 8008a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f040 856e 	bne.w	800955c <_strtod_l+0xbac>
 8008a80:	4652      	mov	r2, sl
 8008a82:	465b      	mov	r3, fp
 8008a84:	e7e1      	b.n	8008a4a <_strtod_l+0x9a>
 8008a86:	2200      	movs	r2, #0
 8008a88:	e7ee      	b.n	8008a68 <_strtod_l+0xb8>
 8008a8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a8c:	b13a      	cbz	r2, 8008a9e <_strtod_l+0xee>
 8008a8e:	2135      	movs	r1, #53	; 0x35
 8008a90:	a81a      	add	r0, sp, #104	; 0x68
 8008a92:	f002 fcb4 	bl	800b3fe <__copybits>
 8008a96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f002 f873 	bl	800ab84 <_Bfree>
 8008a9e:	3f01      	subs	r7, #1
 8008aa0:	2f04      	cmp	r7, #4
 8008aa2:	d806      	bhi.n	8008ab2 <_strtod_l+0x102>
 8008aa4:	e8df f007 	tbb	[pc, r7]
 8008aa8:	1714030a 	.word	0x1714030a
 8008aac:	0a          	.byte	0x0a
 8008aad:	00          	.byte	0x00
 8008aae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008ab2:	0728      	lsls	r0, r5, #28
 8008ab4:	d5c0      	bpl.n	8008a38 <_strtod_l+0x88>
 8008ab6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008aba:	e7bd      	b.n	8008a38 <_strtod_l+0x88>
 8008abc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008ac0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ac6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008aca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ace:	e7f0      	b.n	8008ab2 <_strtod_l+0x102>
 8008ad0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c54 <_strtod_l+0x2a4>
 8008ad4:	e7ed      	b.n	8008ab2 <_strtod_l+0x102>
 8008ad6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ada:	f04f 3aff 	mov.w	sl, #4294967295
 8008ade:	e7e8      	b.n	8008ab2 <_strtod_l+0x102>
 8008ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	2b30      	cmp	r3, #48	; 0x30
 8008aea:	d0f9      	beq.n	8008ae0 <_strtod_l+0x130>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0a3      	beq.n	8008a38 <_strtod_l+0x88>
 8008af0:	2301      	movs	r3, #1
 8008af2:	f04f 0900 	mov.w	r9, #0
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008afa:	9308      	str	r3, [sp, #32]
 8008afc:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b00:	464f      	mov	r7, r9
 8008b02:	220a      	movs	r2, #10
 8008b04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b06:	7806      	ldrb	r6, [r0, #0]
 8008b08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b0c:	b2d9      	uxtb	r1, r3
 8008b0e:	2909      	cmp	r1, #9
 8008b10:	d92a      	bls.n	8008b68 <_strtod_l+0x1b8>
 8008b12:	9905      	ldr	r1, [sp, #20]
 8008b14:	462a      	mov	r2, r5
 8008b16:	f002 fe2f 	bl	800b778 <strncmp>
 8008b1a:	b398      	cbz	r0, 8008b84 <_strtod_l+0x1d4>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	4632      	mov	r2, r6
 8008b20:	463d      	mov	r5, r7
 8008b22:	9005      	str	r0, [sp, #20]
 8008b24:	4603      	mov	r3, r0
 8008b26:	2a65      	cmp	r2, #101	; 0x65
 8008b28:	d001      	beq.n	8008b2e <_strtod_l+0x17e>
 8008b2a:	2a45      	cmp	r2, #69	; 0x45
 8008b2c:	d118      	bne.n	8008b60 <_strtod_l+0x1b0>
 8008b2e:	b91d      	cbnz	r5, 8008b38 <_strtod_l+0x188>
 8008b30:	9a04      	ldr	r2, [sp, #16]
 8008b32:	4302      	orrs	r2, r0
 8008b34:	d09e      	beq.n	8008a74 <_strtod_l+0xc4>
 8008b36:	2500      	movs	r5, #0
 8008b38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b3c:	f108 0201 	add.w	r2, r8, #1
 8008b40:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b46:	2a2b      	cmp	r2, #43	; 0x2b
 8008b48:	d075      	beq.n	8008c36 <_strtod_l+0x286>
 8008b4a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b4c:	d07b      	beq.n	8008c46 <_strtod_l+0x296>
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b56:	2909      	cmp	r1, #9
 8008b58:	f240 8082 	bls.w	8008c60 <_strtod_l+0x2b0>
 8008b5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b60:	2600      	movs	r6, #0
 8008b62:	e09d      	b.n	8008ca0 <_strtod_l+0x2f0>
 8008b64:	2300      	movs	r3, #0
 8008b66:	e7c4      	b.n	8008af2 <_strtod_l+0x142>
 8008b68:	2f08      	cmp	r7, #8
 8008b6a:	bfd8      	it	le
 8008b6c:	9907      	ldrle	r1, [sp, #28]
 8008b6e:	f100 0001 	add.w	r0, r0, #1
 8008b72:	bfda      	itte	le
 8008b74:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b78:	9307      	strle	r3, [sp, #28]
 8008b7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b7e:	3701      	adds	r7, #1
 8008b80:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b82:	e7bf      	b.n	8008b04 <_strtod_l+0x154>
 8008b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b86:	195a      	adds	r2, r3, r5
 8008b88:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b8a:	5d5a      	ldrb	r2, [r3, r5]
 8008b8c:	2f00      	cmp	r7, #0
 8008b8e:	d037      	beq.n	8008c00 <_strtod_l+0x250>
 8008b90:	9005      	str	r0, [sp, #20]
 8008b92:	463d      	mov	r5, r7
 8008b94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b98:	2b09      	cmp	r3, #9
 8008b9a:	d912      	bls.n	8008bc2 <_strtod_l+0x212>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e7c2      	b.n	8008b26 <_strtod_l+0x176>
 8008ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ba6:	785a      	ldrb	r2, [r3, #1]
 8008ba8:	3001      	adds	r0, #1
 8008baa:	2a30      	cmp	r2, #48	; 0x30
 8008bac:	d0f8      	beq.n	8008ba0 <_strtod_l+0x1f0>
 8008bae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	f200 84d9 	bhi.w	800956a <_strtod_l+0xbba>
 8008bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bba:	9005      	str	r0, [sp, #20]
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	9308      	str	r3, [sp, #32]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	3a30      	subs	r2, #48	; 0x30
 8008bc4:	f100 0301 	add.w	r3, r0, #1
 8008bc8:	d014      	beq.n	8008bf4 <_strtod_l+0x244>
 8008bca:	9905      	ldr	r1, [sp, #20]
 8008bcc:	4419      	add	r1, r3
 8008bce:	9105      	str	r1, [sp, #20]
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	eb00 0e05 	add.w	lr, r0, r5
 8008bd6:	210a      	movs	r1, #10
 8008bd8:	4573      	cmp	r3, lr
 8008bda:	d113      	bne.n	8008c04 <_strtod_l+0x254>
 8008bdc:	182b      	adds	r3, r5, r0
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	f105 0501 	add.w	r5, r5, #1
 8008be4:	4405      	add	r5, r0
 8008be6:	dc1c      	bgt.n	8008c22 <_strtod_l+0x272>
 8008be8:	9907      	ldr	r1, [sp, #28]
 8008bea:	230a      	movs	r3, #10
 8008bec:	fb03 2301 	mla	r3, r3, r1, r2
 8008bf0:	9307      	str	r3, [sp, #28]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bf6:	1c51      	adds	r1, r2, #1
 8008bf8:	9117      	str	r1, [sp, #92]	; 0x5c
 8008bfa:	7852      	ldrb	r2, [r2, #1]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	e7c9      	b.n	8008b94 <_strtod_l+0x1e4>
 8008c00:	4638      	mov	r0, r7
 8008c02:	e7d2      	b.n	8008baa <_strtod_l+0x1fa>
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	dc04      	bgt.n	8008c12 <_strtod_l+0x262>
 8008c08:	9e07      	ldr	r6, [sp, #28]
 8008c0a:	434e      	muls	r6, r1
 8008c0c:	9607      	str	r6, [sp, #28]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	e7e2      	b.n	8008bd8 <_strtod_l+0x228>
 8008c12:	f103 0c01 	add.w	ip, r3, #1
 8008c16:	f1bc 0f10 	cmp.w	ip, #16
 8008c1a:	bfd8      	it	le
 8008c1c:	fb01 f909 	mulle.w	r9, r1, r9
 8008c20:	e7f5      	b.n	8008c0e <_strtod_l+0x25e>
 8008c22:	2d10      	cmp	r5, #16
 8008c24:	bfdc      	itt	le
 8008c26:	230a      	movle	r3, #10
 8008c28:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c2c:	e7e1      	b.n	8008bf2 <_strtod_l+0x242>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9305      	str	r3, [sp, #20]
 8008c32:	2301      	movs	r3, #1
 8008c34:	e77c      	b.n	8008b30 <_strtod_l+0x180>
 8008c36:	f04f 0c00 	mov.w	ip, #0
 8008c3a:	f108 0202 	add.w	r2, r8, #2
 8008c3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c44:	e785      	b.n	8008b52 <_strtod_l+0x1a2>
 8008c46:	f04f 0c01 	mov.w	ip, #1
 8008c4a:	e7f6      	b.n	8008c3a <_strtod_l+0x28a>
 8008c4c:	0800c618 	.word	0x0800c618
 8008c50:	0800c3d0 	.word	0x0800c3d0
 8008c54:	7ff00000 	.word	0x7ff00000
 8008c58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c5a:	1c51      	adds	r1, r2, #1
 8008c5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c5e:	7852      	ldrb	r2, [r2, #1]
 8008c60:	2a30      	cmp	r2, #48	; 0x30
 8008c62:	d0f9      	beq.n	8008c58 <_strtod_l+0x2a8>
 8008c64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c68:	2908      	cmp	r1, #8
 8008c6a:	f63f af79 	bhi.w	8008b60 <_strtod_l+0x1b0>
 8008c6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c74:	9206      	str	r2, [sp, #24]
 8008c76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c78:	1c51      	adds	r1, r2, #1
 8008c7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c7c:	7852      	ldrb	r2, [r2, #1]
 8008c7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c82:	2e09      	cmp	r6, #9
 8008c84:	d937      	bls.n	8008cf6 <_strtod_l+0x346>
 8008c86:	9e06      	ldr	r6, [sp, #24]
 8008c88:	1b89      	subs	r1, r1, r6
 8008c8a:	2908      	cmp	r1, #8
 8008c8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c90:	dc02      	bgt.n	8008c98 <_strtod_l+0x2e8>
 8008c92:	4576      	cmp	r6, lr
 8008c94:	bfa8      	it	ge
 8008c96:	4676      	movge	r6, lr
 8008c98:	f1bc 0f00 	cmp.w	ip, #0
 8008c9c:	d000      	beq.n	8008ca0 <_strtod_l+0x2f0>
 8008c9e:	4276      	negs	r6, r6
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	d14d      	bne.n	8008d40 <_strtod_l+0x390>
 8008ca4:	9904      	ldr	r1, [sp, #16]
 8008ca6:	4301      	orrs	r1, r0
 8008ca8:	f47f aec6 	bne.w	8008a38 <_strtod_l+0x88>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aee1 	bne.w	8008a74 <_strtod_l+0xc4>
 8008cb2:	2a69      	cmp	r2, #105	; 0x69
 8008cb4:	d027      	beq.n	8008d06 <_strtod_l+0x356>
 8008cb6:	dc24      	bgt.n	8008d02 <_strtod_l+0x352>
 8008cb8:	2a49      	cmp	r2, #73	; 0x49
 8008cba:	d024      	beq.n	8008d06 <_strtod_l+0x356>
 8008cbc:	2a4e      	cmp	r2, #78	; 0x4e
 8008cbe:	f47f aed9 	bne.w	8008a74 <_strtod_l+0xc4>
 8008cc2:	499f      	ldr	r1, [pc, #636]	; (8008f40 <_strtod_l+0x590>)
 8008cc4:	a817      	add	r0, sp, #92	; 0x5c
 8008cc6:	f001 fe3d 	bl	800a944 <__match>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f43f aed2 	beq.w	8008a74 <_strtod_l+0xc4>
 8008cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b28      	cmp	r3, #40	; 0x28
 8008cd6:	d12d      	bne.n	8008d34 <_strtod_l+0x384>
 8008cd8:	499a      	ldr	r1, [pc, #616]	; (8008f44 <_strtod_l+0x594>)
 8008cda:	aa1a      	add	r2, sp, #104	; 0x68
 8008cdc:	a817      	add	r0, sp, #92	; 0x5c
 8008cde:	f001 fe45 	bl	800a96c <__hexnan>
 8008ce2:	2805      	cmp	r0, #5
 8008ce4:	d126      	bne.n	8008d34 <_strtod_l+0x384>
 8008ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ce8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008cec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cf4:	e6a0      	b.n	8008a38 <_strtod_l+0x88>
 8008cf6:	210a      	movs	r1, #10
 8008cf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008cfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d00:	e7b9      	b.n	8008c76 <_strtod_l+0x2c6>
 8008d02:	2a6e      	cmp	r2, #110	; 0x6e
 8008d04:	e7db      	b.n	8008cbe <_strtod_l+0x30e>
 8008d06:	4990      	ldr	r1, [pc, #576]	; (8008f48 <_strtod_l+0x598>)
 8008d08:	a817      	add	r0, sp, #92	; 0x5c
 8008d0a:	f001 fe1b 	bl	800a944 <__match>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f43f aeb0 	beq.w	8008a74 <_strtod_l+0xc4>
 8008d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d16:	498d      	ldr	r1, [pc, #564]	; (8008f4c <_strtod_l+0x59c>)
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	a817      	add	r0, sp, #92	; 0x5c
 8008d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d1e:	f001 fe11 	bl	800a944 <__match>
 8008d22:	b910      	cbnz	r0, 8008d2a <_strtod_l+0x37a>
 8008d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d26:	3301      	adds	r3, #1
 8008d28:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f5c <_strtod_l+0x5ac>
 8008d2e:	f04f 0a00 	mov.w	sl, #0
 8008d32:	e681      	b.n	8008a38 <_strtod_l+0x88>
 8008d34:	4886      	ldr	r0, [pc, #536]	; (8008f50 <_strtod_l+0x5a0>)
 8008d36:	f002 fd17 	bl	800b768 <nan>
 8008d3a:	ec5b ab10 	vmov	sl, fp, d0
 8008d3e:	e67b      	b.n	8008a38 <_strtod_l+0x88>
 8008d40:	9b05      	ldr	r3, [sp, #20]
 8008d42:	9807      	ldr	r0, [sp, #28]
 8008d44:	1af3      	subs	r3, r6, r3
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	bf08      	it	eq
 8008d4a:	462f      	moveq	r7, r5
 8008d4c:	2d10      	cmp	r5, #16
 8008d4e:	9306      	str	r3, [sp, #24]
 8008d50:	46a8      	mov	r8, r5
 8008d52:	bfa8      	it	ge
 8008d54:	f04f 0810 	movge.w	r8, #16
 8008d58:	f7f7 fbdc 	bl	8000514 <__aeabi_ui2d>
 8008d5c:	2d09      	cmp	r5, #9
 8008d5e:	4682      	mov	sl, r0
 8008d60:	468b      	mov	fp, r1
 8008d62:	dd13      	ble.n	8008d8c <_strtod_l+0x3dc>
 8008d64:	4b7b      	ldr	r3, [pc, #492]	; (8008f54 <_strtod_l+0x5a4>)
 8008d66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d6e:	f7f7 fc4b 	bl	8000608 <__aeabi_dmul>
 8008d72:	4682      	mov	sl, r0
 8008d74:	4648      	mov	r0, r9
 8008d76:	468b      	mov	fp, r1
 8008d78:	f7f7 fbcc 	bl	8000514 <__aeabi_ui2d>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4650      	mov	r0, sl
 8008d82:	4659      	mov	r1, fp
 8008d84:	f7f7 fa8a 	bl	800029c <__adddf3>
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	2d0f      	cmp	r5, #15
 8008d8e:	dc38      	bgt.n	8008e02 <_strtod_l+0x452>
 8008d90:	9b06      	ldr	r3, [sp, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f43f ae50 	beq.w	8008a38 <_strtod_l+0x88>
 8008d98:	dd24      	ble.n	8008de4 <_strtod_l+0x434>
 8008d9a:	2b16      	cmp	r3, #22
 8008d9c:	dc0b      	bgt.n	8008db6 <_strtod_l+0x406>
 8008d9e:	496d      	ldr	r1, [pc, #436]	; (8008f54 <_strtod_l+0x5a4>)
 8008da0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da8:	4652      	mov	r2, sl
 8008daa:	465b      	mov	r3, fp
 8008dac:	f7f7 fc2c 	bl	8000608 <__aeabi_dmul>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	e640      	b.n	8008a38 <_strtod_l+0x88>
 8008db6:	9a06      	ldr	r2, [sp, #24]
 8008db8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	db20      	blt.n	8008e02 <_strtod_l+0x452>
 8008dc0:	4c64      	ldr	r4, [pc, #400]	; (8008f54 <_strtod_l+0x5a4>)
 8008dc2:	f1c5 050f 	rsb	r5, r5, #15
 8008dc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dca:	4652      	mov	r2, sl
 8008dcc:	465b      	mov	r3, fp
 8008dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd2:	f7f7 fc19 	bl	8000608 <__aeabi_dmul>
 8008dd6:	9b06      	ldr	r3, [sp, #24]
 8008dd8:	1b5d      	subs	r5, r3, r5
 8008dda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008de2:	e7e3      	b.n	8008dac <_strtod_l+0x3fc>
 8008de4:	9b06      	ldr	r3, [sp, #24]
 8008de6:	3316      	adds	r3, #22
 8008de8:	db0b      	blt.n	8008e02 <_strtod_l+0x452>
 8008dea:	9b05      	ldr	r3, [sp, #20]
 8008dec:	1b9e      	subs	r6, r3, r6
 8008dee:	4b59      	ldr	r3, [pc, #356]	; (8008f54 <_strtod_l+0x5a4>)
 8008df0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008df4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 fd2e 	bl	800085c <__aeabi_ddiv>
 8008e00:	e7d6      	b.n	8008db0 <_strtod_l+0x400>
 8008e02:	9b06      	ldr	r3, [sp, #24]
 8008e04:	eba5 0808 	sub.w	r8, r5, r8
 8008e08:	4498      	add	r8, r3
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	dd74      	ble.n	8008efa <_strtod_l+0x54a>
 8008e10:	f018 030f 	ands.w	r3, r8, #15
 8008e14:	d00a      	beq.n	8008e2c <_strtod_l+0x47c>
 8008e16:	494f      	ldr	r1, [pc, #316]	; (8008f54 <_strtod_l+0x5a4>)
 8008e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e24:	f7f7 fbf0 	bl	8000608 <__aeabi_dmul>
 8008e28:	4682      	mov	sl, r0
 8008e2a:	468b      	mov	fp, r1
 8008e2c:	f038 080f 	bics.w	r8, r8, #15
 8008e30:	d04f      	beq.n	8008ed2 <_strtod_l+0x522>
 8008e32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e36:	dd22      	ble.n	8008e7e <_strtod_l+0x4ce>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	462e      	mov	r6, r5
 8008e3c:	9507      	str	r5, [sp, #28]
 8008e3e:	9505      	str	r5, [sp, #20]
 8008e40:	2322      	movs	r3, #34	; 0x22
 8008e42:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f5c <_strtod_l+0x5ac>
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	f04f 0a00 	mov.w	sl, #0
 8008e4c:	9b07      	ldr	r3, [sp, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f43f adf2 	beq.w	8008a38 <_strtod_l+0x88>
 8008e54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e56:	4620      	mov	r0, r4
 8008e58:	f001 fe94 	bl	800ab84 <_Bfree>
 8008e5c:	9905      	ldr	r1, [sp, #20]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f001 fe90 	bl	800ab84 <_Bfree>
 8008e64:	4631      	mov	r1, r6
 8008e66:	4620      	mov	r0, r4
 8008e68:	f001 fe8c 	bl	800ab84 <_Bfree>
 8008e6c:	9907      	ldr	r1, [sp, #28]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f001 fe88 	bl	800ab84 <_Bfree>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 fe84 	bl	800ab84 <_Bfree>
 8008e7c:	e5dc      	b.n	8008a38 <_strtod_l+0x88>
 8008e7e:	4b36      	ldr	r3, [pc, #216]	; (8008f58 <_strtod_l+0x5a8>)
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	2300      	movs	r3, #0
 8008e84:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e88:	4650      	mov	r0, sl
 8008e8a:	4659      	mov	r1, fp
 8008e8c:	4699      	mov	r9, r3
 8008e8e:	f1b8 0f01 	cmp.w	r8, #1
 8008e92:	dc21      	bgt.n	8008ed8 <_strtod_l+0x528>
 8008e94:	b10b      	cbz	r3, 8008e9a <_strtod_l+0x4ea>
 8008e96:	4682      	mov	sl, r0
 8008e98:	468b      	mov	fp, r1
 8008e9a:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <_strtod_l+0x5a8>)
 8008e9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ea0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008ea4:	4652      	mov	r2, sl
 8008ea6:	465b      	mov	r3, fp
 8008ea8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	4b2a      	ldr	r3, [pc, #168]	; (8008f5c <_strtod_l+0x5ac>)
 8008eb2:	460a      	mov	r2, r1
 8008eb4:	400b      	ands	r3, r1
 8008eb6:	492a      	ldr	r1, [pc, #168]	; (8008f60 <_strtod_l+0x5b0>)
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	4682      	mov	sl, r0
 8008ebc:	d8bc      	bhi.n	8008e38 <_strtod_l+0x488>
 8008ebe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008ec2:	428b      	cmp	r3, r1
 8008ec4:	bf86      	itte	hi
 8008ec6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f64 <_strtod_l+0x5b4>
 8008eca:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ece:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	e084      	b.n	8008fe2 <_strtod_l+0x632>
 8008ed8:	f018 0f01 	tst.w	r8, #1
 8008edc:	d005      	beq.n	8008eea <_strtod_l+0x53a>
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	9a04      	ldr	r2, [sp, #16]
 8008eec:	3208      	adds	r2, #8
 8008eee:	f109 0901 	add.w	r9, r9, #1
 8008ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ef6:	9204      	str	r2, [sp, #16]
 8008ef8:	e7c9      	b.n	8008e8e <_strtod_l+0x4de>
 8008efa:	d0ea      	beq.n	8008ed2 <_strtod_l+0x522>
 8008efc:	f1c8 0800 	rsb	r8, r8, #0
 8008f00:	f018 020f 	ands.w	r2, r8, #15
 8008f04:	d00a      	beq.n	8008f1c <_strtod_l+0x56c>
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <_strtod_l+0x5a4>)
 8008f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	4659      	mov	r1, fp
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 fca2 	bl	800085c <__aeabi_ddiv>
 8008f18:	4682      	mov	sl, r0
 8008f1a:	468b      	mov	fp, r1
 8008f1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f20:	d0d7      	beq.n	8008ed2 <_strtod_l+0x522>
 8008f22:	f1b8 0f1f 	cmp.w	r8, #31
 8008f26:	dd1f      	ble.n	8008f68 <_strtod_l+0x5b8>
 8008f28:	2500      	movs	r5, #0
 8008f2a:	462e      	mov	r6, r5
 8008f2c:	9507      	str	r5, [sp, #28]
 8008f2e:	9505      	str	r5, [sp, #20]
 8008f30:	2322      	movs	r3, #34	; 0x22
 8008f32:	f04f 0a00 	mov.w	sl, #0
 8008f36:	f04f 0b00 	mov.w	fp, #0
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	e786      	b.n	8008e4c <_strtod_l+0x49c>
 8008f3e:	bf00      	nop
 8008f40:	0800c3a1 	.word	0x0800c3a1
 8008f44:	0800c3e4 	.word	0x0800c3e4
 8008f48:	0800c399 	.word	0x0800c399
 8008f4c:	0800c524 	.word	0x0800c524
 8008f50:	0800c7d0 	.word	0x0800c7d0
 8008f54:	0800c6b0 	.word	0x0800c6b0
 8008f58:	0800c688 	.word	0x0800c688
 8008f5c:	7ff00000 	.word	0x7ff00000
 8008f60:	7ca00000 	.word	0x7ca00000
 8008f64:	7fefffff 	.word	0x7fefffff
 8008f68:	f018 0310 	ands.w	r3, r8, #16
 8008f6c:	bf18      	it	ne
 8008f6e:	236a      	movne	r3, #106	; 0x6a
 8008f70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009320 <_strtod_l+0x970>
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	4650      	mov	r0, sl
 8008f78:	4659      	mov	r1, fp
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f018 0f01 	tst.w	r8, #1
 8008f80:	d004      	beq.n	8008f8c <_strtod_l+0x5dc>
 8008f82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f86:	f7f7 fb3f 	bl	8000608 <__aeabi_dmul>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f90:	f109 0908 	add.w	r9, r9, #8
 8008f94:	d1f2      	bne.n	8008f7c <_strtod_l+0x5cc>
 8008f96:	b10b      	cbz	r3, 8008f9c <_strtod_l+0x5ec>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	9b04      	ldr	r3, [sp, #16]
 8008f9e:	b1c3      	cbz	r3, 8008fd2 <_strtod_l+0x622>
 8008fa0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fa4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	4659      	mov	r1, fp
 8008fac:	dd11      	ble.n	8008fd2 <_strtod_l+0x622>
 8008fae:	2b1f      	cmp	r3, #31
 8008fb0:	f340 8124 	ble.w	80091fc <_strtod_l+0x84c>
 8008fb4:	2b34      	cmp	r3, #52	; 0x34
 8008fb6:	bfde      	ittt	le
 8008fb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fbc:	f04f 33ff 	movle.w	r3, #4294967295
 8008fc0:	fa03 f202 	lslle.w	r2, r3, r2
 8008fc4:	f04f 0a00 	mov.w	sl, #0
 8008fc8:	bfcc      	ite	gt
 8008fca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008fce:	ea02 0b01 	andle.w	fp, r2, r1
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	4659      	mov	r1, fp
 8008fda:	f7f7 fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d1a2      	bne.n	8008f28 <_strtod_l+0x578>
 8008fe2:	9b07      	ldr	r3, [sp, #28]
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	9908      	ldr	r1, [sp, #32]
 8008fe8:	462b      	mov	r3, r5
 8008fea:	463a      	mov	r2, r7
 8008fec:	4620      	mov	r0, r4
 8008fee:	f001 fe31 	bl	800ac54 <__s2b>
 8008ff2:	9007      	str	r0, [sp, #28]
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f af1f 	beq.w	8008e38 <_strtod_l+0x488>
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	1b9e      	subs	r6, r3, r6
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfb4      	ite	lt
 8009004:	4633      	movlt	r3, r6
 8009006:	2300      	movge	r3, #0
 8009008:	930c      	str	r3, [sp, #48]	; 0x30
 800900a:	9b06      	ldr	r3, [sp, #24]
 800900c:	2500      	movs	r5, #0
 800900e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009012:	9312      	str	r3, [sp, #72]	; 0x48
 8009014:	462e      	mov	r6, r5
 8009016:	9b07      	ldr	r3, [sp, #28]
 8009018:	4620      	mov	r0, r4
 800901a:	6859      	ldr	r1, [r3, #4]
 800901c:	f001 fd72 	bl	800ab04 <_Balloc>
 8009020:	9005      	str	r0, [sp, #20]
 8009022:	2800      	cmp	r0, #0
 8009024:	f43f af0c 	beq.w	8008e40 <_strtod_l+0x490>
 8009028:	9b07      	ldr	r3, [sp, #28]
 800902a:	691a      	ldr	r2, [r3, #16]
 800902c:	3202      	adds	r2, #2
 800902e:	f103 010c 	add.w	r1, r3, #12
 8009032:	0092      	lsls	r2, r2, #2
 8009034:	300c      	adds	r0, #12
 8009036:	f001 fd4b 	bl	800aad0 <memcpy>
 800903a:	ec4b ab10 	vmov	d0, sl, fp
 800903e:	aa1a      	add	r2, sp, #104	; 0x68
 8009040:	a919      	add	r1, sp, #100	; 0x64
 8009042:	4620      	mov	r0, r4
 8009044:	f002 f94c 	bl	800b2e0 <__d2b>
 8009048:	ec4b ab18 	vmov	d8, sl, fp
 800904c:	9018      	str	r0, [sp, #96]	; 0x60
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f aef6 	beq.w	8008e40 <_strtod_l+0x490>
 8009054:	2101      	movs	r1, #1
 8009056:	4620      	mov	r0, r4
 8009058:	f001 fe96 	bl	800ad88 <__i2b>
 800905c:	4606      	mov	r6, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f aeee 	beq.w	8008e40 <_strtod_l+0x490>
 8009064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009066:	9904      	ldr	r1, [sp, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfab      	itete	ge
 800906c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800906e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009070:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009072:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009076:	bfac      	ite	ge
 8009078:	eb03 0902 	addge.w	r9, r3, r2
 800907c:	1ad7      	sublt	r7, r2, r3
 800907e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009080:	eba3 0801 	sub.w	r8, r3, r1
 8009084:	4490      	add	r8, r2
 8009086:	4ba1      	ldr	r3, [pc, #644]	; (800930c <_strtod_l+0x95c>)
 8009088:	f108 38ff 	add.w	r8, r8, #4294967295
 800908c:	4598      	cmp	r8, r3
 800908e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009092:	f280 80c7 	bge.w	8009224 <_strtod_l+0x874>
 8009096:	eba3 0308 	sub.w	r3, r3, r8
 800909a:	2b1f      	cmp	r3, #31
 800909c:	eba2 0203 	sub.w	r2, r2, r3
 80090a0:	f04f 0101 	mov.w	r1, #1
 80090a4:	f300 80b1 	bgt.w	800920a <_strtod_l+0x85a>
 80090a8:	fa01 f303 	lsl.w	r3, r1, r3
 80090ac:	930d      	str	r3, [sp, #52]	; 0x34
 80090ae:	2300      	movs	r3, #0
 80090b0:	9308      	str	r3, [sp, #32]
 80090b2:	eb09 0802 	add.w	r8, r9, r2
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	45c1      	cmp	r9, r8
 80090ba:	4417      	add	r7, r2
 80090bc:	441f      	add	r7, r3
 80090be:	464b      	mov	r3, r9
 80090c0:	bfa8      	it	ge
 80090c2:	4643      	movge	r3, r8
 80090c4:	42bb      	cmp	r3, r7
 80090c6:	bfa8      	it	ge
 80090c8:	463b      	movge	r3, r7
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfc2      	ittt	gt
 80090ce:	eba8 0803 	subgt.w	r8, r8, r3
 80090d2:	1aff      	subgt	r7, r7, r3
 80090d4:	eba9 0903 	subgt.w	r9, r9, r3
 80090d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dd17      	ble.n	800910e <_strtod_l+0x75e>
 80090de:	4631      	mov	r1, r6
 80090e0:	461a      	mov	r2, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	f001 ff10 	bl	800af08 <__pow5mult>
 80090e8:	4606      	mov	r6, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f43f aea8 	beq.w	8008e40 <_strtod_l+0x490>
 80090f0:	4601      	mov	r1, r0
 80090f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090f4:	4620      	mov	r0, r4
 80090f6:	f001 fe5d 	bl	800adb4 <__multiply>
 80090fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f ae9f 	beq.w	8008e40 <_strtod_l+0x490>
 8009102:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009104:	4620      	mov	r0, r4
 8009106:	f001 fd3d 	bl	800ab84 <_Bfree>
 800910a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800910c:	9318      	str	r3, [sp, #96]	; 0x60
 800910e:	f1b8 0f00 	cmp.w	r8, #0
 8009112:	f300 808c 	bgt.w	800922e <_strtod_l+0x87e>
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	dd08      	ble.n	800912e <_strtod_l+0x77e>
 800911c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800911e:	9905      	ldr	r1, [sp, #20]
 8009120:	4620      	mov	r0, r4
 8009122:	f001 fef1 	bl	800af08 <__pow5mult>
 8009126:	9005      	str	r0, [sp, #20]
 8009128:	2800      	cmp	r0, #0
 800912a:	f43f ae89 	beq.w	8008e40 <_strtod_l+0x490>
 800912e:	2f00      	cmp	r7, #0
 8009130:	dd08      	ble.n	8009144 <_strtod_l+0x794>
 8009132:	9905      	ldr	r1, [sp, #20]
 8009134:	463a      	mov	r2, r7
 8009136:	4620      	mov	r0, r4
 8009138:	f001 ff40 	bl	800afbc <__lshift>
 800913c:	9005      	str	r0, [sp, #20]
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f ae7e 	beq.w	8008e40 <_strtod_l+0x490>
 8009144:	f1b9 0f00 	cmp.w	r9, #0
 8009148:	dd08      	ble.n	800915c <_strtod_l+0x7ac>
 800914a:	4631      	mov	r1, r6
 800914c:	464a      	mov	r2, r9
 800914e:	4620      	mov	r0, r4
 8009150:	f001 ff34 	bl	800afbc <__lshift>
 8009154:	4606      	mov	r6, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	f43f ae72 	beq.w	8008e40 <_strtod_l+0x490>
 800915c:	9a05      	ldr	r2, [sp, #20]
 800915e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009160:	4620      	mov	r0, r4
 8009162:	f001 ffb7 	bl	800b0d4 <__mdiff>
 8009166:	4605      	mov	r5, r0
 8009168:	2800      	cmp	r0, #0
 800916a:	f43f ae69 	beq.w	8008e40 <_strtod_l+0x490>
 800916e:	68c3      	ldr	r3, [r0, #12]
 8009170:	930b      	str	r3, [sp, #44]	; 0x2c
 8009172:	2300      	movs	r3, #0
 8009174:	60c3      	str	r3, [r0, #12]
 8009176:	4631      	mov	r1, r6
 8009178:	f001 ff90 	bl	800b09c <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	da60      	bge.n	8009242 <_strtod_l+0x892>
 8009180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009182:	ea53 030a 	orrs.w	r3, r3, sl
 8009186:	f040 8082 	bne.w	800928e <_strtod_l+0x8de>
 800918a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800918e:	2b00      	cmp	r3, #0
 8009190:	d17d      	bne.n	800928e <_strtod_l+0x8de>
 8009192:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009196:	0d1b      	lsrs	r3, r3, #20
 8009198:	051b      	lsls	r3, r3, #20
 800919a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800919e:	d976      	bls.n	800928e <_strtod_l+0x8de>
 80091a0:	696b      	ldr	r3, [r5, #20]
 80091a2:	b913      	cbnz	r3, 80091aa <_strtod_l+0x7fa>
 80091a4:	692b      	ldr	r3, [r5, #16]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	dd71      	ble.n	800928e <_strtod_l+0x8de>
 80091aa:	4629      	mov	r1, r5
 80091ac:	2201      	movs	r2, #1
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 ff04 	bl	800afbc <__lshift>
 80091b4:	4631      	mov	r1, r6
 80091b6:	4605      	mov	r5, r0
 80091b8:	f001 ff70 	bl	800b09c <__mcmp>
 80091bc:	2800      	cmp	r0, #0
 80091be:	dd66      	ble.n	800928e <_strtod_l+0x8de>
 80091c0:	9904      	ldr	r1, [sp, #16]
 80091c2:	4a53      	ldr	r2, [pc, #332]	; (8009310 <_strtod_l+0x960>)
 80091c4:	465b      	mov	r3, fp
 80091c6:	2900      	cmp	r1, #0
 80091c8:	f000 8081 	beq.w	80092ce <_strtod_l+0x91e>
 80091cc:	ea02 010b 	and.w	r1, r2, fp
 80091d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091d4:	dc7b      	bgt.n	80092ce <_strtod_l+0x91e>
 80091d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091da:	f77f aea9 	ble.w	8008f30 <_strtod_l+0x580>
 80091de:	4b4d      	ldr	r3, [pc, #308]	; (8009314 <_strtod_l+0x964>)
 80091e0:	4650      	mov	r0, sl
 80091e2:	4659      	mov	r1, fp
 80091e4:	2200      	movs	r2, #0
 80091e6:	f7f7 fa0f 	bl	8000608 <__aeabi_dmul>
 80091ea:	460b      	mov	r3, r1
 80091ec:	4303      	orrs	r3, r0
 80091ee:	bf08      	it	eq
 80091f0:	2322      	moveq	r3, #34	; 0x22
 80091f2:	4682      	mov	sl, r0
 80091f4:	468b      	mov	fp, r1
 80091f6:	bf08      	it	eq
 80091f8:	6023      	streq	r3, [r4, #0]
 80091fa:	e62b      	b.n	8008e54 <_strtod_l+0x4a4>
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	ea03 0a0a 	and.w	sl, r3, sl
 8009208:	e6e3      	b.n	8008fd2 <_strtod_l+0x622>
 800920a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800920e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009212:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009216:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800921a:	fa01 f308 	lsl.w	r3, r1, r8
 800921e:	9308      	str	r3, [sp, #32]
 8009220:	910d      	str	r1, [sp, #52]	; 0x34
 8009222:	e746      	b.n	80090b2 <_strtod_l+0x702>
 8009224:	2300      	movs	r3, #0
 8009226:	9308      	str	r3, [sp, #32]
 8009228:	2301      	movs	r3, #1
 800922a:	930d      	str	r3, [sp, #52]	; 0x34
 800922c:	e741      	b.n	80090b2 <_strtod_l+0x702>
 800922e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009230:	4642      	mov	r2, r8
 8009232:	4620      	mov	r0, r4
 8009234:	f001 fec2 	bl	800afbc <__lshift>
 8009238:	9018      	str	r0, [sp, #96]	; 0x60
 800923a:	2800      	cmp	r0, #0
 800923c:	f47f af6b 	bne.w	8009116 <_strtod_l+0x766>
 8009240:	e5fe      	b.n	8008e40 <_strtod_l+0x490>
 8009242:	465f      	mov	r7, fp
 8009244:	d16e      	bne.n	8009324 <_strtod_l+0x974>
 8009246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800924c:	b342      	cbz	r2, 80092a0 <_strtod_l+0x8f0>
 800924e:	4a32      	ldr	r2, [pc, #200]	; (8009318 <_strtod_l+0x968>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d128      	bne.n	80092a6 <_strtod_l+0x8f6>
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	4651      	mov	r1, sl
 8009258:	b1eb      	cbz	r3, 8009296 <_strtod_l+0x8e6>
 800925a:	4b2d      	ldr	r3, [pc, #180]	; (8009310 <_strtod_l+0x960>)
 800925c:	403b      	ands	r3, r7
 800925e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	d819      	bhi.n	800929c <_strtod_l+0x8ec>
 8009268:	0d1b      	lsrs	r3, r3, #20
 800926a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	4299      	cmp	r1, r3
 8009274:	d117      	bne.n	80092a6 <_strtod_l+0x8f6>
 8009276:	4b29      	ldr	r3, [pc, #164]	; (800931c <_strtod_l+0x96c>)
 8009278:	429f      	cmp	r7, r3
 800927a:	d102      	bne.n	8009282 <_strtod_l+0x8d2>
 800927c:	3101      	adds	r1, #1
 800927e:	f43f addf 	beq.w	8008e40 <_strtod_l+0x490>
 8009282:	4b23      	ldr	r3, [pc, #140]	; (8009310 <_strtod_l+0x960>)
 8009284:	403b      	ands	r3, r7
 8009286:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800928a:	f04f 0a00 	mov.w	sl, #0
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1a4      	bne.n	80091de <_strtod_l+0x82e>
 8009294:	e5de      	b.n	8008e54 <_strtod_l+0x4a4>
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	e7ea      	b.n	8009272 <_strtod_l+0x8c2>
 800929c:	4613      	mov	r3, r2
 800929e:	e7e8      	b.n	8009272 <_strtod_l+0x8c2>
 80092a0:	ea53 030a 	orrs.w	r3, r3, sl
 80092a4:	d08c      	beq.n	80091c0 <_strtod_l+0x810>
 80092a6:	9b08      	ldr	r3, [sp, #32]
 80092a8:	b1db      	cbz	r3, 80092e2 <_strtod_l+0x932>
 80092aa:	423b      	tst	r3, r7
 80092ac:	d0ef      	beq.n	800928e <_strtod_l+0x8de>
 80092ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b0:	9a04      	ldr	r2, [sp, #16]
 80092b2:	4650      	mov	r0, sl
 80092b4:	4659      	mov	r1, fp
 80092b6:	b1c3      	cbz	r3, 80092ea <_strtod_l+0x93a>
 80092b8:	f7ff fb5c 	bl	8008974 <sulp>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	ec51 0b18 	vmov	r0, r1, d8
 80092c4:	f7f6 ffea 	bl	800029c <__adddf3>
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	e7df      	b.n	800928e <_strtod_l+0x8de>
 80092ce:	4013      	ands	r3, r2
 80092d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092dc:	f04f 3aff 	mov.w	sl, #4294967295
 80092e0:	e7d5      	b.n	800928e <_strtod_l+0x8de>
 80092e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092e4:	ea13 0f0a 	tst.w	r3, sl
 80092e8:	e7e0      	b.n	80092ac <_strtod_l+0x8fc>
 80092ea:	f7ff fb43 	bl	8008974 <sulp>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	ec51 0b18 	vmov	r0, r1, d8
 80092f6:	f7f6 ffcf 	bl	8000298 <__aeabi_dsub>
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4682      	mov	sl, r0
 8009300:	468b      	mov	fp, r1
 8009302:	f7f7 fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009306:	2800      	cmp	r0, #0
 8009308:	d0c1      	beq.n	800928e <_strtod_l+0x8de>
 800930a:	e611      	b.n	8008f30 <_strtod_l+0x580>
 800930c:	fffffc02 	.word	0xfffffc02
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	39500000 	.word	0x39500000
 8009318:	000fffff 	.word	0x000fffff
 800931c:	7fefffff 	.word	0x7fefffff
 8009320:	0800c3f8 	.word	0x0800c3f8
 8009324:	4631      	mov	r1, r6
 8009326:	4628      	mov	r0, r5
 8009328:	f002 f836 	bl	800b398 <__ratio>
 800932c:	ec59 8b10 	vmov	r8, r9, d0
 8009330:	ee10 0a10 	vmov	r0, s0
 8009334:	2200      	movs	r2, #0
 8009336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800933a:	4649      	mov	r1, r9
 800933c:	f7f7 fbe0 	bl	8000b00 <__aeabi_dcmple>
 8009340:	2800      	cmp	r0, #0
 8009342:	d07a      	beq.n	800943a <_strtod_l+0xa8a>
 8009344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d04a      	beq.n	80093e0 <_strtod_l+0xa30>
 800934a:	4b95      	ldr	r3, [pc, #596]	; (80095a0 <_strtod_l+0xbf0>)
 800934c:	2200      	movs	r2, #0
 800934e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009352:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095a0 <_strtod_l+0xbf0>
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	4b92      	ldr	r3, [pc, #584]	; (80095a4 <_strtod_l+0xbf4>)
 800935c:	403b      	ands	r3, r7
 800935e:	930d      	str	r3, [sp, #52]	; 0x34
 8009360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009362:	4b91      	ldr	r3, [pc, #580]	; (80095a8 <_strtod_l+0xbf8>)
 8009364:	429a      	cmp	r2, r3
 8009366:	f040 80b0 	bne.w	80094ca <_strtod_l+0xb1a>
 800936a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800936e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009372:	ec4b ab10 	vmov	d0, sl, fp
 8009376:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800937a:	f001 ff35 	bl	800b1e8 <__ulp>
 800937e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009382:	ec53 2b10 	vmov	r2, r3, d0
 8009386:	f7f7 f93f 	bl	8000608 <__aeabi_dmul>
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	f7f6 ff85 	bl	800029c <__adddf3>
 8009392:	460b      	mov	r3, r1
 8009394:	4983      	ldr	r1, [pc, #524]	; (80095a4 <_strtod_l+0xbf4>)
 8009396:	4a85      	ldr	r2, [pc, #532]	; (80095ac <_strtod_l+0xbfc>)
 8009398:	4019      	ands	r1, r3
 800939a:	4291      	cmp	r1, r2
 800939c:	4682      	mov	sl, r0
 800939e:	d960      	bls.n	8009462 <_strtod_l+0xab2>
 80093a0:	ee18 3a90 	vmov	r3, s17
 80093a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d104      	bne.n	80093b6 <_strtod_l+0xa06>
 80093ac:	ee18 3a10 	vmov	r3, s16
 80093b0:	3301      	adds	r3, #1
 80093b2:	f43f ad45 	beq.w	8008e40 <_strtod_l+0x490>
 80093b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80095b8 <_strtod_l+0xc08>
 80093ba:	f04f 3aff 	mov.w	sl, #4294967295
 80093be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093c0:	4620      	mov	r0, r4
 80093c2:	f001 fbdf 	bl	800ab84 <_Bfree>
 80093c6:	9905      	ldr	r1, [sp, #20]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f001 fbdb 	bl	800ab84 <_Bfree>
 80093ce:	4631      	mov	r1, r6
 80093d0:	4620      	mov	r0, r4
 80093d2:	f001 fbd7 	bl	800ab84 <_Bfree>
 80093d6:	4629      	mov	r1, r5
 80093d8:	4620      	mov	r0, r4
 80093da:	f001 fbd3 	bl	800ab84 <_Bfree>
 80093de:	e61a      	b.n	8009016 <_strtod_l+0x666>
 80093e0:	f1ba 0f00 	cmp.w	sl, #0
 80093e4:	d11b      	bne.n	800941e <_strtod_l+0xa6e>
 80093e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ea:	b9f3      	cbnz	r3, 800942a <_strtod_l+0xa7a>
 80093ec:	4b6c      	ldr	r3, [pc, #432]	; (80095a0 <_strtod_l+0xbf0>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 fb7a 	bl	8000aec <__aeabi_dcmplt>
 80093f8:	b9d0      	cbnz	r0, 8009430 <_strtod_l+0xa80>
 80093fa:	4640      	mov	r0, r8
 80093fc:	4649      	mov	r1, r9
 80093fe:	4b6c      	ldr	r3, [pc, #432]	; (80095b0 <_strtod_l+0xc00>)
 8009400:	2200      	movs	r2, #0
 8009402:	f7f7 f901 	bl	8000608 <__aeabi_dmul>
 8009406:	4680      	mov	r8, r0
 8009408:	4689      	mov	r9, r1
 800940a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800940e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009412:	9315      	str	r3, [sp, #84]	; 0x54
 8009414:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009418:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800941c:	e79d      	b.n	800935a <_strtod_l+0x9aa>
 800941e:	f1ba 0f01 	cmp.w	sl, #1
 8009422:	d102      	bne.n	800942a <_strtod_l+0xa7a>
 8009424:	2f00      	cmp	r7, #0
 8009426:	f43f ad83 	beq.w	8008f30 <_strtod_l+0x580>
 800942a:	4b62      	ldr	r3, [pc, #392]	; (80095b4 <_strtod_l+0xc04>)
 800942c:	2200      	movs	r2, #0
 800942e:	e78e      	b.n	800934e <_strtod_l+0x99e>
 8009430:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095b0 <_strtod_l+0xc00>
 8009434:	f04f 0800 	mov.w	r8, #0
 8009438:	e7e7      	b.n	800940a <_strtod_l+0xa5a>
 800943a:	4b5d      	ldr	r3, [pc, #372]	; (80095b0 <_strtod_l+0xc00>)
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	2200      	movs	r2, #0
 8009442:	f7f7 f8e1 	bl	8000608 <__aeabi_dmul>
 8009446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009448:	4680      	mov	r8, r0
 800944a:	4689      	mov	r9, r1
 800944c:	b933      	cbnz	r3, 800945c <_strtod_l+0xaac>
 800944e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009452:	900e      	str	r0, [sp, #56]	; 0x38
 8009454:	930f      	str	r3, [sp, #60]	; 0x3c
 8009456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800945a:	e7dd      	b.n	8009418 <_strtod_l+0xa68>
 800945c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009460:	e7f9      	b.n	8009456 <_strtod_l+0xaa6>
 8009462:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009466:	9b04      	ldr	r3, [sp, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1a8      	bne.n	80093be <_strtod_l+0xa0e>
 800946c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009470:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009472:	0d1b      	lsrs	r3, r3, #20
 8009474:	051b      	lsls	r3, r3, #20
 8009476:	429a      	cmp	r2, r3
 8009478:	d1a1      	bne.n	80093be <_strtod_l+0xa0e>
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f7 fc23 	bl	8000cc8 <__aeabi_d2lz>
 8009482:	f7f7 f893 	bl	80005ac <__aeabi_l2d>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f6 ff03 	bl	8000298 <__aeabi_dsub>
 8009492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009498:	ea43 030a 	orr.w	r3, r3, sl
 800949c:	4313      	orrs	r3, r2
 800949e:	4680      	mov	r8, r0
 80094a0:	4689      	mov	r9, r1
 80094a2:	d055      	beq.n	8009550 <_strtod_l+0xba0>
 80094a4:	a336      	add	r3, pc, #216	; (adr r3, 8009580 <_strtod_l+0xbd0>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f7 fb1f 	bl	8000aec <__aeabi_dcmplt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f47f acd0 	bne.w	8008e54 <_strtod_l+0x4a4>
 80094b4:	a334      	add	r3, pc, #208	; (adr r3, 8009588 <_strtod_l+0xbd8>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	4640      	mov	r0, r8
 80094bc:	4649      	mov	r1, r9
 80094be:	f7f7 fb33 	bl	8000b28 <__aeabi_dcmpgt>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	f43f af7b 	beq.w	80093be <_strtod_l+0xa0e>
 80094c8:	e4c4      	b.n	8008e54 <_strtod_l+0x4a4>
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	b333      	cbz	r3, 800951c <_strtod_l+0xb6c>
 80094ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094d4:	d822      	bhi.n	800951c <_strtod_l+0xb6c>
 80094d6:	a32e      	add	r3, pc, #184	; (adr r3, 8009590 <_strtod_l+0xbe0>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f7 fb0e 	bl	8000b00 <__aeabi_dcmple>
 80094e4:	b1a0      	cbz	r0, 8009510 <_strtod_l+0xb60>
 80094e6:	4649      	mov	r1, r9
 80094e8:	4640      	mov	r0, r8
 80094ea:	f7f7 fb65 	bl	8000bb8 <__aeabi_d2uiz>
 80094ee:	2801      	cmp	r0, #1
 80094f0:	bf38      	it	cc
 80094f2:	2001      	movcc	r0, #1
 80094f4:	f7f7 f80e 	bl	8000514 <__aeabi_ui2d>
 80094f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094fa:	4680      	mov	r8, r0
 80094fc:	4689      	mov	r9, r1
 80094fe:	bb23      	cbnz	r3, 800954a <_strtod_l+0xb9a>
 8009500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009504:	9010      	str	r0, [sp, #64]	; 0x40
 8009506:	9311      	str	r3, [sp, #68]	; 0x44
 8009508:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800950c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009514:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	9309      	str	r3, [sp, #36]	; 0x24
 800951c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009520:	eeb0 0a48 	vmov.f32	s0, s16
 8009524:	eef0 0a68 	vmov.f32	s1, s17
 8009528:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800952c:	f001 fe5c 	bl	800b1e8 <__ulp>
 8009530:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009534:	ec53 2b10 	vmov	r2, r3, d0
 8009538:	f7f7 f866 	bl	8000608 <__aeabi_dmul>
 800953c:	ec53 2b18 	vmov	r2, r3, d8
 8009540:	f7f6 feac 	bl	800029c <__adddf3>
 8009544:	4682      	mov	sl, r0
 8009546:	468b      	mov	fp, r1
 8009548:	e78d      	b.n	8009466 <_strtod_l+0xab6>
 800954a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800954e:	e7db      	b.n	8009508 <_strtod_l+0xb58>
 8009550:	a311      	add	r3, pc, #68	; (adr r3, 8009598 <_strtod_l+0xbe8>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f7 fac9 	bl	8000aec <__aeabi_dcmplt>
 800955a:	e7b2      	b.n	80094c2 <_strtod_l+0xb12>
 800955c:	2300      	movs	r3, #0
 800955e:	930a      	str	r3, [sp, #40]	; 0x28
 8009560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	f7ff ba6b 	b.w	8008a40 <_strtod_l+0x90>
 800956a:	2a65      	cmp	r2, #101	; 0x65
 800956c:	f43f ab5f 	beq.w	8008c2e <_strtod_l+0x27e>
 8009570:	2a45      	cmp	r2, #69	; 0x45
 8009572:	f43f ab5c 	beq.w	8008c2e <_strtod_l+0x27e>
 8009576:	2301      	movs	r3, #1
 8009578:	f7ff bb94 	b.w	8008ca4 <_strtod_l+0x2f4>
 800957c:	f3af 8000 	nop.w
 8009580:	94a03595 	.word	0x94a03595
 8009584:	3fdfffff 	.word	0x3fdfffff
 8009588:	35afe535 	.word	0x35afe535
 800958c:	3fe00000 	.word	0x3fe00000
 8009590:	ffc00000 	.word	0xffc00000
 8009594:	41dfffff 	.word	0x41dfffff
 8009598:	94a03595 	.word	0x94a03595
 800959c:	3fcfffff 	.word	0x3fcfffff
 80095a0:	3ff00000 	.word	0x3ff00000
 80095a4:	7ff00000 	.word	0x7ff00000
 80095a8:	7fe00000 	.word	0x7fe00000
 80095ac:	7c9fffff 	.word	0x7c9fffff
 80095b0:	3fe00000 	.word	0x3fe00000
 80095b4:	bff00000 	.word	0xbff00000
 80095b8:	7fefffff 	.word	0x7fefffff

080095bc <_strtod_r>:
 80095bc:	4b01      	ldr	r3, [pc, #4]	; (80095c4 <_strtod_r+0x8>)
 80095be:	f7ff b9f7 	b.w	80089b0 <_strtod_l>
 80095c2:	bf00      	nop
 80095c4:	20000164 	.word	0x20000164

080095c8 <_strtol_l.constprop.0>:
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ce:	d001      	beq.n	80095d4 <_strtol_l.constprop.0+0xc>
 80095d0:	2b24      	cmp	r3, #36	; 0x24
 80095d2:	d906      	bls.n	80095e2 <_strtol_l.constprop.0+0x1a>
 80095d4:	f7fe fa04 	bl	80079e0 <__errno>
 80095d8:	2316      	movs	r3, #22
 80095da:	6003      	str	r3, [r0, #0]
 80095dc:	2000      	movs	r0, #0
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80096c8 <_strtol_l.constprop.0+0x100>
 80095e6:	460d      	mov	r5, r1
 80095e8:	462e      	mov	r6, r5
 80095ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80095f2:	f017 0708 	ands.w	r7, r7, #8
 80095f6:	d1f7      	bne.n	80095e8 <_strtol_l.constprop.0+0x20>
 80095f8:	2c2d      	cmp	r4, #45	; 0x2d
 80095fa:	d132      	bne.n	8009662 <_strtol_l.constprop.0+0x9a>
 80095fc:	782c      	ldrb	r4, [r5, #0]
 80095fe:	2701      	movs	r7, #1
 8009600:	1cb5      	adds	r5, r6, #2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d05b      	beq.n	80096be <_strtol_l.constprop.0+0xf6>
 8009606:	2b10      	cmp	r3, #16
 8009608:	d109      	bne.n	800961e <_strtol_l.constprop.0+0x56>
 800960a:	2c30      	cmp	r4, #48	; 0x30
 800960c:	d107      	bne.n	800961e <_strtol_l.constprop.0+0x56>
 800960e:	782c      	ldrb	r4, [r5, #0]
 8009610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009614:	2c58      	cmp	r4, #88	; 0x58
 8009616:	d14d      	bne.n	80096b4 <_strtol_l.constprop.0+0xec>
 8009618:	786c      	ldrb	r4, [r5, #1]
 800961a:	2310      	movs	r3, #16
 800961c:	3502      	adds	r5, #2
 800961e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009622:	f108 38ff 	add.w	r8, r8, #4294967295
 8009626:	f04f 0c00 	mov.w	ip, #0
 800962a:	fbb8 f9f3 	udiv	r9, r8, r3
 800962e:	4666      	mov	r6, ip
 8009630:	fb03 8a19 	mls	sl, r3, r9, r8
 8009634:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009638:	f1be 0f09 	cmp.w	lr, #9
 800963c:	d816      	bhi.n	800966c <_strtol_l.constprop.0+0xa4>
 800963e:	4674      	mov	r4, lr
 8009640:	42a3      	cmp	r3, r4
 8009642:	dd24      	ble.n	800968e <_strtol_l.constprop.0+0xc6>
 8009644:	f1bc 0f00 	cmp.w	ip, #0
 8009648:	db1e      	blt.n	8009688 <_strtol_l.constprop.0+0xc0>
 800964a:	45b1      	cmp	r9, r6
 800964c:	d31c      	bcc.n	8009688 <_strtol_l.constprop.0+0xc0>
 800964e:	d101      	bne.n	8009654 <_strtol_l.constprop.0+0x8c>
 8009650:	45a2      	cmp	sl, r4
 8009652:	db19      	blt.n	8009688 <_strtol_l.constprop.0+0xc0>
 8009654:	fb06 4603 	mla	r6, r6, r3, r4
 8009658:	f04f 0c01 	mov.w	ip, #1
 800965c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009660:	e7e8      	b.n	8009634 <_strtol_l.constprop.0+0x6c>
 8009662:	2c2b      	cmp	r4, #43	; 0x2b
 8009664:	bf04      	itt	eq
 8009666:	782c      	ldrbeq	r4, [r5, #0]
 8009668:	1cb5      	addeq	r5, r6, #2
 800966a:	e7ca      	b.n	8009602 <_strtol_l.constprop.0+0x3a>
 800966c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009670:	f1be 0f19 	cmp.w	lr, #25
 8009674:	d801      	bhi.n	800967a <_strtol_l.constprop.0+0xb2>
 8009676:	3c37      	subs	r4, #55	; 0x37
 8009678:	e7e2      	b.n	8009640 <_strtol_l.constprop.0+0x78>
 800967a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800967e:	f1be 0f19 	cmp.w	lr, #25
 8009682:	d804      	bhi.n	800968e <_strtol_l.constprop.0+0xc6>
 8009684:	3c57      	subs	r4, #87	; 0x57
 8009686:	e7db      	b.n	8009640 <_strtol_l.constprop.0+0x78>
 8009688:	f04f 3cff 	mov.w	ip, #4294967295
 800968c:	e7e6      	b.n	800965c <_strtol_l.constprop.0+0x94>
 800968e:	f1bc 0f00 	cmp.w	ip, #0
 8009692:	da05      	bge.n	80096a0 <_strtol_l.constprop.0+0xd8>
 8009694:	2322      	movs	r3, #34	; 0x22
 8009696:	6003      	str	r3, [r0, #0]
 8009698:	4646      	mov	r6, r8
 800969a:	b942      	cbnz	r2, 80096ae <_strtol_l.constprop.0+0xe6>
 800969c:	4630      	mov	r0, r6
 800969e:	e79e      	b.n	80095de <_strtol_l.constprop.0+0x16>
 80096a0:	b107      	cbz	r7, 80096a4 <_strtol_l.constprop.0+0xdc>
 80096a2:	4276      	negs	r6, r6
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	d0f9      	beq.n	800969c <_strtol_l.constprop.0+0xd4>
 80096a8:	f1bc 0f00 	cmp.w	ip, #0
 80096ac:	d000      	beq.n	80096b0 <_strtol_l.constprop.0+0xe8>
 80096ae:	1e69      	subs	r1, r5, #1
 80096b0:	6011      	str	r1, [r2, #0]
 80096b2:	e7f3      	b.n	800969c <_strtol_l.constprop.0+0xd4>
 80096b4:	2430      	movs	r4, #48	; 0x30
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1b1      	bne.n	800961e <_strtol_l.constprop.0+0x56>
 80096ba:	2308      	movs	r3, #8
 80096bc:	e7af      	b.n	800961e <_strtol_l.constprop.0+0x56>
 80096be:	2c30      	cmp	r4, #48	; 0x30
 80096c0:	d0a5      	beq.n	800960e <_strtol_l.constprop.0+0x46>
 80096c2:	230a      	movs	r3, #10
 80096c4:	e7ab      	b.n	800961e <_strtol_l.constprop.0+0x56>
 80096c6:	bf00      	nop
 80096c8:	0800c421 	.word	0x0800c421

080096cc <_strtol_r>:
 80096cc:	f7ff bf7c 	b.w	80095c8 <_strtol_l.constprop.0>

080096d0 <quorem>:
 80096d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	6903      	ldr	r3, [r0, #16]
 80096d6:	690c      	ldr	r4, [r1, #16]
 80096d8:	42a3      	cmp	r3, r4
 80096da:	4607      	mov	r7, r0
 80096dc:	f2c0 8081 	blt.w	80097e2 <quorem+0x112>
 80096e0:	3c01      	subs	r4, #1
 80096e2:	f101 0814 	add.w	r8, r1, #20
 80096e6:	f100 0514 	add.w	r5, r0, #20
 80096ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f8:	3301      	adds	r3, #1
 80096fa:	429a      	cmp	r2, r3
 80096fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009704:	fbb2 f6f3 	udiv	r6, r2, r3
 8009708:	d331      	bcc.n	800976e <quorem+0x9e>
 800970a:	f04f 0e00 	mov.w	lr, #0
 800970e:	4640      	mov	r0, r8
 8009710:	46ac      	mov	ip, r5
 8009712:	46f2      	mov	sl, lr
 8009714:	f850 2b04 	ldr.w	r2, [r0], #4
 8009718:	b293      	uxth	r3, r2
 800971a:	fb06 e303 	mla	r3, r6, r3, lr
 800971e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009722:	b29b      	uxth	r3, r3
 8009724:	ebaa 0303 	sub.w	r3, sl, r3
 8009728:	f8dc a000 	ldr.w	sl, [ip]
 800972c:	0c12      	lsrs	r2, r2, #16
 800972e:	fa13 f38a 	uxtah	r3, r3, sl
 8009732:	fb06 e202 	mla	r2, r6, r2, lr
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	9b00      	ldr	r3, [sp, #0]
 800973a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800973e:	b292      	uxth	r2, r2
 8009740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009748:	f8bd 3000 	ldrh.w	r3, [sp]
 800974c:	4581      	cmp	r9, r0
 800974e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009752:	f84c 3b04 	str.w	r3, [ip], #4
 8009756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800975a:	d2db      	bcs.n	8009714 <quorem+0x44>
 800975c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009760:	b92b      	cbnz	r3, 800976e <quorem+0x9e>
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	3b04      	subs	r3, #4
 8009766:	429d      	cmp	r5, r3
 8009768:	461a      	mov	r2, r3
 800976a:	d32e      	bcc.n	80097ca <quorem+0xfa>
 800976c:	613c      	str	r4, [r7, #16]
 800976e:	4638      	mov	r0, r7
 8009770:	f001 fc94 	bl	800b09c <__mcmp>
 8009774:	2800      	cmp	r0, #0
 8009776:	db24      	blt.n	80097c2 <quorem+0xf2>
 8009778:	3601      	adds	r6, #1
 800977a:	4628      	mov	r0, r5
 800977c:	f04f 0c00 	mov.w	ip, #0
 8009780:	f858 2b04 	ldr.w	r2, [r8], #4
 8009784:	f8d0 e000 	ldr.w	lr, [r0]
 8009788:	b293      	uxth	r3, r2
 800978a:	ebac 0303 	sub.w	r3, ip, r3
 800978e:	0c12      	lsrs	r2, r2, #16
 8009790:	fa13 f38e 	uxtah	r3, r3, lr
 8009794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800979c:	b29b      	uxth	r3, r3
 800979e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a2:	45c1      	cmp	r9, r8
 80097a4:	f840 3b04 	str.w	r3, [r0], #4
 80097a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097ac:	d2e8      	bcs.n	8009780 <quorem+0xb0>
 80097ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b6:	b922      	cbnz	r2, 80097c2 <quorem+0xf2>
 80097b8:	3b04      	subs	r3, #4
 80097ba:	429d      	cmp	r5, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	d30a      	bcc.n	80097d6 <quorem+0x106>
 80097c0:	613c      	str	r4, [r7, #16]
 80097c2:	4630      	mov	r0, r6
 80097c4:	b003      	add	sp, #12
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	3b04      	subs	r3, #4
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d1cc      	bne.n	800976c <quorem+0x9c>
 80097d2:	3c01      	subs	r4, #1
 80097d4:	e7c7      	b.n	8009766 <quorem+0x96>
 80097d6:	6812      	ldr	r2, [r2, #0]
 80097d8:	3b04      	subs	r3, #4
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d1f0      	bne.n	80097c0 <quorem+0xf0>
 80097de:	3c01      	subs	r4, #1
 80097e0:	e7eb      	b.n	80097ba <quorem+0xea>
 80097e2:	2000      	movs	r0, #0
 80097e4:	e7ee      	b.n	80097c4 <quorem+0xf4>
	...

080097e8 <_dtoa_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	ed2d 8b04 	vpush	{d8-d9}
 80097f0:	ec57 6b10 	vmov	r6, r7, d0
 80097f4:	b093      	sub	sp, #76	; 0x4c
 80097f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097fc:	9106      	str	r1, [sp, #24]
 80097fe:	ee10 aa10 	vmov	sl, s0
 8009802:	4604      	mov	r4, r0
 8009804:	9209      	str	r2, [sp, #36]	; 0x24
 8009806:	930c      	str	r3, [sp, #48]	; 0x30
 8009808:	46bb      	mov	fp, r7
 800980a:	b975      	cbnz	r5, 800982a <_dtoa_r+0x42>
 800980c:	2010      	movs	r0, #16
 800980e:	f7fe f911 	bl	8007a34 <malloc>
 8009812:	4602      	mov	r2, r0
 8009814:	6260      	str	r0, [r4, #36]	; 0x24
 8009816:	b920      	cbnz	r0, 8009822 <_dtoa_r+0x3a>
 8009818:	4ba7      	ldr	r3, [pc, #668]	; (8009ab8 <_dtoa_r+0x2d0>)
 800981a:	21ea      	movs	r1, #234	; 0xea
 800981c:	48a7      	ldr	r0, [pc, #668]	; (8009abc <_dtoa_r+0x2d4>)
 800981e:	f001 ffcd 	bl	800b7bc <__assert_func>
 8009822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009826:	6005      	str	r5, [r0, #0]
 8009828:	60c5      	str	r5, [r0, #12]
 800982a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982c:	6819      	ldr	r1, [r3, #0]
 800982e:	b151      	cbz	r1, 8009846 <_dtoa_r+0x5e>
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	604a      	str	r2, [r1, #4]
 8009834:	2301      	movs	r3, #1
 8009836:	4093      	lsls	r3, r2
 8009838:	608b      	str	r3, [r1, #8]
 800983a:	4620      	mov	r0, r4
 800983c:	f001 f9a2 	bl	800ab84 <_Bfree>
 8009840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	1e3b      	subs	r3, r7, #0
 8009848:	bfaa      	itet	ge
 800984a:	2300      	movge	r3, #0
 800984c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009850:	f8c8 3000 	strge.w	r3, [r8]
 8009854:	4b9a      	ldr	r3, [pc, #616]	; (8009ac0 <_dtoa_r+0x2d8>)
 8009856:	bfbc      	itt	lt
 8009858:	2201      	movlt	r2, #1
 800985a:	f8c8 2000 	strlt.w	r2, [r8]
 800985e:	ea33 030b 	bics.w	r3, r3, fp
 8009862:	d11b      	bne.n	800989c <_dtoa_r+0xb4>
 8009864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009866:	f242 730f 	movw	r3, #9999	; 0x270f
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009870:	4333      	orrs	r3, r6
 8009872:	f000 8592 	beq.w	800a39a <_dtoa_r+0xbb2>
 8009876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009878:	b963      	cbnz	r3, 8009894 <_dtoa_r+0xac>
 800987a:	4b92      	ldr	r3, [pc, #584]	; (8009ac4 <_dtoa_r+0x2dc>)
 800987c:	e022      	b.n	80098c4 <_dtoa_r+0xdc>
 800987e:	4b92      	ldr	r3, [pc, #584]	; (8009ac8 <_dtoa_r+0x2e0>)
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	3308      	adds	r3, #8
 8009884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	9801      	ldr	r0, [sp, #4]
 800988a:	b013      	add	sp, #76	; 0x4c
 800988c:	ecbd 8b04 	vpop	{d8-d9}
 8009890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	4b8b      	ldr	r3, [pc, #556]	; (8009ac4 <_dtoa_r+0x2dc>)
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	3303      	adds	r3, #3
 800989a:	e7f3      	b.n	8009884 <_dtoa_r+0x9c>
 800989c:	2200      	movs	r2, #0
 800989e:	2300      	movs	r3, #0
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f7 f918 	bl	8000ad8 <__aeabi_dcmpeq>
 80098a8:	ec4b ab19 	vmov	d9, sl, fp
 80098ac:	4680      	mov	r8, r0
 80098ae:	b158      	cbz	r0, 80098c8 <_dtoa_r+0xe0>
 80098b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098b2:	2301      	movs	r3, #1
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 856b 	beq.w	800a394 <_dtoa_r+0xbac>
 80098be:	4883      	ldr	r0, [pc, #524]	; (8009acc <_dtoa_r+0x2e4>)
 80098c0:	6018      	str	r0, [r3, #0]
 80098c2:	1e43      	subs	r3, r0, #1
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	e7df      	b.n	8009888 <_dtoa_r+0xa0>
 80098c8:	ec4b ab10 	vmov	d0, sl, fp
 80098cc:	aa10      	add	r2, sp, #64	; 0x40
 80098ce:	a911      	add	r1, sp, #68	; 0x44
 80098d0:	4620      	mov	r0, r4
 80098d2:	f001 fd05 	bl	800b2e0 <__d2b>
 80098d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098da:	ee08 0a10 	vmov	s16, r0
 80098de:	2d00      	cmp	r5, #0
 80098e0:	f000 8084 	beq.w	80099ec <_dtoa_r+0x204>
 80098e4:	ee19 3a90 	vmov	r3, s19
 80098e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098f0:	4656      	mov	r6, sl
 80098f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098fe:	4b74      	ldr	r3, [pc, #464]	; (8009ad0 <_dtoa_r+0x2e8>)
 8009900:	2200      	movs	r2, #0
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fcc7 	bl	8000298 <__aeabi_dsub>
 800990a:	a365      	add	r3, pc, #404	; (adr r3, 8009aa0 <_dtoa_r+0x2b8>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f7f6 fe7a 	bl	8000608 <__aeabi_dmul>
 8009914:	a364      	add	r3, pc, #400	; (adr r3, 8009aa8 <_dtoa_r+0x2c0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fcbf 	bl	800029c <__adddf3>
 800991e:	4606      	mov	r6, r0
 8009920:	4628      	mov	r0, r5
 8009922:	460f      	mov	r7, r1
 8009924:	f7f6 fe06 	bl	8000534 <__aeabi_i2d>
 8009928:	a361      	add	r3, pc, #388	; (adr r3, 8009ab0 <_dtoa_r+0x2c8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fe6b 	bl	8000608 <__aeabi_dmul>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f6 fcaf 	bl	800029c <__adddf3>
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	f7f7 f911 	bl	8000b68 <__aeabi_d2iz>
 8009946:	2200      	movs	r2, #0
 8009948:	9000      	str	r0, [sp, #0]
 800994a:	2300      	movs	r3, #0
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f7 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8009954:	b150      	cbz	r0, 800996c <_dtoa_r+0x184>
 8009956:	9800      	ldr	r0, [sp, #0]
 8009958:	f7f6 fdec 	bl	8000534 <__aeabi_i2d>
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	f7f7 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8009964:	b910      	cbnz	r0, 800996c <_dtoa_r+0x184>
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	3b01      	subs	r3, #1
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	9b00      	ldr	r3, [sp, #0]
 800996e:	2b16      	cmp	r3, #22
 8009970:	d85a      	bhi.n	8009a28 <_dtoa_r+0x240>
 8009972:	9a00      	ldr	r2, [sp, #0]
 8009974:	4b57      	ldr	r3, [pc, #348]	; (8009ad4 <_dtoa_r+0x2ec>)
 8009976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	ec51 0b19 	vmov	r0, r1, d9
 8009982:	f7f7 f8b3 	bl	8000aec <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	d050      	beq.n	8009a2c <_dtoa_r+0x244>
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	930b      	str	r3, [sp, #44]	; 0x2c
 8009994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009996:	1b5d      	subs	r5, r3, r5
 8009998:	1e6b      	subs	r3, r5, #1
 800999a:	9305      	str	r3, [sp, #20]
 800999c:	bf45      	ittet	mi
 800999e:	f1c5 0301 	rsbmi	r3, r5, #1
 80099a2:	9304      	strmi	r3, [sp, #16]
 80099a4:	2300      	movpl	r3, #0
 80099a6:	2300      	movmi	r3, #0
 80099a8:	bf4c      	ite	mi
 80099aa:	9305      	strmi	r3, [sp, #20]
 80099ac:	9304      	strpl	r3, [sp, #16]
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	db3d      	blt.n	8009a30 <_dtoa_r+0x248>
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	9a00      	ldr	r2, [sp, #0]
 80099b8:	920a      	str	r2, [sp, #40]	; 0x28
 80099ba:	4413      	add	r3, r2
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	2300      	movs	r3, #0
 80099c0:	9307      	str	r3, [sp, #28]
 80099c2:	9b06      	ldr	r3, [sp, #24]
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	f200 8089 	bhi.w	8009adc <_dtoa_r+0x2f4>
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	bfc4      	itt	gt
 80099ce:	3b04      	subgt	r3, #4
 80099d0:	9306      	strgt	r3, [sp, #24]
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	f1a3 0302 	sub.w	r3, r3, #2
 80099d8:	bfcc      	ite	gt
 80099da:	2500      	movgt	r5, #0
 80099dc:	2501      	movle	r5, #1
 80099de:	2b03      	cmp	r3, #3
 80099e0:	f200 8087 	bhi.w	8009af2 <_dtoa_r+0x30a>
 80099e4:	e8df f003 	tbb	[pc, r3]
 80099e8:	59383a2d 	.word	0x59383a2d
 80099ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099f0:	441d      	add	r5, r3
 80099f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	bfc1      	itttt	gt
 80099fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a02:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a0a:	bfda      	itte	le
 8009a0c:	f1c3 0320 	rsble	r3, r3, #32
 8009a10:	fa06 f003 	lslle.w	r0, r6, r3
 8009a14:	4318      	orrgt	r0, r3
 8009a16:	f7f6 fd7d 	bl	8000514 <__aeabi_ui2d>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a22:	3d01      	subs	r5, #1
 8009a24:	930e      	str	r3, [sp, #56]	; 0x38
 8009a26:	e76a      	b.n	80098fe <_dtoa_r+0x116>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e7b2      	b.n	8009992 <_dtoa_r+0x1aa>
 8009a2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a2e:	e7b1      	b.n	8009994 <_dtoa_r+0x1ac>
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	9a00      	ldr	r2, [sp, #0]
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	4253      	negs	r3, r2
 8009a3a:	9307      	str	r3, [sp, #28]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a40:	e7bf      	b.n	80099c2 <_dtoa_r+0x1da>
 8009a42:	2300      	movs	r3, #0
 8009a44:	9308      	str	r3, [sp, #32]
 8009a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dc55      	bgt.n	8009af8 <_dtoa_r+0x310>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a52:	461a      	mov	r2, r3
 8009a54:	9209      	str	r2, [sp, #36]	; 0x24
 8009a56:	e00c      	b.n	8009a72 <_dtoa_r+0x28a>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e7f3      	b.n	8009a44 <_dtoa_r+0x25c>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a60:	9308      	str	r3, [sp, #32]
 8009a62:	9b00      	ldr	r3, [sp, #0]
 8009a64:	4413      	add	r3, r2
 8009a66:	9302      	str	r3, [sp, #8]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	9303      	str	r3, [sp, #12]
 8009a6e:	bfb8      	it	lt
 8009a70:	2301      	movlt	r3, #1
 8009a72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a74:	2200      	movs	r2, #0
 8009a76:	6042      	str	r2, [r0, #4]
 8009a78:	2204      	movs	r2, #4
 8009a7a:	f102 0614 	add.w	r6, r2, #20
 8009a7e:	429e      	cmp	r6, r3
 8009a80:	6841      	ldr	r1, [r0, #4]
 8009a82:	d93d      	bls.n	8009b00 <_dtoa_r+0x318>
 8009a84:	4620      	mov	r0, r4
 8009a86:	f001 f83d 	bl	800ab04 <_Balloc>
 8009a8a:	9001      	str	r0, [sp, #4]
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d13b      	bne.n	8009b08 <_dtoa_r+0x320>
 8009a90:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <_dtoa_r+0x2f0>)
 8009a92:	4602      	mov	r2, r0
 8009a94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a98:	e6c0      	b.n	800981c <_dtoa_r+0x34>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e7df      	b.n	8009a5e <_dtoa_r+0x276>
 8009a9e:	bf00      	nop
 8009aa0:	636f4361 	.word	0x636f4361
 8009aa4:	3fd287a7 	.word	0x3fd287a7
 8009aa8:	8b60c8b3 	.word	0x8b60c8b3
 8009aac:	3fc68a28 	.word	0x3fc68a28
 8009ab0:	509f79fb 	.word	0x509f79fb
 8009ab4:	3fd34413 	.word	0x3fd34413
 8009ab8:	0800c52e 	.word	0x0800c52e
 8009abc:	0800c545 	.word	0x0800c545
 8009ac0:	7ff00000 	.word	0x7ff00000
 8009ac4:	0800c52a 	.word	0x0800c52a
 8009ac8:	0800c521 	.word	0x0800c521
 8009acc:	0800c3a5 	.word	0x0800c3a5
 8009ad0:	3ff80000 	.word	0x3ff80000
 8009ad4:	0800c6b0 	.word	0x0800c6b0
 8009ad8:	0800c5a0 	.word	0x0800c5a0
 8009adc:	2501      	movs	r5, #1
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9306      	str	r3, [sp, #24]
 8009ae2:	9508      	str	r5, [sp, #32]
 8009ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2312      	movs	r3, #18
 8009af0:	e7b0      	b.n	8009a54 <_dtoa_r+0x26c>
 8009af2:	2301      	movs	r3, #1
 8009af4:	9308      	str	r3, [sp, #32]
 8009af6:	e7f5      	b.n	8009ae4 <_dtoa_r+0x2fc>
 8009af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009afe:	e7b8      	b.n	8009a72 <_dtoa_r+0x28a>
 8009b00:	3101      	adds	r1, #1
 8009b02:	6041      	str	r1, [r0, #4]
 8009b04:	0052      	lsls	r2, r2, #1
 8009b06:	e7b8      	b.n	8009a7a <_dtoa_r+0x292>
 8009b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	2b0e      	cmp	r3, #14
 8009b12:	f200 809d 	bhi.w	8009c50 <_dtoa_r+0x468>
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	f000 809a 	beq.w	8009c50 <_dtoa_r+0x468>
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dd32      	ble.n	8009b88 <_dtoa_r+0x3a0>
 8009b22:	4ab7      	ldr	r2, [pc, #732]	; (8009e00 <_dtoa_r+0x618>)
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b30:	9b00      	ldr	r3, [sp, #0]
 8009b32:	05d8      	lsls	r0, r3, #23
 8009b34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b38:	d516      	bpl.n	8009b68 <_dtoa_r+0x380>
 8009b3a:	4bb2      	ldr	r3, [pc, #712]	; (8009e04 <_dtoa_r+0x61c>)
 8009b3c:	ec51 0b19 	vmov	r0, r1, d9
 8009b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b44:	f7f6 fe8a 	bl	800085c <__aeabi_ddiv>
 8009b48:	f007 070f 	and.w	r7, r7, #15
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	468b      	mov	fp, r1
 8009b50:	2503      	movs	r5, #3
 8009b52:	4eac      	ldr	r6, [pc, #688]	; (8009e04 <_dtoa_r+0x61c>)
 8009b54:	b957      	cbnz	r7, 8009b6c <_dtoa_r+0x384>
 8009b56:	4642      	mov	r2, r8
 8009b58:	464b      	mov	r3, r9
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	f7f6 fe7d 	bl	800085c <__aeabi_ddiv>
 8009b62:	4682      	mov	sl, r0
 8009b64:	468b      	mov	fp, r1
 8009b66:	e028      	b.n	8009bba <_dtoa_r+0x3d2>
 8009b68:	2502      	movs	r5, #2
 8009b6a:	e7f2      	b.n	8009b52 <_dtoa_r+0x36a>
 8009b6c:	07f9      	lsls	r1, r7, #31
 8009b6e:	d508      	bpl.n	8009b82 <_dtoa_r+0x39a>
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b78:	f7f6 fd46 	bl	8000608 <__aeabi_dmul>
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	4680      	mov	r8, r0
 8009b80:	4689      	mov	r9, r1
 8009b82:	107f      	asrs	r7, r7, #1
 8009b84:	3608      	adds	r6, #8
 8009b86:	e7e5      	b.n	8009b54 <_dtoa_r+0x36c>
 8009b88:	f000 809b 	beq.w	8009cc2 <_dtoa_r+0x4da>
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	4f9d      	ldr	r7, [pc, #628]	; (8009e04 <_dtoa_r+0x61c>)
 8009b90:	425e      	negs	r6, r3
 8009b92:	4b9b      	ldr	r3, [pc, #620]	; (8009e00 <_dtoa_r+0x618>)
 8009b94:	f006 020f 	and.w	r2, r6, #15
 8009b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	ec51 0b19 	vmov	r0, r1, d9
 8009ba4:	f7f6 fd30 	bl	8000608 <__aeabi_dmul>
 8009ba8:	1136      	asrs	r6, r6, #4
 8009baa:	4682      	mov	sl, r0
 8009bac:	468b      	mov	fp, r1
 8009bae:	2300      	movs	r3, #0
 8009bb0:	2502      	movs	r5, #2
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	d17a      	bne.n	8009cac <_dtoa_r+0x4c4>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1d3      	bne.n	8009b62 <_dtoa_r+0x37a>
 8009bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8082 	beq.w	8009cc6 <_dtoa_r+0x4de>
 8009bc2:	4b91      	ldr	r3, [pc, #580]	; (8009e08 <_dtoa_r+0x620>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	4659      	mov	r1, fp
 8009bca:	f7f6 ff8f 	bl	8000aec <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d079      	beq.n	8009cc6 <_dtoa_r+0x4de>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d076      	beq.n	8009cc6 <_dtoa_r+0x4de>
 8009bd8:	9b02      	ldr	r3, [sp, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dd36      	ble.n	8009c4c <_dtoa_r+0x464>
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	4650      	mov	r0, sl
 8009be2:	4659      	mov	r1, fp
 8009be4:	1e5f      	subs	r7, r3, #1
 8009be6:	2200      	movs	r2, #0
 8009be8:	4b88      	ldr	r3, [pc, #544]	; (8009e0c <_dtoa_r+0x624>)
 8009bea:	f7f6 fd0d 	bl	8000608 <__aeabi_dmul>
 8009bee:	9e02      	ldr	r6, [sp, #8]
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f7f6 fc9c 	bl	8000534 <__aeabi_i2d>
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	465b      	mov	r3, fp
 8009c00:	f7f6 fd02 	bl	8000608 <__aeabi_dmul>
 8009c04:	4b82      	ldr	r3, [pc, #520]	; (8009e10 <_dtoa_r+0x628>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	f7f6 fb48 	bl	800029c <__adddf3>
 8009c0c:	46d0      	mov	r8, sl
 8009c0e:	46d9      	mov	r9, fp
 8009c10:	4682      	mov	sl, r0
 8009c12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d158      	bne.n	8009ccc <_dtoa_r+0x4e4>
 8009c1a:	4b7e      	ldr	r3, [pc, #504]	; (8009e14 <_dtoa_r+0x62c>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f6 fb39 	bl	8000298 <__aeabi_dsub>
 8009c26:	4652      	mov	r2, sl
 8009c28:	465b      	mov	r3, fp
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	f7f6 ff7b 	bl	8000b28 <__aeabi_dcmpgt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f040 8295 	bne.w	800a162 <_dtoa_r+0x97a>
 8009c38:	4652      	mov	r2, sl
 8009c3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c3e:	4640      	mov	r0, r8
 8009c40:	4649      	mov	r1, r9
 8009c42:	f7f6 ff53 	bl	8000aec <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f040 8289 	bne.w	800a15e <_dtoa_r+0x976>
 8009c4c:	ec5b ab19 	vmov	sl, fp, d9
 8009c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f2c0 8148 	blt.w	8009ee8 <_dtoa_r+0x700>
 8009c58:	9a00      	ldr	r2, [sp, #0]
 8009c5a:	2a0e      	cmp	r2, #14
 8009c5c:	f300 8144 	bgt.w	8009ee8 <_dtoa_r+0x700>
 8009c60:	4b67      	ldr	r3, [pc, #412]	; (8009e00 <_dtoa_r+0x618>)
 8009c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f280 80d5 	bge.w	8009e1c <_dtoa_r+0x634>
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f300 80d1 	bgt.w	8009e1c <_dtoa_r+0x634>
 8009c7a:	f040 826f 	bne.w	800a15c <_dtoa_r+0x974>
 8009c7e:	4b65      	ldr	r3, [pc, #404]	; (8009e14 <_dtoa_r+0x62c>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 fcbf 	bl	8000608 <__aeabi_dmul>
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	f7f6 ff41 	bl	8000b14 <__aeabi_dcmpge>
 8009c92:	9e03      	ldr	r6, [sp, #12]
 8009c94:	4637      	mov	r7, r6
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f040 8245 	bne.w	800a126 <_dtoa_r+0x93e>
 8009c9c:	9d01      	ldr	r5, [sp, #4]
 8009c9e:	2331      	movs	r3, #49	; 0x31
 8009ca0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	e240      	b.n	800a12e <_dtoa_r+0x946>
 8009cac:	07f2      	lsls	r2, r6, #31
 8009cae:	d505      	bpl.n	8009cbc <_dtoa_r+0x4d4>
 8009cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb4:	f7f6 fca8 	bl	8000608 <__aeabi_dmul>
 8009cb8:	3501      	adds	r5, #1
 8009cba:	2301      	movs	r3, #1
 8009cbc:	1076      	asrs	r6, r6, #1
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	e777      	b.n	8009bb2 <_dtoa_r+0x3ca>
 8009cc2:	2502      	movs	r5, #2
 8009cc4:	e779      	b.n	8009bba <_dtoa_r+0x3d2>
 8009cc6:	9f00      	ldr	r7, [sp, #0]
 8009cc8:	9e03      	ldr	r6, [sp, #12]
 8009cca:	e794      	b.n	8009bf6 <_dtoa_r+0x40e>
 8009ccc:	9901      	ldr	r1, [sp, #4]
 8009cce:	4b4c      	ldr	r3, [pc, #304]	; (8009e00 <_dtoa_r+0x618>)
 8009cd0:	4431      	add	r1, r6
 8009cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8009cd4:	9908      	ldr	r1, [sp, #32]
 8009cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	d043      	beq.n	8009d6a <_dtoa_r+0x582>
 8009ce2:	494d      	ldr	r1, [pc, #308]	; (8009e18 <_dtoa_r+0x630>)
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f7f6 fdb9 	bl	800085c <__aeabi_ddiv>
 8009cea:	4652      	mov	r2, sl
 8009cec:	465b      	mov	r3, fp
 8009cee:	f7f6 fad3 	bl	8000298 <__aeabi_dsub>
 8009cf2:	9d01      	ldr	r5, [sp, #4]
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	468b      	mov	fp, r1
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7f6 ff34 	bl	8000b68 <__aeabi_d2iz>
 8009d00:	4606      	mov	r6, r0
 8009d02:	f7f6 fc17 	bl	8000534 <__aeabi_i2d>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f7f6 fac3 	bl	8000298 <__aeabi_dsub>
 8009d12:	3630      	adds	r6, #48	; 0x30
 8009d14:	f805 6b01 	strb.w	r6, [r5], #1
 8009d18:	4652      	mov	r2, sl
 8009d1a:	465b      	mov	r3, fp
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	4689      	mov	r9, r1
 8009d20:	f7f6 fee4 	bl	8000aec <__aeabi_dcmplt>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d163      	bne.n	8009df0 <_dtoa_r+0x608>
 8009d28:	4642      	mov	r2, r8
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	4936      	ldr	r1, [pc, #216]	; (8009e08 <_dtoa_r+0x620>)
 8009d2e:	2000      	movs	r0, #0
 8009d30:	f7f6 fab2 	bl	8000298 <__aeabi_dsub>
 8009d34:	4652      	mov	r2, sl
 8009d36:	465b      	mov	r3, fp
 8009d38:	f7f6 fed8 	bl	8000aec <__aeabi_dcmplt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f040 80b5 	bne.w	8009eac <_dtoa_r+0x6c4>
 8009d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d44:	429d      	cmp	r5, r3
 8009d46:	d081      	beq.n	8009c4c <_dtoa_r+0x464>
 8009d48:	4b30      	ldr	r3, [pc, #192]	; (8009e0c <_dtoa_r+0x624>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	4659      	mov	r1, fp
 8009d50:	f7f6 fc5a 	bl	8000608 <__aeabi_dmul>
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <_dtoa_r+0x624>)
 8009d56:	4682      	mov	sl, r0
 8009d58:	468b      	mov	fp, r1
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f7f6 fc52 	bl	8000608 <__aeabi_dmul>
 8009d64:	4680      	mov	r8, r0
 8009d66:	4689      	mov	r9, r1
 8009d68:	e7c6      	b.n	8009cf8 <_dtoa_r+0x510>
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	f7f6 fc4b 	bl	8000608 <__aeabi_dmul>
 8009d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d74:	9d01      	ldr	r5, [sp, #4]
 8009d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d78:	4682      	mov	sl, r0
 8009d7a:	468b      	mov	fp, r1
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f7f6 fef2 	bl	8000b68 <__aeabi_d2iz>
 8009d84:	4606      	mov	r6, r0
 8009d86:	f7f6 fbd5 	bl	8000534 <__aeabi_i2d>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fa80 	bl	8000298 <__aeabi_dsub>
 8009d98:	f805 6b01 	strb.w	r6, [r5], #1
 8009d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	4680      	mov	r8, r0
 8009da2:	4689      	mov	r9, r1
 8009da4:	f04f 0200 	mov.w	r2, #0
 8009da8:	d124      	bne.n	8009df4 <_dtoa_r+0x60c>
 8009daa:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <_dtoa_r+0x630>)
 8009dac:	4650      	mov	r0, sl
 8009dae:	4659      	mov	r1, fp
 8009db0:	f7f6 fa74 	bl	800029c <__adddf3>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4640      	mov	r0, r8
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f7f6 feb4 	bl	8000b28 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d173      	bne.n	8009eac <_dtoa_r+0x6c4>
 8009dc4:	4652      	mov	r2, sl
 8009dc6:	465b      	mov	r3, fp
 8009dc8:	4913      	ldr	r1, [pc, #76]	; (8009e18 <_dtoa_r+0x630>)
 8009dca:	2000      	movs	r0, #0
 8009dcc:	f7f6 fa64 	bl	8000298 <__aeabi_dsub>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fe88 	bl	8000aec <__aeabi_dcmplt>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	f43f af35 	beq.w	8009c4c <_dtoa_r+0x464>
 8009de2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009de4:	1e6b      	subs	r3, r5, #1
 8009de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dec:	2b30      	cmp	r3, #48	; 0x30
 8009dee:	d0f8      	beq.n	8009de2 <_dtoa_r+0x5fa>
 8009df0:	9700      	str	r7, [sp, #0]
 8009df2:	e049      	b.n	8009e88 <_dtoa_r+0x6a0>
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_dtoa_r+0x624>)
 8009df6:	f7f6 fc07 	bl	8000608 <__aeabi_dmul>
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	e7bd      	b.n	8009d7c <_dtoa_r+0x594>
 8009e00:	0800c6b0 	.word	0x0800c6b0
 8009e04:	0800c688 	.word	0x0800c688
 8009e08:	3ff00000 	.word	0x3ff00000
 8009e0c:	40240000 	.word	0x40240000
 8009e10:	401c0000 	.word	0x401c0000
 8009e14:	40140000 	.word	0x40140000
 8009e18:	3fe00000 	.word	0x3fe00000
 8009e1c:	9d01      	ldr	r5, [sp, #4]
 8009e1e:	4656      	mov	r6, sl
 8009e20:	465f      	mov	r7, fp
 8009e22:	4642      	mov	r2, r8
 8009e24:	464b      	mov	r3, r9
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fd17 	bl	800085c <__aeabi_ddiv>
 8009e2e:	f7f6 fe9b 	bl	8000b68 <__aeabi_d2iz>
 8009e32:	4682      	mov	sl, r0
 8009e34:	f7f6 fb7e 	bl	8000534 <__aeabi_i2d>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4630      	mov	r0, r6
 8009e46:	4639      	mov	r1, r7
 8009e48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e4c:	f7f6 fa24 	bl	8000298 <__aeabi_dsub>
 8009e50:	f805 6b01 	strb.w	r6, [r5], #1
 8009e54:	9e01      	ldr	r6, [sp, #4]
 8009e56:	9f03      	ldr	r7, [sp, #12]
 8009e58:	1bae      	subs	r6, r5, r6
 8009e5a:	42b7      	cmp	r7, r6
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	d135      	bne.n	8009ece <_dtoa_r+0x6e6>
 8009e62:	f7f6 fa1b 	bl	800029c <__adddf3>
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	f7f6 fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009e72:	b9d0      	cbnz	r0, 8009eaa <_dtoa_r+0x6c2>
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e80:	b110      	cbz	r0, 8009e88 <_dtoa_r+0x6a0>
 8009e82:	f01a 0f01 	tst.w	sl, #1
 8009e86:	d110      	bne.n	8009eaa <_dtoa_r+0x6c2>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	ee18 1a10 	vmov	r1, s16
 8009e8e:	f000 fe79 	bl	800ab84 <_Bfree>
 8009e92:	2300      	movs	r3, #0
 8009e94:	9800      	ldr	r0, [sp, #0]
 8009e96:	702b      	strb	r3, [r5, #0]
 8009e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	6018      	str	r0, [r3, #0]
 8009e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f43f acf1 	beq.w	8009888 <_dtoa_r+0xa0>
 8009ea6:	601d      	str	r5, [r3, #0]
 8009ea8:	e4ee      	b.n	8009888 <_dtoa_r+0xa0>
 8009eaa:	9f00      	ldr	r7, [sp, #0]
 8009eac:	462b      	mov	r3, r5
 8009eae:	461d      	mov	r5, r3
 8009eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eb4:	2a39      	cmp	r2, #57	; 0x39
 8009eb6:	d106      	bne.n	8009ec6 <_dtoa_r+0x6de>
 8009eb8:	9a01      	ldr	r2, [sp, #4]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d1f7      	bne.n	8009eae <_dtoa_r+0x6c6>
 8009ebe:	9901      	ldr	r1, [sp, #4]
 8009ec0:	2230      	movs	r2, #48	; 0x30
 8009ec2:	3701      	adds	r7, #1
 8009ec4:	700a      	strb	r2, [r1, #0]
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	3201      	adds	r2, #1
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e790      	b.n	8009df0 <_dtoa_r+0x608>
 8009ece:	4ba6      	ldr	r3, [pc, #664]	; (800a168 <_dtoa_r+0x980>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f7f6 fb99 	bl	8000608 <__aeabi_dmul>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	f7f6 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d09d      	beq.n	8009e22 <_dtoa_r+0x63a>
 8009ee6:	e7cf      	b.n	8009e88 <_dtoa_r+0x6a0>
 8009ee8:	9a08      	ldr	r2, [sp, #32]
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	f000 80d7 	beq.w	800a09e <_dtoa_r+0x8b6>
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	2a01      	cmp	r2, #1
 8009ef4:	f300 80ba 	bgt.w	800a06c <_dtoa_r+0x884>
 8009ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	f000 80b2 	beq.w	800a064 <_dtoa_r+0x87c>
 8009f00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f04:	9e07      	ldr	r6, [sp, #28]
 8009f06:	9d04      	ldr	r5, [sp, #16]
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	441a      	add	r2, r3
 8009f0c:	9204      	str	r2, [sp, #16]
 8009f0e:	9a05      	ldr	r2, [sp, #20]
 8009f10:	2101      	movs	r1, #1
 8009f12:	441a      	add	r2, r3
 8009f14:	4620      	mov	r0, r4
 8009f16:	9205      	str	r2, [sp, #20]
 8009f18:	f000 ff36 	bl	800ad88 <__i2b>
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	dd0c      	ble.n	8009f3c <_dtoa_r+0x754>
 8009f22:	9b05      	ldr	r3, [sp, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd09      	ble.n	8009f3c <_dtoa_r+0x754>
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	9a04      	ldr	r2, [sp, #16]
 8009f2c:	bfa8      	it	ge
 8009f2e:	462b      	movge	r3, r5
 8009f30:	1ad2      	subs	r2, r2, r3
 8009f32:	9204      	str	r2, [sp, #16]
 8009f34:	9a05      	ldr	r2, [sp, #20]
 8009f36:	1aed      	subs	r5, r5, r3
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	b31b      	cbz	r3, 8009f88 <_dtoa_r+0x7a0>
 8009f40:	9b08      	ldr	r3, [sp, #32]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 80af 	beq.w	800a0a6 <_dtoa_r+0x8be>
 8009f48:	2e00      	cmp	r6, #0
 8009f4a:	dd13      	ble.n	8009f74 <_dtoa_r+0x78c>
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	4632      	mov	r2, r6
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 ffd9 	bl	800af08 <__pow5mult>
 8009f56:	ee18 2a10 	vmov	r2, s16
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 ff28 	bl	800adb4 <__multiply>
 8009f64:	ee18 1a10 	vmov	r1, s16
 8009f68:	4680      	mov	r8, r0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fe0a 	bl	800ab84 <_Bfree>
 8009f70:	ee08 8a10 	vmov	s16, r8
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	1b9a      	subs	r2, r3, r6
 8009f78:	d006      	beq.n	8009f88 <_dtoa_r+0x7a0>
 8009f7a:	ee18 1a10 	vmov	r1, s16
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 ffc2 	bl	800af08 <__pow5mult>
 8009f84:	ee08 0a10 	vmov	s16, r0
 8009f88:	2101      	movs	r1, #1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fefc 	bl	800ad88 <__i2b>
 8009f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	4606      	mov	r6, r0
 8009f96:	f340 8088 	ble.w	800a0aa <_dtoa_r+0x8c2>
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4601      	mov	r1, r0
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 ffb2 	bl	800af08 <__pow5mult>
 8009fa4:	9b06      	ldr	r3, [sp, #24]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	4606      	mov	r6, r0
 8009faa:	f340 8081 	ble.w	800a0b0 <_dtoa_r+0x8c8>
 8009fae:	f04f 0800 	mov.w	r8, #0
 8009fb2:	6933      	ldr	r3, [r6, #16]
 8009fb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fb8:	6918      	ldr	r0, [r3, #16]
 8009fba:	f000 fe95 	bl	800ace8 <__hi0bits>
 8009fbe:	f1c0 0020 	rsb	r0, r0, #32
 8009fc2:	9b05      	ldr	r3, [sp, #20]
 8009fc4:	4418      	add	r0, r3
 8009fc6:	f010 001f 	ands.w	r0, r0, #31
 8009fca:	f000 8092 	beq.w	800a0f2 <_dtoa_r+0x90a>
 8009fce:	f1c0 0320 	rsb	r3, r0, #32
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	f340 808a 	ble.w	800a0ec <_dtoa_r+0x904>
 8009fd8:	f1c0 001c 	rsb	r0, r0, #28
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	4403      	add	r3, r0
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	9b05      	ldr	r3, [sp, #20]
 8009fe4:	4403      	add	r3, r0
 8009fe6:	4405      	add	r5, r0
 8009fe8:	9305      	str	r3, [sp, #20]
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd07      	ble.n	800a000 <_dtoa_r+0x818>
 8009ff0:	ee18 1a10 	vmov	r1, s16
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 ffe0 	bl	800afbc <__lshift>
 8009ffc:	ee08 0a10 	vmov	s16, r0
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd05      	ble.n	800a012 <_dtoa_r+0x82a>
 800a006:	4631      	mov	r1, r6
 800a008:	461a      	mov	r2, r3
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 ffd6 	bl	800afbc <__lshift>
 800a010:	4606      	mov	r6, r0
 800a012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d06e      	beq.n	800a0f6 <_dtoa_r+0x90e>
 800a018:	ee18 0a10 	vmov	r0, s16
 800a01c:	4631      	mov	r1, r6
 800a01e:	f001 f83d 	bl	800b09c <__mcmp>
 800a022:	2800      	cmp	r0, #0
 800a024:	da67      	bge.n	800a0f6 <_dtoa_r+0x90e>
 800a026:	9b00      	ldr	r3, [sp, #0]
 800a028:	3b01      	subs	r3, #1
 800a02a:	ee18 1a10 	vmov	r1, s16
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	220a      	movs	r2, #10
 800a032:	2300      	movs	r3, #0
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fdc7 	bl	800abc8 <__multadd>
 800a03a:	9b08      	ldr	r3, [sp, #32]
 800a03c:	ee08 0a10 	vmov	s16, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 81b1 	beq.w	800a3a8 <_dtoa_r+0xbc0>
 800a046:	2300      	movs	r3, #0
 800a048:	4639      	mov	r1, r7
 800a04a:	220a      	movs	r2, #10
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fdbb 	bl	800abc8 <__multadd>
 800a052:	9b02      	ldr	r3, [sp, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	4607      	mov	r7, r0
 800a058:	f300 808e 	bgt.w	800a178 <_dtoa_r+0x990>
 800a05c:	9b06      	ldr	r3, [sp, #24]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	dc51      	bgt.n	800a106 <_dtoa_r+0x91e>
 800a062:	e089      	b.n	800a178 <_dtoa_r+0x990>
 800a064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a06a:	e74b      	b.n	8009f04 <_dtoa_r+0x71c>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	1e5e      	subs	r6, r3, #1
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	42b3      	cmp	r3, r6
 800a074:	bfbf      	itttt	lt
 800a076:	9b07      	ldrlt	r3, [sp, #28]
 800a078:	9607      	strlt	r6, [sp, #28]
 800a07a:	1af2      	sublt	r2, r6, r3
 800a07c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a07e:	bfb6      	itet	lt
 800a080:	189b      	addlt	r3, r3, r2
 800a082:	1b9e      	subge	r6, r3, r6
 800a084:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	bfb8      	it	lt
 800a08a:	2600      	movlt	r6, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfb7      	itett	lt
 800a090:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a094:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a098:	1a9d      	sublt	r5, r3, r2
 800a09a:	2300      	movlt	r3, #0
 800a09c:	e734      	b.n	8009f08 <_dtoa_r+0x720>
 800a09e:	9e07      	ldr	r6, [sp, #28]
 800a0a0:	9d04      	ldr	r5, [sp, #16]
 800a0a2:	9f08      	ldr	r7, [sp, #32]
 800a0a4:	e73b      	b.n	8009f1e <_dtoa_r+0x736>
 800a0a6:	9a07      	ldr	r2, [sp, #28]
 800a0a8:	e767      	b.n	8009f7a <_dtoa_r+0x792>
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	dc18      	bgt.n	800a0e2 <_dtoa_r+0x8fa>
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	d115      	bne.n	800a0e2 <_dtoa_r+0x8fa>
 800a0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ba:	b993      	cbnz	r3, 800a0e2 <_dtoa_r+0x8fa>
 800a0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0c0:	0d1b      	lsrs	r3, r3, #20
 800a0c2:	051b      	lsls	r3, r3, #20
 800a0c4:	b183      	cbz	r3, 800a0e8 <_dtoa_r+0x900>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	9b05      	ldr	r3, [sp, #20]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	9305      	str	r3, [sp, #20]
 800a0d2:	f04f 0801 	mov.w	r8, #1
 800a0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f47f af6a 	bne.w	8009fb2 <_dtoa_r+0x7ca>
 800a0de:	2001      	movs	r0, #1
 800a0e0:	e76f      	b.n	8009fc2 <_dtoa_r+0x7da>
 800a0e2:	f04f 0800 	mov.w	r8, #0
 800a0e6:	e7f6      	b.n	800a0d6 <_dtoa_r+0x8ee>
 800a0e8:	4698      	mov	r8, r3
 800a0ea:	e7f4      	b.n	800a0d6 <_dtoa_r+0x8ee>
 800a0ec:	f43f af7d 	beq.w	8009fea <_dtoa_r+0x802>
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	301c      	adds	r0, #28
 800a0f4:	e772      	b.n	8009fdc <_dtoa_r+0x7f4>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dc37      	bgt.n	800a16c <_dtoa_r+0x984>
 800a0fc:	9b06      	ldr	r3, [sp, #24]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	dd34      	ble.n	800a16c <_dtoa_r+0x984>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	b96b      	cbnz	r3, 800a126 <_dtoa_r+0x93e>
 800a10a:	4631      	mov	r1, r6
 800a10c:	2205      	movs	r2, #5
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fd5a 	bl	800abc8 <__multadd>
 800a114:	4601      	mov	r1, r0
 800a116:	4606      	mov	r6, r0
 800a118:	ee18 0a10 	vmov	r0, s16
 800a11c:	f000 ffbe 	bl	800b09c <__mcmp>
 800a120:	2800      	cmp	r0, #0
 800a122:	f73f adbb 	bgt.w	8009c9c <_dtoa_r+0x4b4>
 800a126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a128:	9d01      	ldr	r5, [sp, #4]
 800a12a:	43db      	mvns	r3, r3
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	f04f 0800 	mov.w	r8, #0
 800a132:	4631      	mov	r1, r6
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fd25 	bl	800ab84 <_Bfree>
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	f43f aea4 	beq.w	8009e88 <_dtoa_r+0x6a0>
 800a140:	f1b8 0f00 	cmp.w	r8, #0
 800a144:	d005      	beq.n	800a152 <_dtoa_r+0x96a>
 800a146:	45b8      	cmp	r8, r7
 800a148:	d003      	beq.n	800a152 <_dtoa_r+0x96a>
 800a14a:	4641      	mov	r1, r8
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 fd19 	bl	800ab84 <_Bfree>
 800a152:	4639      	mov	r1, r7
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fd15 	bl	800ab84 <_Bfree>
 800a15a:	e695      	b.n	8009e88 <_dtoa_r+0x6a0>
 800a15c:	2600      	movs	r6, #0
 800a15e:	4637      	mov	r7, r6
 800a160:	e7e1      	b.n	800a126 <_dtoa_r+0x93e>
 800a162:	9700      	str	r7, [sp, #0]
 800a164:	4637      	mov	r7, r6
 800a166:	e599      	b.n	8009c9c <_dtoa_r+0x4b4>
 800a168:	40240000 	.word	0x40240000
 800a16c:	9b08      	ldr	r3, [sp, #32]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 80ca 	beq.w	800a308 <_dtoa_r+0xb20>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	9302      	str	r3, [sp, #8]
 800a178:	2d00      	cmp	r5, #0
 800a17a:	dd05      	ble.n	800a188 <_dtoa_r+0x9a0>
 800a17c:	4639      	mov	r1, r7
 800a17e:	462a      	mov	r2, r5
 800a180:	4620      	mov	r0, r4
 800a182:	f000 ff1b 	bl	800afbc <__lshift>
 800a186:	4607      	mov	r7, r0
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	d05b      	beq.n	800a246 <_dtoa_r+0xa5e>
 800a18e:	6879      	ldr	r1, [r7, #4]
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fcb7 	bl	800ab04 <_Balloc>
 800a196:	4605      	mov	r5, r0
 800a198:	b928      	cbnz	r0, 800a1a6 <_dtoa_r+0x9be>
 800a19a:	4b87      	ldr	r3, [pc, #540]	; (800a3b8 <_dtoa_r+0xbd0>)
 800a19c:	4602      	mov	r2, r0
 800a19e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1a2:	f7ff bb3b 	b.w	800981c <_dtoa_r+0x34>
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	3202      	adds	r2, #2
 800a1aa:	0092      	lsls	r2, r2, #2
 800a1ac:	f107 010c 	add.w	r1, r7, #12
 800a1b0:	300c      	adds	r0, #12
 800a1b2:	f000 fc8d 	bl	800aad0 <memcpy>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fefe 	bl	800afbc <__lshift>
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	f103 0901 	add.w	r9, r3, #1
 800a1c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	9305      	str	r3, [sp, #20]
 800a1ce:	f00a 0301 	and.w	r3, sl, #1
 800a1d2:	46b8      	mov	r8, r7
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	4631      	mov	r1, r6
 800a1da:	ee18 0a10 	vmov	r0, s16
 800a1de:	f7ff fa77 	bl	80096d0 <quorem>
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	9002      	str	r0, [sp, #8]
 800a1e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1ea:	ee18 0a10 	vmov	r0, s16
 800a1ee:	f000 ff55 	bl	800b09c <__mcmp>
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	9003      	str	r0, [sp, #12]
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 ff6b 	bl	800b0d4 <__mdiff>
 800a1fe:	68c2      	ldr	r2, [r0, #12]
 800a200:	f109 3bff 	add.w	fp, r9, #4294967295
 800a204:	4605      	mov	r5, r0
 800a206:	bb02      	cbnz	r2, 800a24a <_dtoa_r+0xa62>
 800a208:	4601      	mov	r1, r0
 800a20a:	ee18 0a10 	vmov	r0, s16
 800a20e:	f000 ff45 	bl	800b09c <__mcmp>
 800a212:	4602      	mov	r2, r0
 800a214:	4629      	mov	r1, r5
 800a216:	4620      	mov	r0, r4
 800a218:	9207      	str	r2, [sp, #28]
 800a21a:	f000 fcb3 	bl	800ab84 <_Bfree>
 800a21e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a222:	ea43 0102 	orr.w	r1, r3, r2
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	430b      	orrs	r3, r1
 800a22a:	464d      	mov	r5, r9
 800a22c:	d10f      	bne.n	800a24e <_dtoa_r+0xa66>
 800a22e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a232:	d02a      	beq.n	800a28a <_dtoa_r+0xaa2>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd02      	ble.n	800a240 <_dtoa_r+0xa58>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a240:	f88b a000 	strb.w	sl, [fp]
 800a244:	e775      	b.n	800a132 <_dtoa_r+0x94a>
 800a246:	4638      	mov	r0, r7
 800a248:	e7ba      	b.n	800a1c0 <_dtoa_r+0x9d8>
 800a24a:	2201      	movs	r2, #1
 800a24c:	e7e2      	b.n	800a214 <_dtoa_r+0xa2c>
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	db04      	blt.n	800a25e <_dtoa_r+0xa76>
 800a254:	9906      	ldr	r1, [sp, #24]
 800a256:	430b      	orrs	r3, r1
 800a258:	9904      	ldr	r1, [sp, #16]
 800a25a:	430b      	orrs	r3, r1
 800a25c:	d122      	bne.n	800a2a4 <_dtoa_r+0xabc>
 800a25e:	2a00      	cmp	r2, #0
 800a260:	ddee      	ble.n	800a240 <_dtoa_r+0xa58>
 800a262:	ee18 1a10 	vmov	r1, s16
 800a266:	2201      	movs	r2, #1
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fea7 	bl	800afbc <__lshift>
 800a26e:	4631      	mov	r1, r6
 800a270:	ee08 0a10 	vmov	s16, r0
 800a274:	f000 ff12 	bl	800b09c <__mcmp>
 800a278:	2800      	cmp	r0, #0
 800a27a:	dc03      	bgt.n	800a284 <_dtoa_r+0xa9c>
 800a27c:	d1e0      	bne.n	800a240 <_dtoa_r+0xa58>
 800a27e:	f01a 0f01 	tst.w	sl, #1
 800a282:	d0dd      	beq.n	800a240 <_dtoa_r+0xa58>
 800a284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a288:	d1d7      	bne.n	800a23a <_dtoa_r+0xa52>
 800a28a:	2339      	movs	r3, #57	; 0x39
 800a28c:	f88b 3000 	strb.w	r3, [fp]
 800a290:	462b      	mov	r3, r5
 800a292:	461d      	mov	r5, r3
 800a294:	3b01      	subs	r3, #1
 800a296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a29a:	2a39      	cmp	r2, #57	; 0x39
 800a29c:	d071      	beq.n	800a382 <_dtoa_r+0xb9a>
 800a29e:	3201      	adds	r2, #1
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e746      	b.n	800a132 <_dtoa_r+0x94a>
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	dd07      	ble.n	800a2b8 <_dtoa_r+0xad0>
 800a2a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2ac:	d0ed      	beq.n	800a28a <_dtoa_r+0xaa2>
 800a2ae:	f10a 0301 	add.w	r3, sl, #1
 800a2b2:	f88b 3000 	strb.w	r3, [fp]
 800a2b6:	e73c      	b.n	800a132 <_dtoa_r+0x94a>
 800a2b8:	9b05      	ldr	r3, [sp, #20]
 800a2ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2be:	4599      	cmp	r9, r3
 800a2c0:	d047      	beq.n	800a352 <_dtoa_r+0xb6a>
 800a2c2:	ee18 1a10 	vmov	r1, s16
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	220a      	movs	r2, #10
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 fc7c 	bl	800abc8 <__multadd>
 800a2d0:	45b8      	cmp	r8, r7
 800a2d2:	ee08 0a10 	vmov	s16, r0
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	f04f 020a 	mov.w	r2, #10
 800a2de:	4641      	mov	r1, r8
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	d106      	bne.n	800a2f2 <_dtoa_r+0xb0a>
 800a2e4:	f000 fc70 	bl	800abc8 <__multadd>
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	f109 0901 	add.w	r9, r9, #1
 800a2f0:	e772      	b.n	800a1d8 <_dtoa_r+0x9f0>
 800a2f2:	f000 fc69 	bl	800abc8 <__multadd>
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	220a      	movs	r2, #10
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 fc62 	bl	800abc8 <__multadd>
 800a304:	4607      	mov	r7, r0
 800a306:	e7f1      	b.n	800a2ec <_dtoa_r+0xb04>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	9302      	str	r3, [sp, #8]
 800a30c:	9d01      	ldr	r5, [sp, #4]
 800a30e:	ee18 0a10 	vmov	r0, s16
 800a312:	4631      	mov	r1, r6
 800a314:	f7ff f9dc 	bl	80096d0 <quorem>
 800a318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	f805 ab01 	strb.w	sl, [r5], #1
 800a322:	1aea      	subs	r2, r5, r3
 800a324:	9b02      	ldr	r3, [sp, #8]
 800a326:	4293      	cmp	r3, r2
 800a328:	dd09      	ble.n	800a33e <_dtoa_r+0xb56>
 800a32a:	ee18 1a10 	vmov	r1, s16
 800a32e:	2300      	movs	r3, #0
 800a330:	220a      	movs	r2, #10
 800a332:	4620      	mov	r0, r4
 800a334:	f000 fc48 	bl	800abc8 <__multadd>
 800a338:	ee08 0a10 	vmov	s16, r0
 800a33c:	e7e7      	b.n	800a30e <_dtoa_r+0xb26>
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfc8      	it	gt
 800a344:	461d      	movgt	r5, r3
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	bfd8      	it	le
 800a34a:	2501      	movle	r5, #1
 800a34c:	441d      	add	r5, r3
 800a34e:	f04f 0800 	mov.w	r8, #0
 800a352:	ee18 1a10 	vmov	r1, s16
 800a356:	2201      	movs	r2, #1
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fe2f 	bl	800afbc <__lshift>
 800a35e:	4631      	mov	r1, r6
 800a360:	ee08 0a10 	vmov	s16, r0
 800a364:	f000 fe9a 	bl	800b09c <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dc91      	bgt.n	800a290 <_dtoa_r+0xaa8>
 800a36c:	d102      	bne.n	800a374 <_dtoa_r+0xb8c>
 800a36e:	f01a 0f01 	tst.w	sl, #1
 800a372:	d18d      	bne.n	800a290 <_dtoa_r+0xaa8>
 800a374:	462b      	mov	r3, r5
 800a376:	461d      	mov	r5, r3
 800a378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a37c:	2a30      	cmp	r2, #48	; 0x30
 800a37e:	d0fa      	beq.n	800a376 <_dtoa_r+0xb8e>
 800a380:	e6d7      	b.n	800a132 <_dtoa_r+0x94a>
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d184      	bne.n	800a292 <_dtoa_r+0xaaa>
 800a388:	9b00      	ldr	r3, [sp, #0]
 800a38a:	3301      	adds	r3, #1
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	2331      	movs	r3, #49	; 0x31
 800a390:	7013      	strb	r3, [r2, #0]
 800a392:	e6ce      	b.n	800a132 <_dtoa_r+0x94a>
 800a394:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <_dtoa_r+0xbd4>)
 800a396:	f7ff ba95 	b.w	80098c4 <_dtoa_r+0xdc>
 800a39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f47f aa6e 	bne.w	800987e <_dtoa_r+0x96>
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <_dtoa_r+0xbd8>)
 800a3a4:	f7ff ba8e 	b.w	80098c4 <_dtoa_r+0xdc>
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dcae      	bgt.n	800a30c <_dtoa_r+0xb24>
 800a3ae:	9b06      	ldr	r3, [sp, #24]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	f73f aea8 	bgt.w	800a106 <_dtoa_r+0x91e>
 800a3b6:	e7a9      	b.n	800a30c <_dtoa_r+0xb24>
 800a3b8:	0800c5a0 	.word	0x0800c5a0
 800a3bc:	0800c3a4 	.word	0x0800c3a4
 800a3c0:	0800c521 	.word	0x0800c521

0800a3c4 <rshift>:
 800a3c4:	6903      	ldr	r3, [r0, #16]
 800a3c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3d2:	f100 0414 	add.w	r4, r0, #20
 800a3d6:	dd45      	ble.n	800a464 <rshift+0xa0>
 800a3d8:	f011 011f 	ands.w	r1, r1, #31
 800a3dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3e4:	d10c      	bne.n	800a400 <rshift+0x3c>
 800a3e6:	f100 0710 	add.w	r7, r0, #16
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	42b1      	cmp	r1, r6
 800a3ee:	d334      	bcc.n	800a45a <rshift+0x96>
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	1eea      	subs	r2, r5, #3
 800a3f6:	4296      	cmp	r6, r2
 800a3f8:	bf38      	it	cc
 800a3fa:	2300      	movcc	r3, #0
 800a3fc:	4423      	add	r3, r4
 800a3fe:	e015      	b.n	800a42c <rshift+0x68>
 800a400:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a404:	f1c1 0820 	rsb	r8, r1, #32
 800a408:	40cf      	lsrs	r7, r1
 800a40a:	f105 0e04 	add.w	lr, r5, #4
 800a40e:	46a1      	mov	r9, r4
 800a410:	4576      	cmp	r6, lr
 800a412:	46f4      	mov	ip, lr
 800a414:	d815      	bhi.n	800a442 <rshift+0x7e>
 800a416:	1a9a      	subs	r2, r3, r2
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	3a04      	subs	r2, #4
 800a41c:	3501      	adds	r5, #1
 800a41e:	42ae      	cmp	r6, r5
 800a420:	bf38      	it	cc
 800a422:	2200      	movcc	r2, #0
 800a424:	18a3      	adds	r3, r4, r2
 800a426:	50a7      	str	r7, [r4, r2]
 800a428:	b107      	cbz	r7, 800a42c <rshift+0x68>
 800a42a:	3304      	adds	r3, #4
 800a42c:	1b1a      	subs	r2, r3, r4
 800a42e:	42a3      	cmp	r3, r4
 800a430:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a434:	bf08      	it	eq
 800a436:	2300      	moveq	r3, #0
 800a438:	6102      	str	r2, [r0, #16]
 800a43a:	bf08      	it	eq
 800a43c:	6143      	streq	r3, [r0, #20]
 800a43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a442:	f8dc c000 	ldr.w	ip, [ip]
 800a446:	fa0c fc08 	lsl.w	ip, ip, r8
 800a44a:	ea4c 0707 	orr.w	r7, ip, r7
 800a44e:	f849 7b04 	str.w	r7, [r9], #4
 800a452:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a456:	40cf      	lsrs	r7, r1
 800a458:	e7da      	b.n	800a410 <rshift+0x4c>
 800a45a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a45e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a462:	e7c3      	b.n	800a3ec <rshift+0x28>
 800a464:	4623      	mov	r3, r4
 800a466:	e7e1      	b.n	800a42c <rshift+0x68>

0800a468 <__hexdig_fun>:
 800a468:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a46c:	2b09      	cmp	r3, #9
 800a46e:	d802      	bhi.n	800a476 <__hexdig_fun+0xe>
 800a470:	3820      	subs	r0, #32
 800a472:	b2c0      	uxtb	r0, r0
 800a474:	4770      	bx	lr
 800a476:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d801      	bhi.n	800a482 <__hexdig_fun+0x1a>
 800a47e:	3847      	subs	r0, #71	; 0x47
 800a480:	e7f7      	b.n	800a472 <__hexdig_fun+0xa>
 800a482:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a486:	2b05      	cmp	r3, #5
 800a488:	d801      	bhi.n	800a48e <__hexdig_fun+0x26>
 800a48a:	3827      	subs	r0, #39	; 0x27
 800a48c:	e7f1      	b.n	800a472 <__hexdig_fun+0xa>
 800a48e:	2000      	movs	r0, #0
 800a490:	4770      	bx	lr
	...

0800a494 <__gethex>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	ed2d 8b02 	vpush	{d8}
 800a49c:	b089      	sub	sp, #36	; 0x24
 800a49e:	ee08 0a10 	vmov	s16, r0
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	4bb4      	ldr	r3, [pc, #720]	; (800a778 <__gethex+0x2e4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	468b      	mov	fp, r1
 800a4ae:	4690      	mov	r8, r2
 800a4b0:	f7f5 fe96 	bl	80001e0 <strlen>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	f8db 2000 	ldr.w	r2, [fp]
 800a4ba:	4403      	add	r3, r0
 800a4bc:	4682      	mov	sl, r0
 800a4be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	1c93      	adds	r3, r2, #2
 800a4c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4ce:	32fe      	adds	r2, #254	; 0xfe
 800a4d0:	18d1      	adds	r1, r2, r3
 800a4d2:	461f      	mov	r7, r3
 800a4d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4d8:	9100      	str	r1, [sp, #0]
 800a4da:	2830      	cmp	r0, #48	; 0x30
 800a4dc:	d0f8      	beq.n	800a4d0 <__gethex+0x3c>
 800a4de:	f7ff ffc3 	bl	800a468 <__hexdig_fun>
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d13a      	bne.n	800a55e <__gethex+0xca>
 800a4e8:	9901      	ldr	r1, [sp, #4]
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f001 f943 	bl	800b778 <strncmp>
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d168      	bne.n	800a5ca <__gethex+0x136>
 800a4f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4fc:	eb07 060a 	add.w	r6, r7, sl
 800a500:	f7ff ffb2 	bl	800a468 <__hexdig_fun>
 800a504:	2800      	cmp	r0, #0
 800a506:	d062      	beq.n	800a5ce <__gethex+0x13a>
 800a508:	4633      	mov	r3, r6
 800a50a:	7818      	ldrb	r0, [r3, #0]
 800a50c:	2830      	cmp	r0, #48	; 0x30
 800a50e:	461f      	mov	r7, r3
 800a510:	f103 0301 	add.w	r3, r3, #1
 800a514:	d0f9      	beq.n	800a50a <__gethex+0x76>
 800a516:	f7ff ffa7 	bl	800a468 <__hexdig_fun>
 800a51a:	2301      	movs	r3, #1
 800a51c:	fab0 f480 	clz	r4, r0
 800a520:	0964      	lsrs	r4, r4, #5
 800a522:	4635      	mov	r5, r6
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	463a      	mov	r2, r7
 800a528:	4616      	mov	r6, r2
 800a52a:	3201      	adds	r2, #1
 800a52c:	7830      	ldrb	r0, [r6, #0]
 800a52e:	f7ff ff9b 	bl	800a468 <__hexdig_fun>
 800a532:	2800      	cmp	r0, #0
 800a534:	d1f8      	bne.n	800a528 <__gethex+0x94>
 800a536:	9901      	ldr	r1, [sp, #4]
 800a538:	4652      	mov	r2, sl
 800a53a:	4630      	mov	r0, r6
 800a53c:	f001 f91c 	bl	800b778 <strncmp>
 800a540:	b980      	cbnz	r0, 800a564 <__gethex+0xd0>
 800a542:	b94d      	cbnz	r5, 800a558 <__gethex+0xc4>
 800a544:	eb06 050a 	add.w	r5, r6, sl
 800a548:	462a      	mov	r2, r5
 800a54a:	4616      	mov	r6, r2
 800a54c:	3201      	adds	r2, #1
 800a54e:	7830      	ldrb	r0, [r6, #0]
 800a550:	f7ff ff8a 	bl	800a468 <__hexdig_fun>
 800a554:	2800      	cmp	r0, #0
 800a556:	d1f8      	bne.n	800a54a <__gethex+0xb6>
 800a558:	1bad      	subs	r5, r5, r6
 800a55a:	00ad      	lsls	r5, r5, #2
 800a55c:	e004      	b.n	800a568 <__gethex+0xd4>
 800a55e:	2400      	movs	r4, #0
 800a560:	4625      	mov	r5, r4
 800a562:	e7e0      	b.n	800a526 <__gethex+0x92>
 800a564:	2d00      	cmp	r5, #0
 800a566:	d1f7      	bne.n	800a558 <__gethex+0xc4>
 800a568:	7833      	ldrb	r3, [r6, #0]
 800a56a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a56e:	2b50      	cmp	r3, #80	; 0x50
 800a570:	d13b      	bne.n	800a5ea <__gethex+0x156>
 800a572:	7873      	ldrb	r3, [r6, #1]
 800a574:	2b2b      	cmp	r3, #43	; 0x2b
 800a576:	d02c      	beq.n	800a5d2 <__gethex+0x13e>
 800a578:	2b2d      	cmp	r3, #45	; 0x2d
 800a57a:	d02e      	beq.n	800a5da <__gethex+0x146>
 800a57c:	1c71      	adds	r1, r6, #1
 800a57e:	f04f 0900 	mov.w	r9, #0
 800a582:	7808      	ldrb	r0, [r1, #0]
 800a584:	f7ff ff70 	bl	800a468 <__hexdig_fun>
 800a588:	1e43      	subs	r3, r0, #1
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b18      	cmp	r3, #24
 800a58e:	d82c      	bhi.n	800a5ea <__gethex+0x156>
 800a590:	f1a0 0210 	sub.w	r2, r0, #16
 800a594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a598:	f7ff ff66 	bl	800a468 <__hexdig_fun>
 800a59c:	1e43      	subs	r3, r0, #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b18      	cmp	r3, #24
 800a5a2:	d91d      	bls.n	800a5e0 <__gethex+0x14c>
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	d000      	beq.n	800a5ac <__gethex+0x118>
 800a5aa:	4252      	negs	r2, r2
 800a5ac:	4415      	add	r5, r2
 800a5ae:	f8cb 1000 	str.w	r1, [fp]
 800a5b2:	b1e4      	cbz	r4, 800a5ee <__gethex+0x15a>
 800a5b4:	9b00      	ldr	r3, [sp, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bf14      	ite	ne
 800a5ba:	2700      	movne	r7, #0
 800a5bc:	2706      	moveq	r7, #6
 800a5be:	4638      	mov	r0, r7
 800a5c0:	b009      	add	sp, #36	; 0x24
 800a5c2:	ecbd 8b02 	vpop	{d8}
 800a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ca:	463e      	mov	r6, r7
 800a5cc:	4625      	mov	r5, r4
 800a5ce:	2401      	movs	r4, #1
 800a5d0:	e7ca      	b.n	800a568 <__gethex+0xd4>
 800a5d2:	f04f 0900 	mov.w	r9, #0
 800a5d6:	1cb1      	adds	r1, r6, #2
 800a5d8:	e7d3      	b.n	800a582 <__gethex+0xee>
 800a5da:	f04f 0901 	mov.w	r9, #1
 800a5de:	e7fa      	b.n	800a5d6 <__gethex+0x142>
 800a5e0:	230a      	movs	r3, #10
 800a5e2:	fb03 0202 	mla	r2, r3, r2, r0
 800a5e6:	3a10      	subs	r2, #16
 800a5e8:	e7d4      	b.n	800a594 <__gethex+0x100>
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	e7df      	b.n	800a5ae <__gethex+0x11a>
 800a5ee:	1bf3      	subs	r3, r6, r7
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	2b07      	cmp	r3, #7
 800a5f6:	dc0b      	bgt.n	800a610 <__gethex+0x17c>
 800a5f8:	ee18 0a10 	vmov	r0, s16
 800a5fc:	f000 fa82 	bl	800ab04 <_Balloc>
 800a600:	4604      	mov	r4, r0
 800a602:	b940      	cbnz	r0, 800a616 <__gethex+0x182>
 800a604:	4b5d      	ldr	r3, [pc, #372]	; (800a77c <__gethex+0x2e8>)
 800a606:	4602      	mov	r2, r0
 800a608:	21de      	movs	r1, #222	; 0xde
 800a60a:	485d      	ldr	r0, [pc, #372]	; (800a780 <__gethex+0x2ec>)
 800a60c:	f001 f8d6 	bl	800b7bc <__assert_func>
 800a610:	3101      	adds	r1, #1
 800a612:	105b      	asrs	r3, r3, #1
 800a614:	e7ee      	b.n	800a5f4 <__gethex+0x160>
 800a616:	f100 0914 	add.w	r9, r0, #20
 800a61a:	f04f 0b00 	mov.w	fp, #0
 800a61e:	f1ca 0301 	rsb	r3, sl, #1
 800a622:	f8cd 9008 	str.w	r9, [sp, #8]
 800a626:	f8cd b000 	str.w	fp, [sp]
 800a62a:	9306      	str	r3, [sp, #24]
 800a62c:	42b7      	cmp	r7, r6
 800a62e:	d340      	bcc.n	800a6b2 <__gethex+0x21e>
 800a630:	9802      	ldr	r0, [sp, #8]
 800a632:	9b00      	ldr	r3, [sp, #0]
 800a634:	f840 3b04 	str.w	r3, [r0], #4
 800a638:	eba0 0009 	sub.w	r0, r0, r9
 800a63c:	1080      	asrs	r0, r0, #2
 800a63e:	0146      	lsls	r6, r0, #5
 800a640:	6120      	str	r0, [r4, #16]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fb50 	bl	800ace8 <__hi0bits>
 800a648:	1a30      	subs	r0, r6, r0
 800a64a:	f8d8 6000 	ldr.w	r6, [r8]
 800a64e:	42b0      	cmp	r0, r6
 800a650:	dd63      	ble.n	800a71a <__gethex+0x286>
 800a652:	1b87      	subs	r7, r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	4620      	mov	r0, r4
 800a658:	f000 fef4 	bl	800b444 <__any_on>
 800a65c:	4682      	mov	sl, r0
 800a65e:	b1a8      	cbz	r0, 800a68c <__gethex+0x1f8>
 800a660:	1e7b      	subs	r3, r7, #1
 800a662:	1159      	asrs	r1, r3, #5
 800a664:	f003 021f 	and.w	r2, r3, #31
 800a668:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a66c:	f04f 0a01 	mov.w	sl, #1
 800a670:	fa0a f202 	lsl.w	r2, sl, r2
 800a674:	420a      	tst	r2, r1
 800a676:	d009      	beq.n	800a68c <__gethex+0x1f8>
 800a678:	4553      	cmp	r3, sl
 800a67a:	dd05      	ble.n	800a688 <__gethex+0x1f4>
 800a67c:	1eb9      	subs	r1, r7, #2
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fee0 	bl	800b444 <__any_on>
 800a684:	2800      	cmp	r0, #0
 800a686:	d145      	bne.n	800a714 <__gethex+0x280>
 800a688:	f04f 0a02 	mov.w	sl, #2
 800a68c:	4639      	mov	r1, r7
 800a68e:	4620      	mov	r0, r4
 800a690:	f7ff fe98 	bl	800a3c4 <rshift>
 800a694:	443d      	add	r5, r7
 800a696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a69a:	42ab      	cmp	r3, r5
 800a69c:	da4c      	bge.n	800a738 <__gethex+0x2a4>
 800a69e:	ee18 0a10 	vmov	r0, s16
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	f000 fa6e 	bl	800ab84 <_Bfree>
 800a6a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	27a3      	movs	r7, #163	; 0xa3
 800a6b0:	e785      	b.n	800a5be <__gethex+0x12a>
 800a6b2:	1e73      	subs	r3, r6, #1
 800a6b4:	9a05      	ldr	r2, [sp, #20]
 800a6b6:	9303      	str	r3, [sp, #12]
 800a6b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d019      	beq.n	800a6f4 <__gethex+0x260>
 800a6c0:	f1bb 0f20 	cmp.w	fp, #32
 800a6c4:	d107      	bne.n	800a6d6 <__gethex+0x242>
 800a6c6:	9b02      	ldr	r3, [sp, #8]
 800a6c8:	9a00      	ldr	r2, [sp, #0]
 800a6ca:	f843 2b04 	str.w	r2, [r3], #4
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	469b      	mov	fp, r3
 800a6d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6da:	f7ff fec5 	bl	800a468 <__hexdig_fun>
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	f000 000f 	and.w	r0, r0, #15
 800a6e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6e8:	4303      	orrs	r3, r0
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	f10b 0b04 	add.w	fp, fp, #4
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	e00d      	b.n	800a710 <__gethex+0x27c>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	9a06      	ldr	r2, [sp, #24]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	42bb      	cmp	r3, r7
 800a6fc:	d3e0      	bcc.n	800a6c0 <__gethex+0x22c>
 800a6fe:	4618      	mov	r0, r3
 800a700:	9901      	ldr	r1, [sp, #4]
 800a702:	9307      	str	r3, [sp, #28]
 800a704:	4652      	mov	r2, sl
 800a706:	f001 f837 	bl	800b778 <strncmp>
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d1d7      	bne.n	800a6c0 <__gethex+0x22c>
 800a710:	461e      	mov	r6, r3
 800a712:	e78b      	b.n	800a62c <__gethex+0x198>
 800a714:	f04f 0a03 	mov.w	sl, #3
 800a718:	e7b8      	b.n	800a68c <__gethex+0x1f8>
 800a71a:	da0a      	bge.n	800a732 <__gethex+0x29e>
 800a71c:	1a37      	subs	r7, r6, r0
 800a71e:	4621      	mov	r1, r4
 800a720:	ee18 0a10 	vmov	r0, s16
 800a724:	463a      	mov	r2, r7
 800a726:	f000 fc49 	bl	800afbc <__lshift>
 800a72a:	1bed      	subs	r5, r5, r7
 800a72c:	4604      	mov	r4, r0
 800a72e:	f100 0914 	add.w	r9, r0, #20
 800a732:	f04f 0a00 	mov.w	sl, #0
 800a736:	e7ae      	b.n	800a696 <__gethex+0x202>
 800a738:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a73c:	42a8      	cmp	r0, r5
 800a73e:	dd72      	ble.n	800a826 <__gethex+0x392>
 800a740:	1b45      	subs	r5, r0, r5
 800a742:	42ae      	cmp	r6, r5
 800a744:	dc36      	bgt.n	800a7b4 <__gethex+0x320>
 800a746:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d02a      	beq.n	800a7a4 <__gethex+0x310>
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d02c      	beq.n	800a7ac <__gethex+0x318>
 800a752:	2b01      	cmp	r3, #1
 800a754:	d11c      	bne.n	800a790 <__gethex+0x2fc>
 800a756:	42ae      	cmp	r6, r5
 800a758:	d11a      	bne.n	800a790 <__gethex+0x2fc>
 800a75a:	2e01      	cmp	r6, #1
 800a75c:	d112      	bne.n	800a784 <__gethex+0x2f0>
 800a75e:	9a04      	ldr	r2, [sp, #16]
 800a760:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	2301      	movs	r3, #1
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	f8c9 3000 	str.w	r3, [r9]
 800a76e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a770:	2762      	movs	r7, #98	; 0x62
 800a772:	601c      	str	r4, [r3, #0]
 800a774:	e723      	b.n	800a5be <__gethex+0x12a>
 800a776:	bf00      	nop
 800a778:	0800c618 	.word	0x0800c618
 800a77c:	0800c5a0 	.word	0x0800c5a0
 800a780:	0800c5b1 	.word	0x0800c5b1
 800a784:	1e71      	subs	r1, r6, #1
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fe5c 	bl	800b444 <__any_on>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d1e6      	bne.n	800a75e <__gethex+0x2ca>
 800a790:	ee18 0a10 	vmov	r0, s16
 800a794:	4621      	mov	r1, r4
 800a796:	f000 f9f5 	bl	800ab84 <_Bfree>
 800a79a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a79c:	2300      	movs	r3, #0
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	2750      	movs	r7, #80	; 0x50
 800a7a2:	e70c      	b.n	800a5be <__gethex+0x12a>
 800a7a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f2      	bne.n	800a790 <__gethex+0x2fc>
 800a7aa:	e7d8      	b.n	800a75e <__gethex+0x2ca>
 800a7ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1d5      	bne.n	800a75e <__gethex+0x2ca>
 800a7b2:	e7ed      	b.n	800a790 <__gethex+0x2fc>
 800a7b4:	1e6f      	subs	r7, r5, #1
 800a7b6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ba:	d131      	bne.n	800a820 <__gethex+0x38c>
 800a7bc:	b127      	cbz	r7, 800a7c8 <__gethex+0x334>
 800a7be:	4639      	mov	r1, r7
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 fe3f 	bl	800b444 <__any_on>
 800a7c6:	4682      	mov	sl, r0
 800a7c8:	117b      	asrs	r3, r7, #5
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7d0:	f007 071f 	and.w	r7, r7, #31
 800a7d4:	fa01 f707 	lsl.w	r7, r1, r7
 800a7d8:	421f      	tst	r7, r3
 800a7da:	4629      	mov	r1, r5
 800a7dc:	4620      	mov	r0, r4
 800a7de:	bf18      	it	ne
 800a7e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7e4:	1b76      	subs	r6, r6, r5
 800a7e6:	f7ff fded 	bl	800a3c4 <rshift>
 800a7ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7ee:	2702      	movs	r7, #2
 800a7f0:	f1ba 0f00 	cmp.w	sl, #0
 800a7f4:	d048      	beq.n	800a888 <__gethex+0x3f4>
 800a7f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d015      	beq.n	800a82a <__gethex+0x396>
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d017      	beq.n	800a832 <__gethex+0x39e>
 800a802:	2b01      	cmp	r3, #1
 800a804:	d109      	bne.n	800a81a <__gethex+0x386>
 800a806:	f01a 0f02 	tst.w	sl, #2
 800a80a:	d006      	beq.n	800a81a <__gethex+0x386>
 800a80c:	f8d9 0000 	ldr.w	r0, [r9]
 800a810:	ea4a 0a00 	orr.w	sl, sl, r0
 800a814:	f01a 0f01 	tst.w	sl, #1
 800a818:	d10e      	bne.n	800a838 <__gethex+0x3a4>
 800a81a:	f047 0710 	orr.w	r7, r7, #16
 800a81e:	e033      	b.n	800a888 <__gethex+0x3f4>
 800a820:	f04f 0a01 	mov.w	sl, #1
 800a824:	e7d0      	b.n	800a7c8 <__gethex+0x334>
 800a826:	2701      	movs	r7, #1
 800a828:	e7e2      	b.n	800a7f0 <__gethex+0x35c>
 800a82a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a82c:	f1c3 0301 	rsb	r3, r3, #1
 800a830:	9315      	str	r3, [sp, #84]	; 0x54
 800a832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0f0      	beq.n	800a81a <__gethex+0x386>
 800a838:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a83c:	f104 0314 	add.w	r3, r4, #20
 800a840:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a844:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a848:	f04f 0c00 	mov.w	ip, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a852:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a856:	d01c      	beq.n	800a892 <__gethex+0x3fe>
 800a858:	3201      	adds	r2, #1
 800a85a:	6002      	str	r2, [r0, #0]
 800a85c:	2f02      	cmp	r7, #2
 800a85e:	f104 0314 	add.w	r3, r4, #20
 800a862:	d13f      	bne.n	800a8e4 <__gethex+0x450>
 800a864:	f8d8 2000 	ldr.w	r2, [r8]
 800a868:	3a01      	subs	r2, #1
 800a86a:	42b2      	cmp	r2, r6
 800a86c:	d10a      	bne.n	800a884 <__gethex+0x3f0>
 800a86e:	1171      	asrs	r1, r6, #5
 800a870:	2201      	movs	r2, #1
 800a872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a876:	f006 061f 	and.w	r6, r6, #31
 800a87a:	fa02 f606 	lsl.w	r6, r2, r6
 800a87e:	421e      	tst	r6, r3
 800a880:	bf18      	it	ne
 800a882:	4617      	movne	r7, r2
 800a884:	f047 0720 	orr.w	r7, r7, #32
 800a888:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a88a:	601c      	str	r4, [r3, #0]
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	601d      	str	r5, [r3, #0]
 800a890:	e695      	b.n	800a5be <__gethex+0x12a>
 800a892:	4299      	cmp	r1, r3
 800a894:	f843 cc04 	str.w	ip, [r3, #-4]
 800a898:	d8d8      	bhi.n	800a84c <__gethex+0x3b8>
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	459b      	cmp	fp, r3
 800a89e:	db19      	blt.n	800a8d4 <__gethex+0x440>
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	ee18 0a10 	vmov	r0, s16
 800a8a6:	3101      	adds	r1, #1
 800a8a8:	f000 f92c 	bl	800ab04 <_Balloc>
 800a8ac:	4681      	mov	r9, r0
 800a8ae:	b918      	cbnz	r0, 800a8b8 <__gethex+0x424>
 800a8b0:	4b1a      	ldr	r3, [pc, #104]	; (800a91c <__gethex+0x488>)
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	2184      	movs	r1, #132	; 0x84
 800a8b6:	e6a8      	b.n	800a60a <__gethex+0x176>
 800a8b8:	6922      	ldr	r2, [r4, #16]
 800a8ba:	3202      	adds	r2, #2
 800a8bc:	f104 010c 	add.w	r1, r4, #12
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	300c      	adds	r0, #12
 800a8c4:	f000 f904 	bl	800aad0 <memcpy>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	ee18 0a10 	vmov	r0, s16
 800a8ce:	f000 f959 	bl	800ab84 <_Bfree>
 800a8d2:	464c      	mov	r4, r9
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8dc:	6122      	str	r2, [r4, #16]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	615a      	str	r2, [r3, #20]
 800a8e2:	e7bb      	b.n	800a85c <__gethex+0x3c8>
 800a8e4:	6922      	ldr	r2, [r4, #16]
 800a8e6:	455a      	cmp	r2, fp
 800a8e8:	dd0b      	ble.n	800a902 <__gethex+0x46e>
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f7ff fd69 	bl	800a3c4 <rshift>
 800a8f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8f6:	3501      	adds	r5, #1
 800a8f8:	42ab      	cmp	r3, r5
 800a8fa:	f6ff aed0 	blt.w	800a69e <__gethex+0x20a>
 800a8fe:	2701      	movs	r7, #1
 800a900:	e7c0      	b.n	800a884 <__gethex+0x3f0>
 800a902:	f016 061f 	ands.w	r6, r6, #31
 800a906:	d0fa      	beq.n	800a8fe <__gethex+0x46a>
 800a908:	4453      	add	r3, sl
 800a90a:	f1c6 0620 	rsb	r6, r6, #32
 800a90e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a912:	f000 f9e9 	bl	800ace8 <__hi0bits>
 800a916:	42b0      	cmp	r0, r6
 800a918:	dbe7      	blt.n	800a8ea <__gethex+0x456>
 800a91a:	e7f0      	b.n	800a8fe <__gethex+0x46a>
 800a91c:	0800c5a0 	.word	0x0800c5a0

0800a920 <L_shift>:
 800a920:	f1c2 0208 	rsb	r2, r2, #8
 800a924:	0092      	lsls	r2, r2, #2
 800a926:	b570      	push	{r4, r5, r6, lr}
 800a928:	f1c2 0620 	rsb	r6, r2, #32
 800a92c:	6843      	ldr	r3, [r0, #4]
 800a92e:	6804      	ldr	r4, [r0, #0]
 800a930:	fa03 f506 	lsl.w	r5, r3, r6
 800a934:	432c      	orrs	r4, r5
 800a936:	40d3      	lsrs	r3, r2
 800a938:	6004      	str	r4, [r0, #0]
 800a93a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a93e:	4288      	cmp	r0, r1
 800a940:	d3f4      	bcc.n	800a92c <L_shift+0xc>
 800a942:	bd70      	pop	{r4, r5, r6, pc}

0800a944 <__match>:
 800a944:	b530      	push	{r4, r5, lr}
 800a946:	6803      	ldr	r3, [r0, #0]
 800a948:	3301      	adds	r3, #1
 800a94a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a94e:	b914      	cbnz	r4, 800a956 <__match+0x12>
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	2001      	movs	r0, #1
 800a954:	bd30      	pop	{r4, r5, pc}
 800a956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a95e:	2d19      	cmp	r5, #25
 800a960:	bf98      	it	ls
 800a962:	3220      	addls	r2, #32
 800a964:	42a2      	cmp	r2, r4
 800a966:	d0f0      	beq.n	800a94a <__match+0x6>
 800a968:	2000      	movs	r0, #0
 800a96a:	e7f3      	b.n	800a954 <__match+0x10>

0800a96c <__hexnan>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	680b      	ldr	r3, [r1, #0]
 800a972:	115e      	asrs	r6, r3, #5
 800a974:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a978:	f013 031f 	ands.w	r3, r3, #31
 800a97c:	b087      	sub	sp, #28
 800a97e:	bf18      	it	ne
 800a980:	3604      	addne	r6, #4
 800a982:	2500      	movs	r5, #0
 800a984:	1f37      	subs	r7, r6, #4
 800a986:	4690      	mov	r8, r2
 800a988:	6802      	ldr	r2, [r0, #0]
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	4682      	mov	sl, r0
 800a98e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a992:	46b9      	mov	r9, r7
 800a994:	463c      	mov	r4, r7
 800a996:	9502      	str	r5, [sp, #8]
 800a998:	46ab      	mov	fp, r5
 800a99a:	7851      	ldrb	r1, [r2, #1]
 800a99c:	1c53      	adds	r3, r2, #1
 800a99e:	9303      	str	r3, [sp, #12]
 800a9a0:	b341      	cbz	r1, 800a9f4 <__hexnan+0x88>
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	9205      	str	r2, [sp, #20]
 800a9a6:	9104      	str	r1, [sp, #16]
 800a9a8:	f7ff fd5e 	bl	800a468 <__hexdig_fun>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d14f      	bne.n	800aa50 <__hexnan+0xe4>
 800a9b0:	9904      	ldr	r1, [sp, #16]
 800a9b2:	9a05      	ldr	r2, [sp, #20]
 800a9b4:	2920      	cmp	r1, #32
 800a9b6:	d818      	bhi.n	800a9ea <__hexnan+0x7e>
 800a9b8:	9b02      	ldr	r3, [sp, #8]
 800a9ba:	459b      	cmp	fp, r3
 800a9bc:	dd13      	ble.n	800a9e6 <__hexnan+0x7a>
 800a9be:	454c      	cmp	r4, r9
 800a9c0:	d206      	bcs.n	800a9d0 <__hexnan+0x64>
 800a9c2:	2d07      	cmp	r5, #7
 800a9c4:	dc04      	bgt.n	800a9d0 <__hexnan+0x64>
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f7ff ffa8 	bl	800a920 <L_shift>
 800a9d0:	4544      	cmp	r4, r8
 800a9d2:	d950      	bls.n	800aa76 <__hexnan+0x10a>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f1a4 0904 	sub.w	r9, r4, #4
 800a9da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9de:	f8cd b008 	str.w	fp, [sp, #8]
 800a9e2:	464c      	mov	r4, r9
 800a9e4:	461d      	mov	r5, r3
 800a9e6:	9a03      	ldr	r2, [sp, #12]
 800a9e8:	e7d7      	b.n	800a99a <__hexnan+0x2e>
 800a9ea:	2929      	cmp	r1, #41	; 0x29
 800a9ec:	d156      	bne.n	800aa9c <__hexnan+0x130>
 800a9ee:	3202      	adds	r2, #2
 800a9f0:	f8ca 2000 	str.w	r2, [sl]
 800a9f4:	f1bb 0f00 	cmp.w	fp, #0
 800a9f8:	d050      	beq.n	800aa9c <__hexnan+0x130>
 800a9fa:	454c      	cmp	r4, r9
 800a9fc:	d206      	bcs.n	800aa0c <__hexnan+0xa0>
 800a9fe:	2d07      	cmp	r5, #7
 800aa00:	dc04      	bgt.n	800aa0c <__hexnan+0xa0>
 800aa02:	462a      	mov	r2, r5
 800aa04:	4649      	mov	r1, r9
 800aa06:	4620      	mov	r0, r4
 800aa08:	f7ff ff8a 	bl	800a920 <L_shift>
 800aa0c:	4544      	cmp	r4, r8
 800aa0e:	d934      	bls.n	800aa7a <__hexnan+0x10e>
 800aa10:	f1a8 0204 	sub.w	r2, r8, #4
 800aa14:	4623      	mov	r3, r4
 800aa16:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa1e:	429f      	cmp	r7, r3
 800aa20:	d2f9      	bcs.n	800aa16 <__hexnan+0xaa>
 800aa22:	1b3b      	subs	r3, r7, r4
 800aa24:	f023 0303 	bic.w	r3, r3, #3
 800aa28:	3304      	adds	r3, #4
 800aa2a:	3401      	adds	r4, #1
 800aa2c:	3e03      	subs	r6, #3
 800aa2e:	42b4      	cmp	r4, r6
 800aa30:	bf88      	it	hi
 800aa32:	2304      	movhi	r3, #4
 800aa34:	4443      	add	r3, r8
 800aa36:	2200      	movs	r2, #0
 800aa38:	f843 2b04 	str.w	r2, [r3], #4
 800aa3c:	429f      	cmp	r7, r3
 800aa3e:	d2fb      	bcs.n	800aa38 <__hexnan+0xcc>
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	b91b      	cbnz	r3, 800aa4c <__hexnan+0xe0>
 800aa44:	4547      	cmp	r7, r8
 800aa46:	d127      	bne.n	800aa98 <__hexnan+0x12c>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	2005      	movs	r0, #5
 800aa4e:	e026      	b.n	800aa9e <__hexnan+0x132>
 800aa50:	3501      	adds	r5, #1
 800aa52:	2d08      	cmp	r5, #8
 800aa54:	f10b 0b01 	add.w	fp, fp, #1
 800aa58:	dd06      	ble.n	800aa68 <__hexnan+0xfc>
 800aa5a:	4544      	cmp	r4, r8
 800aa5c:	d9c3      	bls.n	800a9e6 <__hexnan+0x7a>
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa64:	2501      	movs	r5, #1
 800aa66:	3c04      	subs	r4, #4
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	f000 000f 	and.w	r0, r0, #15
 800aa6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa72:	6022      	str	r2, [r4, #0]
 800aa74:	e7b7      	b.n	800a9e6 <__hexnan+0x7a>
 800aa76:	2508      	movs	r5, #8
 800aa78:	e7b5      	b.n	800a9e6 <__hexnan+0x7a>
 800aa7a:	9b01      	ldr	r3, [sp, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0df      	beq.n	800aa40 <__hexnan+0xd4>
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	f1c3 0320 	rsb	r3, r3, #32
 800aa88:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa90:	401a      	ands	r2, r3
 800aa92:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa96:	e7d3      	b.n	800aa40 <__hexnan+0xd4>
 800aa98:	3f04      	subs	r7, #4
 800aa9a:	e7d1      	b.n	800aa40 <__hexnan+0xd4>
 800aa9c:	2004      	movs	r0, #4
 800aa9e:	b007      	add	sp, #28
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaa4 <_localeconv_r>:
 800aaa4:	4800      	ldr	r0, [pc, #0]	; (800aaa8 <_localeconv_r+0x4>)
 800aaa6:	4770      	bx	lr
 800aaa8:	20000254 	.word	0x20000254

0800aaac <__ascii_mbtowc>:
 800aaac:	b082      	sub	sp, #8
 800aaae:	b901      	cbnz	r1, 800aab2 <__ascii_mbtowc+0x6>
 800aab0:	a901      	add	r1, sp, #4
 800aab2:	b142      	cbz	r2, 800aac6 <__ascii_mbtowc+0x1a>
 800aab4:	b14b      	cbz	r3, 800aaca <__ascii_mbtowc+0x1e>
 800aab6:	7813      	ldrb	r3, [r2, #0]
 800aab8:	600b      	str	r3, [r1, #0]
 800aaba:	7812      	ldrb	r2, [r2, #0]
 800aabc:	1e10      	subs	r0, r2, #0
 800aabe:	bf18      	it	ne
 800aac0:	2001      	movne	r0, #1
 800aac2:	b002      	add	sp, #8
 800aac4:	4770      	bx	lr
 800aac6:	4610      	mov	r0, r2
 800aac8:	e7fb      	b.n	800aac2 <__ascii_mbtowc+0x16>
 800aaca:	f06f 0001 	mvn.w	r0, #1
 800aace:	e7f8      	b.n	800aac2 <__ascii_mbtowc+0x16>

0800aad0 <memcpy>:
 800aad0:	440a      	add	r2, r1
 800aad2:	4291      	cmp	r1, r2
 800aad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	4770      	bx	lr
 800aadc:	b510      	push	{r4, lr}
 800aade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae6:	4291      	cmp	r1, r2
 800aae8:	d1f9      	bne.n	800aade <memcpy+0xe>
 800aaea:	bd10      	pop	{r4, pc}

0800aaec <__malloc_lock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__malloc_lock+0x8>)
 800aaee:	f000 be96 	b.w	800b81e <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	2000170c 	.word	0x2000170c

0800aaf8 <__malloc_unlock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__malloc_unlock+0x8>)
 800aafa:	f000 be91 	b.w	800b820 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	2000170c 	.word	0x2000170c

0800ab04 <_Balloc>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	b976      	cbnz	r6, 800ab2c <_Balloc+0x28>
 800ab0e:	2010      	movs	r0, #16
 800ab10:	f7fc ff90 	bl	8007a34 <malloc>
 800ab14:	4602      	mov	r2, r0
 800ab16:	6260      	str	r0, [r4, #36]	; 0x24
 800ab18:	b920      	cbnz	r0, 800ab24 <_Balloc+0x20>
 800ab1a:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <_Balloc+0x78>)
 800ab1c:	4818      	ldr	r0, [pc, #96]	; (800ab80 <_Balloc+0x7c>)
 800ab1e:	2166      	movs	r1, #102	; 0x66
 800ab20:	f000 fe4c 	bl	800b7bc <__assert_func>
 800ab24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab28:	6006      	str	r6, [r0, #0]
 800ab2a:	60c6      	str	r6, [r0, #12]
 800ab2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab2e:	68f3      	ldr	r3, [r6, #12]
 800ab30:	b183      	cbz	r3, 800ab54 <_Balloc+0x50>
 800ab32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab3a:	b9b8      	cbnz	r0, 800ab6c <_Balloc+0x68>
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab42:	1d72      	adds	r2, r6, #5
 800ab44:	0092      	lsls	r2, r2, #2
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fc9d 	bl	800b486 <_calloc_r>
 800ab4c:	b160      	cbz	r0, 800ab68 <_Balloc+0x64>
 800ab4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab52:	e00e      	b.n	800ab72 <_Balloc+0x6e>
 800ab54:	2221      	movs	r2, #33	; 0x21
 800ab56:	2104      	movs	r1, #4
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fc94 	bl	800b486 <_calloc_r>
 800ab5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab60:	60f0      	str	r0, [r6, #12]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e4      	bne.n	800ab32 <_Balloc+0x2e>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	6802      	ldr	r2, [r0, #0]
 800ab6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab72:	2300      	movs	r3, #0
 800ab74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab78:	e7f7      	b.n	800ab6a <_Balloc+0x66>
 800ab7a:	bf00      	nop
 800ab7c:	0800c52e 	.word	0x0800c52e
 800ab80:	0800c62c 	.word	0x0800c62c

0800ab84 <_Bfree>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab88:	4605      	mov	r5, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	b976      	cbnz	r6, 800abac <_Bfree+0x28>
 800ab8e:	2010      	movs	r0, #16
 800ab90:	f7fc ff50 	bl	8007a34 <malloc>
 800ab94:	4602      	mov	r2, r0
 800ab96:	6268      	str	r0, [r5, #36]	; 0x24
 800ab98:	b920      	cbnz	r0, 800aba4 <_Bfree+0x20>
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <_Bfree+0x3c>)
 800ab9c:	4809      	ldr	r0, [pc, #36]	; (800abc4 <_Bfree+0x40>)
 800ab9e:	218a      	movs	r1, #138	; 0x8a
 800aba0:	f000 fe0c 	bl	800b7bc <__assert_func>
 800aba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba8:	6006      	str	r6, [r0, #0]
 800abaa:	60c6      	str	r6, [r0, #12]
 800abac:	b13c      	cbz	r4, 800abbe <_Bfree+0x3a>
 800abae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abb0:	6862      	ldr	r2, [r4, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abb8:	6021      	str	r1, [r4, #0]
 800abba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	0800c52e 	.word	0x0800c52e
 800abc4:	0800c62c 	.word	0x0800c62c

0800abc8 <__multadd>:
 800abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abcc:	690d      	ldr	r5, [r1, #16]
 800abce:	4607      	mov	r7, r0
 800abd0:	460c      	mov	r4, r1
 800abd2:	461e      	mov	r6, r3
 800abd4:	f101 0c14 	add.w	ip, r1, #20
 800abd8:	2000      	movs	r0, #0
 800abda:	f8dc 3000 	ldr.w	r3, [ip]
 800abde:	b299      	uxth	r1, r3
 800abe0:	fb02 6101 	mla	r1, r2, r1, r6
 800abe4:	0c1e      	lsrs	r6, r3, #16
 800abe6:	0c0b      	lsrs	r3, r1, #16
 800abe8:	fb02 3306 	mla	r3, r2, r6, r3
 800abec:	b289      	uxth	r1, r1
 800abee:	3001      	adds	r0, #1
 800abf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abf4:	4285      	cmp	r5, r0
 800abf6:	f84c 1b04 	str.w	r1, [ip], #4
 800abfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abfe:	dcec      	bgt.n	800abda <__multadd+0x12>
 800ac00:	b30e      	cbz	r6, 800ac46 <__multadd+0x7e>
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dc19      	bgt.n	800ac3c <__multadd+0x74>
 800ac08:	6861      	ldr	r1, [r4, #4]
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	3101      	adds	r1, #1
 800ac0e:	f7ff ff79 	bl	800ab04 <_Balloc>
 800ac12:	4680      	mov	r8, r0
 800ac14:	b928      	cbnz	r0, 800ac22 <__multadd+0x5a>
 800ac16:	4602      	mov	r2, r0
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <__multadd+0x84>)
 800ac1a:	480d      	ldr	r0, [pc, #52]	; (800ac50 <__multadd+0x88>)
 800ac1c:	21b5      	movs	r1, #181	; 0xb5
 800ac1e:	f000 fdcd 	bl	800b7bc <__assert_func>
 800ac22:	6922      	ldr	r2, [r4, #16]
 800ac24:	3202      	adds	r2, #2
 800ac26:	f104 010c 	add.w	r1, r4, #12
 800ac2a:	0092      	lsls	r2, r2, #2
 800ac2c:	300c      	adds	r0, #12
 800ac2e:	f7ff ff4f 	bl	800aad0 <memcpy>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7ff ffa5 	bl	800ab84 <_Bfree>
 800ac3a:	4644      	mov	r4, r8
 800ac3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac40:	3501      	adds	r5, #1
 800ac42:	615e      	str	r6, [r3, #20]
 800ac44:	6125      	str	r5, [r4, #16]
 800ac46:	4620      	mov	r0, r4
 800ac48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac4c:	0800c5a0 	.word	0x0800c5a0
 800ac50:	0800c62c 	.word	0x0800c62c

0800ac54 <__s2b>:
 800ac54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac58:	460c      	mov	r4, r1
 800ac5a:	4615      	mov	r5, r2
 800ac5c:	461f      	mov	r7, r3
 800ac5e:	2209      	movs	r2, #9
 800ac60:	3308      	adds	r3, #8
 800ac62:	4606      	mov	r6, r0
 800ac64:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac68:	2100      	movs	r1, #0
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	db09      	blt.n	800ac84 <__s2b+0x30>
 800ac70:	4630      	mov	r0, r6
 800ac72:	f7ff ff47 	bl	800ab04 <_Balloc>
 800ac76:	b940      	cbnz	r0, 800ac8a <__s2b+0x36>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <__s2b+0x8c>)
 800ac7c:	4819      	ldr	r0, [pc, #100]	; (800ace4 <__s2b+0x90>)
 800ac7e:	21ce      	movs	r1, #206	; 0xce
 800ac80:	f000 fd9c 	bl	800b7bc <__assert_func>
 800ac84:	0052      	lsls	r2, r2, #1
 800ac86:	3101      	adds	r1, #1
 800ac88:	e7f0      	b.n	800ac6c <__s2b+0x18>
 800ac8a:	9b08      	ldr	r3, [sp, #32]
 800ac8c:	6143      	str	r3, [r0, #20]
 800ac8e:	2d09      	cmp	r5, #9
 800ac90:	f04f 0301 	mov.w	r3, #1
 800ac94:	6103      	str	r3, [r0, #16]
 800ac96:	dd16      	ble.n	800acc6 <__s2b+0x72>
 800ac98:	f104 0909 	add.w	r9, r4, #9
 800ac9c:	46c8      	mov	r8, r9
 800ac9e:	442c      	add	r4, r5
 800aca0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aca4:	4601      	mov	r1, r0
 800aca6:	3b30      	subs	r3, #48	; 0x30
 800aca8:	220a      	movs	r2, #10
 800acaa:	4630      	mov	r0, r6
 800acac:	f7ff ff8c 	bl	800abc8 <__multadd>
 800acb0:	45a0      	cmp	r8, r4
 800acb2:	d1f5      	bne.n	800aca0 <__s2b+0x4c>
 800acb4:	f1a5 0408 	sub.w	r4, r5, #8
 800acb8:	444c      	add	r4, r9
 800acba:	1b2d      	subs	r5, r5, r4
 800acbc:	1963      	adds	r3, r4, r5
 800acbe:	42bb      	cmp	r3, r7
 800acc0:	db04      	blt.n	800accc <__s2b+0x78>
 800acc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc6:	340a      	adds	r4, #10
 800acc8:	2509      	movs	r5, #9
 800acca:	e7f6      	b.n	800acba <__s2b+0x66>
 800accc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acd0:	4601      	mov	r1, r0
 800acd2:	3b30      	subs	r3, #48	; 0x30
 800acd4:	220a      	movs	r2, #10
 800acd6:	4630      	mov	r0, r6
 800acd8:	f7ff ff76 	bl	800abc8 <__multadd>
 800acdc:	e7ee      	b.n	800acbc <__s2b+0x68>
 800acde:	bf00      	nop
 800ace0:	0800c5a0 	.word	0x0800c5a0
 800ace4:	0800c62c 	.word	0x0800c62c

0800ace8 <__hi0bits>:
 800ace8:	0c03      	lsrs	r3, r0, #16
 800acea:	041b      	lsls	r3, r3, #16
 800acec:	b9d3      	cbnz	r3, 800ad24 <__hi0bits+0x3c>
 800acee:	0400      	lsls	r0, r0, #16
 800acf0:	2310      	movs	r3, #16
 800acf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acf6:	bf04      	itt	eq
 800acf8:	0200      	lsleq	r0, r0, #8
 800acfa:	3308      	addeq	r3, #8
 800acfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad00:	bf04      	itt	eq
 800ad02:	0100      	lsleq	r0, r0, #4
 800ad04:	3304      	addeq	r3, #4
 800ad06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad0a:	bf04      	itt	eq
 800ad0c:	0080      	lsleq	r0, r0, #2
 800ad0e:	3302      	addeq	r3, #2
 800ad10:	2800      	cmp	r0, #0
 800ad12:	db05      	blt.n	800ad20 <__hi0bits+0x38>
 800ad14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad18:	f103 0301 	add.w	r3, r3, #1
 800ad1c:	bf08      	it	eq
 800ad1e:	2320      	moveq	r3, #32
 800ad20:	4618      	mov	r0, r3
 800ad22:	4770      	bx	lr
 800ad24:	2300      	movs	r3, #0
 800ad26:	e7e4      	b.n	800acf2 <__hi0bits+0xa>

0800ad28 <__lo0bits>:
 800ad28:	6803      	ldr	r3, [r0, #0]
 800ad2a:	f013 0207 	ands.w	r2, r3, #7
 800ad2e:	4601      	mov	r1, r0
 800ad30:	d00b      	beq.n	800ad4a <__lo0bits+0x22>
 800ad32:	07da      	lsls	r2, r3, #31
 800ad34:	d423      	bmi.n	800ad7e <__lo0bits+0x56>
 800ad36:	0798      	lsls	r0, r3, #30
 800ad38:	bf49      	itett	mi
 800ad3a:	085b      	lsrmi	r3, r3, #1
 800ad3c:	089b      	lsrpl	r3, r3, #2
 800ad3e:	2001      	movmi	r0, #1
 800ad40:	600b      	strmi	r3, [r1, #0]
 800ad42:	bf5c      	itt	pl
 800ad44:	600b      	strpl	r3, [r1, #0]
 800ad46:	2002      	movpl	r0, #2
 800ad48:	4770      	bx	lr
 800ad4a:	b298      	uxth	r0, r3
 800ad4c:	b9a8      	cbnz	r0, 800ad7a <__lo0bits+0x52>
 800ad4e:	0c1b      	lsrs	r3, r3, #16
 800ad50:	2010      	movs	r0, #16
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	b90a      	cbnz	r2, 800ad5a <__lo0bits+0x32>
 800ad56:	3008      	adds	r0, #8
 800ad58:	0a1b      	lsrs	r3, r3, #8
 800ad5a:	071a      	lsls	r2, r3, #28
 800ad5c:	bf04      	itt	eq
 800ad5e:	091b      	lsreq	r3, r3, #4
 800ad60:	3004      	addeq	r0, #4
 800ad62:	079a      	lsls	r2, r3, #30
 800ad64:	bf04      	itt	eq
 800ad66:	089b      	lsreq	r3, r3, #2
 800ad68:	3002      	addeq	r0, #2
 800ad6a:	07da      	lsls	r2, r3, #31
 800ad6c:	d403      	bmi.n	800ad76 <__lo0bits+0x4e>
 800ad6e:	085b      	lsrs	r3, r3, #1
 800ad70:	f100 0001 	add.w	r0, r0, #1
 800ad74:	d005      	beq.n	800ad82 <__lo0bits+0x5a>
 800ad76:	600b      	str	r3, [r1, #0]
 800ad78:	4770      	bx	lr
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	e7e9      	b.n	800ad52 <__lo0bits+0x2a>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	4770      	bx	lr
 800ad82:	2020      	movs	r0, #32
 800ad84:	4770      	bx	lr
	...

0800ad88 <__i2b>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	f7ff feb9 	bl	800ab04 <_Balloc>
 800ad92:	4602      	mov	r2, r0
 800ad94:	b928      	cbnz	r0, 800ada2 <__i2b+0x1a>
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <__i2b+0x24>)
 800ad98:	4805      	ldr	r0, [pc, #20]	; (800adb0 <__i2b+0x28>)
 800ad9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad9e:	f000 fd0d 	bl	800b7bc <__assert_func>
 800ada2:	2301      	movs	r3, #1
 800ada4:	6144      	str	r4, [r0, #20]
 800ada6:	6103      	str	r3, [r0, #16]
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	bf00      	nop
 800adac:	0800c5a0 	.word	0x0800c5a0
 800adb0:	0800c62c 	.word	0x0800c62c

0800adb4 <__multiply>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	4691      	mov	r9, r2
 800adba:	690a      	ldr	r2, [r1, #16]
 800adbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	bfb8      	it	lt
 800adc4:	460b      	movlt	r3, r1
 800adc6:	460c      	mov	r4, r1
 800adc8:	bfbc      	itt	lt
 800adca:	464c      	movlt	r4, r9
 800adcc:	4699      	movlt	r9, r3
 800adce:	6927      	ldr	r7, [r4, #16]
 800add0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800add4:	68a3      	ldr	r3, [r4, #8]
 800add6:	6861      	ldr	r1, [r4, #4]
 800add8:	eb07 060a 	add.w	r6, r7, sl
 800addc:	42b3      	cmp	r3, r6
 800adde:	b085      	sub	sp, #20
 800ade0:	bfb8      	it	lt
 800ade2:	3101      	addlt	r1, #1
 800ade4:	f7ff fe8e 	bl	800ab04 <_Balloc>
 800ade8:	b930      	cbnz	r0, 800adf8 <__multiply+0x44>
 800adea:	4602      	mov	r2, r0
 800adec:	4b44      	ldr	r3, [pc, #272]	; (800af00 <__multiply+0x14c>)
 800adee:	4845      	ldr	r0, [pc, #276]	; (800af04 <__multiply+0x150>)
 800adf0:	f240 115d 	movw	r1, #349	; 0x15d
 800adf4:	f000 fce2 	bl	800b7bc <__assert_func>
 800adf8:	f100 0514 	add.w	r5, r0, #20
 800adfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae00:	462b      	mov	r3, r5
 800ae02:	2200      	movs	r2, #0
 800ae04:	4543      	cmp	r3, r8
 800ae06:	d321      	bcc.n	800ae4c <__multiply+0x98>
 800ae08:	f104 0314 	add.w	r3, r4, #20
 800ae0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae10:	f109 0314 	add.w	r3, r9, #20
 800ae14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae18:	9202      	str	r2, [sp, #8]
 800ae1a:	1b3a      	subs	r2, r7, r4
 800ae1c:	3a15      	subs	r2, #21
 800ae1e:	f022 0203 	bic.w	r2, r2, #3
 800ae22:	3204      	adds	r2, #4
 800ae24:	f104 0115 	add.w	r1, r4, #21
 800ae28:	428f      	cmp	r7, r1
 800ae2a:	bf38      	it	cc
 800ae2c:	2204      	movcc	r2, #4
 800ae2e:	9201      	str	r2, [sp, #4]
 800ae30:	9a02      	ldr	r2, [sp, #8]
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d80c      	bhi.n	800ae52 <__multiply+0x9e>
 800ae38:	2e00      	cmp	r6, #0
 800ae3a:	dd03      	ble.n	800ae44 <__multiply+0x90>
 800ae3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d05a      	beq.n	800aefa <__multiply+0x146>
 800ae44:	6106      	str	r6, [r0, #16]
 800ae46:	b005      	add	sp, #20
 800ae48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4c:	f843 2b04 	str.w	r2, [r3], #4
 800ae50:	e7d8      	b.n	800ae04 <__multiply+0x50>
 800ae52:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae56:	f1ba 0f00 	cmp.w	sl, #0
 800ae5a:	d024      	beq.n	800aea6 <__multiply+0xf2>
 800ae5c:	f104 0e14 	add.w	lr, r4, #20
 800ae60:	46a9      	mov	r9, r5
 800ae62:	f04f 0c00 	mov.w	ip, #0
 800ae66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae6a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae6e:	fa1f fb82 	uxth.w	fp, r2
 800ae72:	b289      	uxth	r1, r1
 800ae74:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae80:	4461      	add	r1, ip
 800ae82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae86:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae8e:	b289      	uxth	r1, r1
 800ae90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae94:	4577      	cmp	r7, lr
 800ae96:	f849 1b04 	str.w	r1, [r9], #4
 800ae9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae9e:	d8e2      	bhi.n	800ae66 <__multiply+0xb2>
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	f845 c002 	str.w	ip, [r5, r2]
 800aea6:	9a03      	ldr	r2, [sp, #12]
 800aea8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeac:	3304      	adds	r3, #4
 800aeae:	f1b9 0f00 	cmp.w	r9, #0
 800aeb2:	d020      	beq.n	800aef6 <__multiply+0x142>
 800aeb4:	6829      	ldr	r1, [r5, #0]
 800aeb6:	f104 0c14 	add.w	ip, r4, #20
 800aeba:	46ae      	mov	lr, r5
 800aebc:	f04f 0a00 	mov.w	sl, #0
 800aec0:	f8bc b000 	ldrh.w	fp, [ip]
 800aec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aec8:	fb09 220b 	mla	r2, r9, fp, r2
 800aecc:	4492      	add	sl, r2
 800aece:	b289      	uxth	r1, r1
 800aed0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aed4:	f84e 1b04 	str.w	r1, [lr], #4
 800aed8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aedc:	f8be 1000 	ldrh.w	r1, [lr]
 800aee0:	0c12      	lsrs	r2, r2, #16
 800aee2:	fb09 1102 	mla	r1, r9, r2, r1
 800aee6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aeea:	4567      	cmp	r7, ip
 800aeec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aef0:	d8e6      	bhi.n	800aec0 <__multiply+0x10c>
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	50a9      	str	r1, [r5, r2]
 800aef6:	3504      	adds	r5, #4
 800aef8:	e79a      	b.n	800ae30 <__multiply+0x7c>
 800aefa:	3e01      	subs	r6, #1
 800aefc:	e79c      	b.n	800ae38 <__multiply+0x84>
 800aefe:	bf00      	nop
 800af00:	0800c5a0 	.word	0x0800c5a0
 800af04:	0800c62c 	.word	0x0800c62c

0800af08 <__pow5mult>:
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	4615      	mov	r5, r2
 800af0e:	f012 0203 	ands.w	r2, r2, #3
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	d007      	beq.n	800af28 <__pow5mult+0x20>
 800af18:	4c25      	ldr	r4, [pc, #148]	; (800afb0 <__pow5mult+0xa8>)
 800af1a:	3a01      	subs	r2, #1
 800af1c:	2300      	movs	r3, #0
 800af1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af22:	f7ff fe51 	bl	800abc8 <__multadd>
 800af26:	4607      	mov	r7, r0
 800af28:	10ad      	asrs	r5, r5, #2
 800af2a:	d03d      	beq.n	800afa8 <__pow5mult+0xa0>
 800af2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af2e:	b97c      	cbnz	r4, 800af50 <__pow5mult+0x48>
 800af30:	2010      	movs	r0, #16
 800af32:	f7fc fd7f 	bl	8007a34 <malloc>
 800af36:	4602      	mov	r2, r0
 800af38:	6270      	str	r0, [r6, #36]	; 0x24
 800af3a:	b928      	cbnz	r0, 800af48 <__pow5mult+0x40>
 800af3c:	4b1d      	ldr	r3, [pc, #116]	; (800afb4 <__pow5mult+0xac>)
 800af3e:	481e      	ldr	r0, [pc, #120]	; (800afb8 <__pow5mult+0xb0>)
 800af40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af44:	f000 fc3a 	bl	800b7bc <__assert_func>
 800af48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af4c:	6004      	str	r4, [r0, #0]
 800af4e:	60c4      	str	r4, [r0, #12]
 800af50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af58:	b94c      	cbnz	r4, 800af6e <__pow5mult+0x66>
 800af5a:	f240 2171 	movw	r1, #625	; 0x271
 800af5e:	4630      	mov	r0, r6
 800af60:	f7ff ff12 	bl	800ad88 <__i2b>
 800af64:	2300      	movs	r3, #0
 800af66:	f8c8 0008 	str.w	r0, [r8, #8]
 800af6a:	4604      	mov	r4, r0
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	07eb      	lsls	r3, r5, #31
 800af74:	d50a      	bpl.n	800af8c <__pow5mult+0x84>
 800af76:	4639      	mov	r1, r7
 800af78:	4622      	mov	r2, r4
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ff1a 	bl	800adb4 <__multiply>
 800af80:	4639      	mov	r1, r7
 800af82:	4680      	mov	r8, r0
 800af84:	4630      	mov	r0, r6
 800af86:	f7ff fdfd 	bl	800ab84 <_Bfree>
 800af8a:	4647      	mov	r7, r8
 800af8c:	106d      	asrs	r5, r5, #1
 800af8e:	d00b      	beq.n	800afa8 <__pow5mult+0xa0>
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	b938      	cbnz	r0, 800afa4 <__pow5mult+0x9c>
 800af94:	4622      	mov	r2, r4
 800af96:	4621      	mov	r1, r4
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff ff0b 	bl	800adb4 <__multiply>
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	f8c0 9000 	str.w	r9, [r0]
 800afa4:	4604      	mov	r4, r0
 800afa6:	e7e4      	b.n	800af72 <__pow5mult+0x6a>
 800afa8:	4638      	mov	r0, r7
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	bf00      	nop
 800afb0:	0800c778 	.word	0x0800c778
 800afb4:	0800c52e 	.word	0x0800c52e
 800afb8:	0800c62c 	.word	0x0800c62c

0800afbc <__lshift>:
 800afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	460c      	mov	r4, r1
 800afc2:	6849      	ldr	r1, [r1, #4]
 800afc4:	6923      	ldr	r3, [r4, #16]
 800afc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	4607      	mov	r7, r0
 800afce:	4691      	mov	r9, r2
 800afd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afd4:	f108 0601 	add.w	r6, r8, #1
 800afd8:	42b3      	cmp	r3, r6
 800afda:	db0b      	blt.n	800aff4 <__lshift+0x38>
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff fd91 	bl	800ab04 <_Balloc>
 800afe2:	4605      	mov	r5, r0
 800afe4:	b948      	cbnz	r0, 800affa <__lshift+0x3e>
 800afe6:	4602      	mov	r2, r0
 800afe8:	4b2a      	ldr	r3, [pc, #168]	; (800b094 <__lshift+0xd8>)
 800afea:	482b      	ldr	r0, [pc, #172]	; (800b098 <__lshift+0xdc>)
 800afec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aff0:	f000 fbe4 	bl	800b7bc <__assert_func>
 800aff4:	3101      	adds	r1, #1
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	e7ee      	b.n	800afd8 <__lshift+0x1c>
 800affa:	2300      	movs	r3, #0
 800affc:	f100 0114 	add.w	r1, r0, #20
 800b000:	f100 0210 	add.w	r2, r0, #16
 800b004:	4618      	mov	r0, r3
 800b006:	4553      	cmp	r3, sl
 800b008:	db37      	blt.n	800b07a <__lshift+0xbe>
 800b00a:	6920      	ldr	r0, [r4, #16]
 800b00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b010:	f104 0314 	add.w	r3, r4, #20
 800b014:	f019 091f 	ands.w	r9, r9, #31
 800b018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b01c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b020:	d02f      	beq.n	800b082 <__lshift+0xc6>
 800b022:	f1c9 0e20 	rsb	lr, r9, #32
 800b026:	468a      	mov	sl, r1
 800b028:	f04f 0c00 	mov.w	ip, #0
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	fa02 f209 	lsl.w	r2, r2, r9
 800b032:	ea42 020c 	orr.w	r2, r2, ip
 800b036:	f84a 2b04 	str.w	r2, [sl], #4
 800b03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03e:	4298      	cmp	r0, r3
 800b040:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b044:	d8f2      	bhi.n	800b02c <__lshift+0x70>
 800b046:	1b03      	subs	r3, r0, r4
 800b048:	3b15      	subs	r3, #21
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	3304      	adds	r3, #4
 800b050:	f104 0215 	add.w	r2, r4, #21
 800b054:	4290      	cmp	r0, r2
 800b056:	bf38      	it	cc
 800b058:	2304      	movcc	r3, #4
 800b05a:	f841 c003 	str.w	ip, [r1, r3]
 800b05e:	f1bc 0f00 	cmp.w	ip, #0
 800b062:	d001      	beq.n	800b068 <__lshift+0xac>
 800b064:	f108 0602 	add.w	r6, r8, #2
 800b068:	3e01      	subs	r6, #1
 800b06a:	4638      	mov	r0, r7
 800b06c:	612e      	str	r6, [r5, #16]
 800b06e:	4621      	mov	r1, r4
 800b070:	f7ff fd88 	bl	800ab84 <_Bfree>
 800b074:	4628      	mov	r0, r5
 800b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b07e:	3301      	adds	r3, #1
 800b080:	e7c1      	b.n	800b006 <__lshift+0x4a>
 800b082:	3904      	subs	r1, #4
 800b084:	f853 2b04 	ldr.w	r2, [r3], #4
 800b088:	f841 2f04 	str.w	r2, [r1, #4]!
 800b08c:	4298      	cmp	r0, r3
 800b08e:	d8f9      	bhi.n	800b084 <__lshift+0xc8>
 800b090:	e7ea      	b.n	800b068 <__lshift+0xac>
 800b092:	bf00      	nop
 800b094:	0800c5a0 	.word	0x0800c5a0
 800b098:	0800c62c 	.word	0x0800c62c

0800b09c <__mcmp>:
 800b09c:	b530      	push	{r4, r5, lr}
 800b09e:	6902      	ldr	r2, [r0, #16]
 800b0a0:	690c      	ldr	r4, [r1, #16]
 800b0a2:	1b12      	subs	r2, r2, r4
 800b0a4:	d10e      	bne.n	800b0c4 <__mcmp+0x28>
 800b0a6:	f100 0314 	add.w	r3, r0, #20
 800b0aa:	3114      	adds	r1, #20
 800b0ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0bc:	42a5      	cmp	r5, r4
 800b0be:	d003      	beq.n	800b0c8 <__mcmp+0x2c>
 800b0c0:	d305      	bcc.n	800b0ce <__mcmp+0x32>
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	bd30      	pop	{r4, r5, pc}
 800b0c8:	4283      	cmp	r3, r0
 800b0ca:	d3f3      	bcc.n	800b0b4 <__mcmp+0x18>
 800b0cc:	e7fa      	b.n	800b0c4 <__mcmp+0x28>
 800b0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d2:	e7f7      	b.n	800b0c4 <__mcmp+0x28>

0800b0d4 <__mdiff>:
 800b0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	460c      	mov	r4, r1
 800b0da:	4606      	mov	r6, r0
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4690      	mov	r8, r2
 800b0e2:	f7ff ffdb 	bl	800b09c <__mcmp>
 800b0e6:	1e05      	subs	r5, r0, #0
 800b0e8:	d110      	bne.n	800b10c <__mdiff+0x38>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff fd09 	bl	800ab04 <_Balloc>
 800b0f2:	b930      	cbnz	r0, 800b102 <__mdiff+0x2e>
 800b0f4:	4b3a      	ldr	r3, [pc, #232]	; (800b1e0 <__mdiff+0x10c>)
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	f240 2132 	movw	r1, #562	; 0x232
 800b0fc:	4839      	ldr	r0, [pc, #228]	; (800b1e4 <__mdiff+0x110>)
 800b0fe:	f000 fb5d 	bl	800b7bc <__assert_func>
 800b102:	2301      	movs	r3, #1
 800b104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	bfa4      	itt	ge
 800b10e:	4643      	movge	r3, r8
 800b110:	46a0      	movge	r8, r4
 800b112:	4630      	mov	r0, r6
 800b114:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b118:	bfa6      	itte	ge
 800b11a:	461c      	movge	r4, r3
 800b11c:	2500      	movge	r5, #0
 800b11e:	2501      	movlt	r5, #1
 800b120:	f7ff fcf0 	bl	800ab04 <_Balloc>
 800b124:	b920      	cbnz	r0, 800b130 <__mdiff+0x5c>
 800b126:	4b2e      	ldr	r3, [pc, #184]	; (800b1e0 <__mdiff+0x10c>)
 800b128:	4602      	mov	r2, r0
 800b12a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b12e:	e7e5      	b.n	800b0fc <__mdiff+0x28>
 800b130:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b134:	6926      	ldr	r6, [r4, #16]
 800b136:	60c5      	str	r5, [r0, #12]
 800b138:	f104 0914 	add.w	r9, r4, #20
 800b13c:	f108 0514 	add.w	r5, r8, #20
 800b140:	f100 0e14 	add.w	lr, r0, #20
 800b144:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b148:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b14c:	f108 0210 	add.w	r2, r8, #16
 800b150:	46f2      	mov	sl, lr
 800b152:	2100      	movs	r1, #0
 800b154:	f859 3b04 	ldr.w	r3, [r9], #4
 800b158:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b15c:	fa1f f883 	uxth.w	r8, r3
 800b160:	fa11 f18b 	uxtah	r1, r1, fp
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	eba1 0808 	sub.w	r8, r1, r8
 800b16a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b16e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b172:	fa1f f888 	uxth.w	r8, r8
 800b176:	1419      	asrs	r1, r3, #16
 800b178:	454e      	cmp	r6, r9
 800b17a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b17e:	f84a 3b04 	str.w	r3, [sl], #4
 800b182:	d8e7      	bhi.n	800b154 <__mdiff+0x80>
 800b184:	1b33      	subs	r3, r6, r4
 800b186:	3b15      	subs	r3, #21
 800b188:	f023 0303 	bic.w	r3, r3, #3
 800b18c:	3304      	adds	r3, #4
 800b18e:	3415      	adds	r4, #21
 800b190:	42a6      	cmp	r6, r4
 800b192:	bf38      	it	cc
 800b194:	2304      	movcc	r3, #4
 800b196:	441d      	add	r5, r3
 800b198:	4473      	add	r3, lr
 800b19a:	469e      	mov	lr, r3
 800b19c:	462e      	mov	r6, r5
 800b19e:	4566      	cmp	r6, ip
 800b1a0:	d30e      	bcc.n	800b1c0 <__mdiff+0xec>
 800b1a2:	f10c 0203 	add.w	r2, ip, #3
 800b1a6:	1b52      	subs	r2, r2, r5
 800b1a8:	f022 0203 	bic.w	r2, r2, #3
 800b1ac:	3d03      	subs	r5, #3
 800b1ae:	45ac      	cmp	ip, r5
 800b1b0:	bf38      	it	cc
 800b1b2:	2200      	movcc	r2, #0
 800b1b4:	441a      	add	r2, r3
 800b1b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1ba:	b17b      	cbz	r3, 800b1dc <__mdiff+0x108>
 800b1bc:	6107      	str	r7, [r0, #16]
 800b1be:	e7a3      	b.n	800b108 <__mdiff+0x34>
 800b1c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1c4:	fa11 f288 	uxtah	r2, r1, r8
 800b1c8:	1414      	asrs	r4, r2, #16
 800b1ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1d4:	f84e 2b04 	str.w	r2, [lr], #4
 800b1d8:	1421      	asrs	r1, r4, #16
 800b1da:	e7e0      	b.n	800b19e <__mdiff+0xca>
 800b1dc:	3f01      	subs	r7, #1
 800b1de:	e7ea      	b.n	800b1b6 <__mdiff+0xe2>
 800b1e0:	0800c5a0 	.word	0x0800c5a0
 800b1e4:	0800c62c 	.word	0x0800c62c

0800b1e8 <__ulp>:
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	ed8d 0b00 	vstr	d0, [sp]
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	4912      	ldr	r1, [pc, #72]	; (800b23c <__ulp+0x54>)
 800b1f2:	4019      	ands	r1, r3
 800b1f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	dd05      	ble.n	800b208 <__ulp+0x20>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	460b      	mov	r3, r1
 800b200:	ec43 2b10 	vmov	d0, r2, r3
 800b204:	b002      	add	sp, #8
 800b206:	4770      	bx	lr
 800b208:	4249      	negs	r1, r1
 800b20a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b20e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	da04      	bge.n	800b226 <__ulp+0x3e>
 800b21c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b220:	fa41 f300 	asr.w	r3, r1, r0
 800b224:	e7ec      	b.n	800b200 <__ulp+0x18>
 800b226:	f1a0 0114 	sub.w	r1, r0, #20
 800b22a:	291e      	cmp	r1, #30
 800b22c:	bfda      	itte	le
 800b22e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b232:	fa20 f101 	lsrle.w	r1, r0, r1
 800b236:	2101      	movgt	r1, #1
 800b238:	460a      	mov	r2, r1
 800b23a:	e7e1      	b.n	800b200 <__ulp+0x18>
 800b23c:	7ff00000 	.word	0x7ff00000

0800b240 <__b2d>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	6905      	ldr	r5, [r0, #16]
 800b244:	f100 0714 	add.w	r7, r0, #20
 800b248:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b24c:	1f2e      	subs	r6, r5, #4
 800b24e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff fd48 	bl	800ace8 <__hi0bits>
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	280a      	cmp	r0, #10
 800b25e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2dc <__b2d+0x9c>
 800b262:	600b      	str	r3, [r1, #0]
 800b264:	dc14      	bgt.n	800b290 <__b2d+0x50>
 800b266:	f1c0 0e0b 	rsb	lr, r0, #11
 800b26a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b26e:	42b7      	cmp	r7, r6
 800b270:	ea41 030c 	orr.w	r3, r1, ip
 800b274:	bf34      	ite	cc
 800b276:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b27a:	2100      	movcs	r1, #0
 800b27c:	3015      	adds	r0, #21
 800b27e:	fa04 f000 	lsl.w	r0, r4, r0
 800b282:	fa21 f10e 	lsr.w	r1, r1, lr
 800b286:	ea40 0201 	orr.w	r2, r0, r1
 800b28a:	ec43 2b10 	vmov	d0, r2, r3
 800b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b290:	42b7      	cmp	r7, r6
 800b292:	bf3a      	itte	cc
 800b294:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b298:	f1a5 0608 	subcc.w	r6, r5, #8
 800b29c:	2100      	movcs	r1, #0
 800b29e:	380b      	subs	r0, #11
 800b2a0:	d017      	beq.n	800b2d2 <__b2d+0x92>
 800b2a2:	f1c0 0c20 	rsb	ip, r0, #32
 800b2a6:	fa04 f500 	lsl.w	r5, r4, r0
 800b2aa:	42be      	cmp	r6, r7
 800b2ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2b0:	ea45 0504 	orr.w	r5, r5, r4
 800b2b4:	bf8c      	ite	hi
 800b2b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2ba:	2400      	movls	r4, #0
 800b2bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2c0:	fa01 f000 	lsl.w	r0, r1, r0
 800b2c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2cc:	ea40 0204 	orr.w	r2, r0, r4
 800b2d0:	e7db      	b.n	800b28a <__b2d+0x4a>
 800b2d2:	ea44 030c 	orr.w	r3, r4, ip
 800b2d6:	460a      	mov	r2, r1
 800b2d8:	e7d7      	b.n	800b28a <__b2d+0x4a>
 800b2da:	bf00      	nop
 800b2dc:	3ff00000 	.word	0x3ff00000

0800b2e0 <__d2b>:
 800b2e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	4689      	mov	r9, r1
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	ec57 6b10 	vmov	r6, r7, d0
 800b2ec:	4690      	mov	r8, r2
 800b2ee:	f7ff fc09 	bl	800ab04 <_Balloc>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b930      	cbnz	r0, 800b304 <__d2b+0x24>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	4b25      	ldr	r3, [pc, #148]	; (800b390 <__d2b+0xb0>)
 800b2fa:	4826      	ldr	r0, [pc, #152]	; (800b394 <__d2b+0xb4>)
 800b2fc:	f240 310a 	movw	r1, #778	; 0x30a
 800b300:	f000 fa5c 	bl	800b7bc <__assert_func>
 800b304:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b30c:	bb35      	cbnz	r5, 800b35c <__d2b+0x7c>
 800b30e:	2e00      	cmp	r6, #0
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	d028      	beq.n	800b366 <__d2b+0x86>
 800b314:	4668      	mov	r0, sp
 800b316:	9600      	str	r6, [sp, #0]
 800b318:	f7ff fd06 	bl	800ad28 <__lo0bits>
 800b31c:	9900      	ldr	r1, [sp, #0]
 800b31e:	b300      	cbz	r0, 800b362 <__d2b+0x82>
 800b320:	9a01      	ldr	r2, [sp, #4]
 800b322:	f1c0 0320 	rsb	r3, r0, #32
 800b326:	fa02 f303 	lsl.w	r3, r2, r3
 800b32a:	430b      	orrs	r3, r1
 800b32c:	40c2      	lsrs	r2, r0
 800b32e:	6163      	str	r3, [r4, #20]
 800b330:	9201      	str	r2, [sp, #4]
 800b332:	9b01      	ldr	r3, [sp, #4]
 800b334:	61a3      	str	r3, [r4, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	bf14      	ite	ne
 800b33a:	2202      	movne	r2, #2
 800b33c:	2201      	moveq	r2, #1
 800b33e:	6122      	str	r2, [r4, #16]
 800b340:	b1d5      	cbz	r5, 800b378 <__d2b+0x98>
 800b342:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b346:	4405      	add	r5, r0
 800b348:	f8c9 5000 	str.w	r5, [r9]
 800b34c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b350:	f8c8 0000 	str.w	r0, [r8]
 800b354:	4620      	mov	r0, r4
 800b356:	b003      	add	sp, #12
 800b358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b35c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b360:	e7d5      	b.n	800b30e <__d2b+0x2e>
 800b362:	6161      	str	r1, [r4, #20]
 800b364:	e7e5      	b.n	800b332 <__d2b+0x52>
 800b366:	a801      	add	r0, sp, #4
 800b368:	f7ff fcde 	bl	800ad28 <__lo0bits>
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	6163      	str	r3, [r4, #20]
 800b370:	2201      	movs	r2, #1
 800b372:	6122      	str	r2, [r4, #16]
 800b374:	3020      	adds	r0, #32
 800b376:	e7e3      	b.n	800b340 <__d2b+0x60>
 800b378:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b37c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b380:	f8c9 0000 	str.w	r0, [r9]
 800b384:	6918      	ldr	r0, [r3, #16]
 800b386:	f7ff fcaf 	bl	800ace8 <__hi0bits>
 800b38a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b38e:	e7df      	b.n	800b350 <__d2b+0x70>
 800b390:	0800c5a0 	.word	0x0800c5a0
 800b394:	0800c62c 	.word	0x0800c62c

0800b398 <__ratio>:
 800b398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4688      	mov	r8, r1
 800b39e:	4669      	mov	r1, sp
 800b3a0:	4681      	mov	r9, r0
 800b3a2:	f7ff ff4d 	bl	800b240 <__b2d>
 800b3a6:	a901      	add	r1, sp, #4
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	ec55 4b10 	vmov	r4, r5, d0
 800b3ae:	f7ff ff47 	bl	800b240 <__b2d>
 800b3b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3ba:	eba3 0c02 	sub.w	ip, r3, r2
 800b3be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3c2:	1a9b      	subs	r3, r3, r2
 800b3c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3c8:	ec51 0b10 	vmov	r0, r1, d0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfd6      	itet	le
 800b3d0:	460a      	movle	r2, r1
 800b3d2:	462a      	movgt	r2, r5
 800b3d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3d8:	468b      	mov	fp, r1
 800b3da:	462f      	mov	r7, r5
 800b3dc:	bfd4      	ite	le
 800b3de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	ee10 2a10 	vmov	r2, s0
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 fa34 	bl	800085c <__aeabi_ddiv>
 800b3f4:	ec41 0b10 	vmov	d0, r0, r1
 800b3f8:	b003      	add	sp, #12
 800b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3fe <__copybits>:
 800b3fe:	3901      	subs	r1, #1
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	1149      	asrs	r1, r1, #5
 800b404:	6914      	ldr	r4, [r2, #16]
 800b406:	3101      	adds	r1, #1
 800b408:	f102 0314 	add.w	r3, r2, #20
 800b40c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b410:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b414:	1f05      	subs	r5, r0, #4
 800b416:	42a3      	cmp	r3, r4
 800b418:	d30c      	bcc.n	800b434 <__copybits+0x36>
 800b41a:	1aa3      	subs	r3, r4, r2
 800b41c:	3b11      	subs	r3, #17
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	3211      	adds	r2, #17
 800b424:	42a2      	cmp	r2, r4
 800b426:	bf88      	it	hi
 800b428:	2300      	movhi	r3, #0
 800b42a:	4418      	add	r0, r3
 800b42c:	2300      	movs	r3, #0
 800b42e:	4288      	cmp	r0, r1
 800b430:	d305      	bcc.n	800b43e <__copybits+0x40>
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	f853 6b04 	ldr.w	r6, [r3], #4
 800b438:	f845 6f04 	str.w	r6, [r5, #4]!
 800b43c:	e7eb      	b.n	800b416 <__copybits+0x18>
 800b43e:	f840 3b04 	str.w	r3, [r0], #4
 800b442:	e7f4      	b.n	800b42e <__copybits+0x30>

0800b444 <__any_on>:
 800b444:	f100 0214 	add.w	r2, r0, #20
 800b448:	6900      	ldr	r0, [r0, #16]
 800b44a:	114b      	asrs	r3, r1, #5
 800b44c:	4298      	cmp	r0, r3
 800b44e:	b510      	push	{r4, lr}
 800b450:	db11      	blt.n	800b476 <__any_on+0x32>
 800b452:	dd0a      	ble.n	800b46a <__any_on+0x26>
 800b454:	f011 011f 	ands.w	r1, r1, #31
 800b458:	d007      	beq.n	800b46a <__any_on+0x26>
 800b45a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b45e:	fa24 f001 	lsr.w	r0, r4, r1
 800b462:	fa00 f101 	lsl.w	r1, r0, r1
 800b466:	428c      	cmp	r4, r1
 800b468:	d10b      	bne.n	800b482 <__any_on+0x3e>
 800b46a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b46e:	4293      	cmp	r3, r2
 800b470:	d803      	bhi.n	800b47a <__any_on+0x36>
 800b472:	2000      	movs	r0, #0
 800b474:	bd10      	pop	{r4, pc}
 800b476:	4603      	mov	r3, r0
 800b478:	e7f7      	b.n	800b46a <__any_on+0x26>
 800b47a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b47e:	2900      	cmp	r1, #0
 800b480:	d0f5      	beq.n	800b46e <__any_on+0x2a>
 800b482:	2001      	movs	r0, #1
 800b484:	e7f6      	b.n	800b474 <__any_on+0x30>

0800b486 <_calloc_r>:
 800b486:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b488:	fba1 2402 	umull	r2, r4, r1, r2
 800b48c:	b94c      	cbnz	r4, 800b4a2 <_calloc_r+0x1c>
 800b48e:	4611      	mov	r1, r2
 800b490:	9201      	str	r2, [sp, #4]
 800b492:	f7fc fb4b 	bl	8007b2c <_malloc_r>
 800b496:	9a01      	ldr	r2, [sp, #4]
 800b498:	4605      	mov	r5, r0
 800b49a:	b930      	cbnz	r0, 800b4aa <_calloc_r+0x24>
 800b49c:	4628      	mov	r0, r5
 800b49e:	b003      	add	sp, #12
 800b4a0:	bd30      	pop	{r4, r5, pc}
 800b4a2:	220c      	movs	r2, #12
 800b4a4:	6002      	str	r2, [r0, #0]
 800b4a6:	2500      	movs	r5, #0
 800b4a8:	e7f8      	b.n	800b49c <_calloc_r+0x16>
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	f7fc faca 	bl	8007a44 <memset>
 800b4b0:	e7f4      	b.n	800b49c <_calloc_r+0x16>

0800b4b2 <__ssputs_r>:
 800b4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b6:	688e      	ldr	r6, [r1, #8]
 800b4b8:	429e      	cmp	r6, r3
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	460c      	mov	r4, r1
 800b4be:	4690      	mov	r8, r2
 800b4c0:	461f      	mov	r7, r3
 800b4c2:	d838      	bhi.n	800b536 <__ssputs_r+0x84>
 800b4c4:	898a      	ldrh	r2, [r1, #12]
 800b4c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4ca:	d032      	beq.n	800b532 <__ssputs_r+0x80>
 800b4cc:	6825      	ldr	r5, [r4, #0]
 800b4ce:	6909      	ldr	r1, [r1, #16]
 800b4d0:	eba5 0901 	sub.w	r9, r5, r1
 800b4d4:	6965      	ldr	r5, [r4, #20]
 800b4d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4de:	3301      	adds	r3, #1
 800b4e0:	444b      	add	r3, r9
 800b4e2:	106d      	asrs	r5, r5, #1
 800b4e4:	429d      	cmp	r5, r3
 800b4e6:	bf38      	it	cc
 800b4e8:	461d      	movcc	r5, r3
 800b4ea:	0553      	lsls	r3, r2, #21
 800b4ec:	d531      	bpl.n	800b552 <__ssputs_r+0xa0>
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7fc fb1c 	bl	8007b2c <_malloc_r>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	b950      	cbnz	r0, 800b50e <__ssputs_r+0x5c>
 800b4f8:	230c      	movs	r3, #12
 800b4fa:	f8ca 3000 	str.w	r3, [sl]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	f04f 30ff 	mov.w	r0, #4294967295
 800b50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50e:	6921      	ldr	r1, [r4, #16]
 800b510:	464a      	mov	r2, r9
 800b512:	f7ff fadd 	bl	800aad0 <memcpy>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	6126      	str	r6, [r4, #16]
 800b524:	6165      	str	r5, [r4, #20]
 800b526:	444e      	add	r6, r9
 800b528:	eba5 0509 	sub.w	r5, r5, r9
 800b52c:	6026      	str	r6, [r4, #0]
 800b52e:	60a5      	str	r5, [r4, #8]
 800b530:	463e      	mov	r6, r7
 800b532:	42be      	cmp	r6, r7
 800b534:	d900      	bls.n	800b538 <__ssputs_r+0x86>
 800b536:	463e      	mov	r6, r7
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	4632      	mov	r2, r6
 800b53c:	4641      	mov	r1, r8
 800b53e:	f000 f970 	bl	800b822 <memmove>
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	1b9b      	subs	r3, r3, r6
 800b546:	60a3      	str	r3, [r4, #8]
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	4433      	add	r3, r6
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	2000      	movs	r0, #0
 800b550:	e7db      	b.n	800b50a <__ssputs_r+0x58>
 800b552:	462a      	mov	r2, r5
 800b554:	f000 f97f 	bl	800b856 <_realloc_r>
 800b558:	4606      	mov	r6, r0
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d1e1      	bne.n	800b522 <__ssputs_r+0x70>
 800b55e:	6921      	ldr	r1, [r4, #16]
 800b560:	4650      	mov	r0, sl
 800b562:	f7fc fa77 	bl	8007a54 <_free_r>
 800b566:	e7c7      	b.n	800b4f8 <__ssputs_r+0x46>

0800b568 <_svfiprintf_r>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	4698      	mov	r8, r3
 800b56e:	898b      	ldrh	r3, [r1, #12]
 800b570:	061b      	lsls	r3, r3, #24
 800b572:	b09d      	sub	sp, #116	; 0x74
 800b574:	4607      	mov	r7, r0
 800b576:	460d      	mov	r5, r1
 800b578:	4614      	mov	r4, r2
 800b57a:	d50e      	bpl.n	800b59a <_svfiprintf_r+0x32>
 800b57c:	690b      	ldr	r3, [r1, #16]
 800b57e:	b963      	cbnz	r3, 800b59a <_svfiprintf_r+0x32>
 800b580:	2140      	movs	r1, #64	; 0x40
 800b582:	f7fc fad3 	bl	8007b2c <_malloc_r>
 800b586:	6028      	str	r0, [r5, #0]
 800b588:	6128      	str	r0, [r5, #16]
 800b58a:	b920      	cbnz	r0, 800b596 <_svfiprintf_r+0x2e>
 800b58c:	230c      	movs	r3, #12
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	e0d1      	b.n	800b73a <_svfiprintf_r+0x1d2>
 800b596:	2340      	movs	r3, #64	; 0x40
 800b598:	616b      	str	r3, [r5, #20]
 800b59a:	2300      	movs	r3, #0
 800b59c:	9309      	str	r3, [sp, #36]	; 0x24
 800b59e:	2320      	movs	r3, #32
 800b5a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5a8:	2330      	movs	r3, #48	; 0x30
 800b5aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b754 <_svfiprintf_r+0x1ec>
 800b5ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5b2:	f04f 0901 	mov.w	r9, #1
 800b5b6:	4623      	mov	r3, r4
 800b5b8:	469a      	mov	sl, r3
 800b5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5be:	b10a      	cbz	r2, 800b5c4 <_svfiprintf_r+0x5c>
 800b5c0:	2a25      	cmp	r2, #37	; 0x25
 800b5c2:	d1f9      	bne.n	800b5b8 <_svfiprintf_r+0x50>
 800b5c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c8:	d00b      	beq.n	800b5e2 <_svfiprintf_r+0x7a>
 800b5ca:	465b      	mov	r3, fp
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	f7ff ff6e 	bl	800b4b2 <__ssputs_r>
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	f000 80aa 	beq.w	800b730 <_svfiprintf_r+0x1c8>
 800b5dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5de:	445a      	add	r2, fp
 800b5e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 80a2 	beq.w	800b730 <_svfiprintf_r+0x1c8>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f6:	f10a 0a01 	add.w	sl, sl, #1
 800b5fa:	9304      	str	r3, [sp, #16]
 800b5fc:	9307      	str	r3, [sp, #28]
 800b5fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b602:	931a      	str	r3, [sp, #104]	; 0x68
 800b604:	4654      	mov	r4, sl
 800b606:	2205      	movs	r2, #5
 800b608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60c:	4851      	ldr	r0, [pc, #324]	; (800b754 <_svfiprintf_r+0x1ec>)
 800b60e:	f7f4 fdef 	bl	80001f0 <memchr>
 800b612:	9a04      	ldr	r2, [sp, #16]
 800b614:	b9d8      	cbnz	r0, 800b64e <_svfiprintf_r+0xe6>
 800b616:	06d0      	lsls	r0, r2, #27
 800b618:	bf44      	itt	mi
 800b61a:	2320      	movmi	r3, #32
 800b61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b620:	0711      	lsls	r1, r2, #28
 800b622:	bf44      	itt	mi
 800b624:	232b      	movmi	r3, #43	; 0x2b
 800b626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b62a:	f89a 3000 	ldrb.w	r3, [sl]
 800b62e:	2b2a      	cmp	r3, #42	; 0x2a
 800b630:	d015      	beq.n	800b65e <_svfiprintf_r+0xf6>
 800b632:	9a07      	ldr	r2, [sp, #28]
 800b634:	4654      	mov	r4, sl
 800b636:	2000      	movs	r0, #0
 800b638:	f04f 0c0a 	mov.w	ip, #10
 800b63c:	4621      	mov	r1, r4
 800b63e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b642:	3b30      	subs	r3, #48	; 0x30
 800b644:	2b09      	cmp	r3, #9
 800b646:	d94e      	bls.n	800b6e6 <_svfiprintf_r+0x17e>
 800b648:	b1b0      	cbz	r0, 800b678 <_svfiprintf_r+0x110>
 800b64a:	9207      	str	r2, [sp, #28]
 800b64c:	e014      	b.n	800b678 <_svfiprintf_r+0x110>
 800b64e:	eba0 0308 	sub.w	r3, r0, r8
 800b652:	fa09 f303 	lsl.w	r3, r9, r3
 800b656:	4313      	orrs	r3, r2
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	46a2      	mov	sl, r4
 800b65c:	e7d2      	b.n	800b604 <_svfiprintf_r+0x9c>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	1d19      	adds	r1, r3, #4
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	9103      	str	r1, [sp, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	bfbb      	ittet	lt
 800b66a:	425b      	neglt	r3, r3
 800b66c:	f042 0202 	orrlt.w	r2, r2, #2
 800b670:	9307      	strge	r3, [sp, #28]
 800b672:	9307      	strlt	r3, [sp, #28]
 800b674:	bfb8      	it	lt
 800b676:	9204      	strlt	r2, [sp, #16]
 800b678:	7823      	ldrb	r3, [r4, #0]
 800b67a:	2b2e      	cmp	r3, #46	; 0x2e
 800b67c:	d10c      	bne.n	800b698 <_svfiprintf_r+0x130>
 800b67e:	7863      	ldrb	r3, [r4, #1]
 800b680:	2b2a      	cmp	r3, #42	; 0x2a
 800b682:	d135      	bne.n	800b6f0 <_svfiprintf_r+0x188>
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	1d1a      	adds	r2, r3, #4
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	9203      	str	r2, [sp, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bfb8      	it	lt
 800b690:	f04f 33ff 	movlt.w	r3, #4294967295
 800b694:	3402      	adds	r4, #2
 800b696:	9305      	str	r3, [sp, #20]
 800b698:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b764 <_svfiprintf_r+0x1fc>
 800b69c:	7821      	ldrb	r1, [r4, #0]
 800b69e:	2203      	movs	r2, #3
 800b6a0:	4650      	mov	r0, sl
 800b6a2:	f7f4 fda5 	bl	80001f0 <memchr>
 800b6a6:	b140      	cbz	r0, 800b6ba <_svfiprintf_r+0x152>
 800b6a8:	2340      	movs	r3, #64	; 0x40
 800b6aa:	eba0 000a 	sub.w	r0, r0, sl
 800b6ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b6b2:	9b04      	ldr	r3, [sp, #16]
 800b6b4:	4303      	orrs	r3, r0
 800b6b6:	3401      	adds	r4, #1
 800b6b8:	9304      	str	r3, [sp, #16]
 800b6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6be:	4826      	ldr	r0, [pc, #152]	; (800b758 <_svfiprintf_r+0x1f0>)
 800b6c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6c4:	2206      	movs	r2, #6
 800b6c6:	f7f4 fd93 	bl	80001f0 <memchr>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d038      	beq.n	800b740 <_svfiprintf_r+0x1d8>
 800b6ce:	4b23      	ldr	r3, [pc, #140]	; (800b75c <_svfiprintf_r+0x1f4>)
 800b6d0:	bb1b      	cbnz	r3, 800b71a <_svfiprintf_r+0x1b2>
 800b6d2:	9b03      	ldr	r3, [sp, #12]
 800b6d4:	3307      	adds	r3, #7
 800b6d6:	f023 0307 	bic.w	r3, r3, #7
 800b6da:	3308      	adds	r3, #8
 800b6dc:	9303      	str	r3, [sp, #12]
 800b6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e0:	4433      	add	r3, r6
 800b6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e4:	e767      	b.n	800b5b6 <_svfiprintf_r+0x4e>
 800b6e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	e7a5      	b.n	800b63c <_svfiprintf_r+0xd4>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	3401      	adds	r4, #1
 800b6f4:	9305      	str	r3, [sp, #20]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f04f 0c0a 	mov.w	ip, #10
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b702:	3a30      	subs	r2, #48	; 0x30
 800b704:	2a09      	cmp	r2, #9
 800b706:	d903      	bls.n	800b710 <_svfiprintf_r+0x1a8>
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0c5      	beq.n	800b698 <_svfiprintf_r+0x130>
 800b70c:	9105      	str	r1, [sp, #20]
 800b70e:	e7c3      	b.n	800b698 <_svfiprintf_r+0x130>
 800b710:	fb0c 2101 	mla	r1, ip, r1, r2
 800b714:	4604      	mov	r4, r0
 800b716:	2301      	movs	r3, #1
 800b718:	e7f0      	b.n	800b6fc <_svfiprintf_r+0x194>
 800b71a:	ab03      	add	r3, sp, #12
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	462a      	mov	r2, r5
 800b720:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <_svfiprintf_r+0x1f8>)
 800b722:	a904      	add	r1, sp, #16
 800b724:	4638      	mov	r0, r7
 800b726:	f7fc fb15 	bl	8007d54 <_printf_float>
 800b72a:	1c42      	adds	r2, r0, #1
 800b72c:	4606      	mov	r6, r0
 800b72e:	d1d6      	bne.n	800b6de <_svfiprintf_r+0x176>
 800b730:	89ab      	ldrh	r3, [r5, #12]
 800b732:	065b      	lsls	r3, r3, #25
 800b734:	f53f af2c 	bmi.w	800b590 <_svfiprintf_r+0x28>
 800b738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b73a:	b01d      	add	sp, #116	; 0x74
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b740:	ab03      	add	r3, sp, #12
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	462a      	mov	r2, r5
 800b746:	4b06      	ldr	r3, [pc, #24]	; (800b760 <_svfiprintf_r+0x1f8>)
 800b748:	a904      	add	r1, sp, #16
 800b74a:	4638      	mov	r0, r7
 800b74c:	f7fc fda6 	bl	800829c <_printf_i>
 800b750:	e7eb      	b.n	800b72a <_svfiprintf_r+0x1c2>
 800b752:	bf00      	nop
 800b754:	0800c784 	.word	0x0800c784
 800b758:	0800c78e 	.word	0x0800c78e
 800b75c:	08007d55 	.word	0x08007d55
 800b760:	0800b4b3 	.word	0x0800b4b3
 800b764:	0800c78a 	.word	0x0800c78a

0800b768 <nan>:
 800b768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b770 <nan+0x8>
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	00000000 	.word	0x00000000
 800b774:	7ff80000 	.word	0x7ff80000

0800b778 <strncmp>:
 800b778:	b510      	push	{r4, lr}
 800b77a:	b17a      	cbz	r2, 800b79c <strncmp+0x24>
 800b77c:	4603      	mov	r3, r0
 800b77e:	3901      	subs	r1, #1
 800b780:	1884      	adds	r4, r0, r2
 800b782:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b786:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b78a:	4290      	cmp	r0, r2
 800b78c:	d101      	bne.n	800b792 <strncmp+0x1a>
 800b78e:	42a3      	cmp	r3, r4
 800b790:	d101      	bne.n	800b796 <strncmp+0x1e>
 800b792:	1a80      	subs	r0, r0, r2
 800b794:	bd10      	pop	{r4, pc}
 800b796:	2800      	cmp	r0, #0
 800b798:	d1f3      	bne.n	800b782 <strncmp+0xa>
 800b79a:	e7fa      	b.n	800b792 <strncmp+0x1a>
 800b79c:	4610      	mov	r0, r2
 800b79e:	e7f9      	b.n	800b794 <strncmp+0x1c>

0800b7a0 <__ascii_wctomb>:
 800b7a0:	b149      	cbz	r1, 800b7b6 <__ascii_wctomb+0x16>
 800b7a2:	2aff      	cmp	r2, #255	; 0xff
 800b7a4:	bf85      	ittet	hi
 800b7a6:	238a      	movhi	r3, #138	; 0x8a
 800b7a8:	6003      	strhi	r3, [r0, #0]
 800b7aa:	700a      	strbls	r2, [r1, #0]
 800b7ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7b0:	bf98      	it	ls
 800b7b2:	2001      	movls	r0, #1
 800b7b4:	4770      	bx	lr
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4770      	bx	lr
	...

0800b7bc <__assert_func>:
 800b7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7be:	4614      	mov	r4, r2
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4b09      	ldr	r3, [pc, #36]	; (800b7e8 <__assert_func+0x2c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	68d8      	ldr	r0, [r3, #12]
 800b7ca:	b14c      	cbz	r4, 800b7e0 <__assert_func+0x24>
 800b7cc:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <__assert_func+0x30>)
 800b7ce:	9100      	str	r1, [sp, #0]
 800b7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7d4:	4906      	ldr	r1, [pc, #24]	; (800b7f0 <__assert_func+0x34>)
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	f000 f80e 	bl	800b7f8 <fiprintf>
 800b7dc:	f000 fa84 	bl	800bce8 <abort>
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <__assert_func+0x38>)
 800b7e2:	461c      	mov	r4, r3
 800b7e4:	e7f3      	b.n	800b7ce <__assert_func+0x12>
 800b7e6:	bf00      	nop
 800b7e8:	200000fc 	.word	0x200000fc
 800b7ec:	0800c795 	.word	0x0800c795
 800b7f0:	0800c7a2 	.word	0x0800c7a2
 800b7f4:	0800c7d0 	.word	0x0800c7d0

0800b7f8 <fiprintf>:
 800b7f8:	b40e      	push	{r1, r2, r3}
 800b7fa:	b503      	push	{r0, r1, lr}
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	ab03      	add	r3, sp, #12
 800b800:	4805      	ldr	r0, [pc, #20]	; (800b818 <fiprintf+0x20>)
 800b802:	f853 2b04 	ldr.w	r2, [r3], #4
 800b806:	6800      	ldr	r0, [r0, #0]
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	f000 f87d 	bl	800b908 <_vfiprintf_r>
 800b80e:	b002      	add	sp, #8
 800b810:	f85d eb04 	ldr.w	lr, [sp], #4
 800b814:	b003      	add	sp, #12
 800b816:	4770      	bx	lr
 800b818:	200000fc 	.word	0x200000fc

0800b81c <__retarget_lock_init_recursive>:
 800b81c:	4770      	bx	lr

0800b81e <__retarget_lock_acquire_recursive>:
 800b81e:	4770      	bx	lr

0800b820 <__retarget_lock_release_recursive>:
 800b820:	4770      	bx	lr

0800b822 <memmove>:
 800b822:	4288      	cmp	r0, r1
 800b824:	b510      	push	{r4, lr}
 800b826:	eb01 0402 	add.w	r4, r1, r2
 800b82a:	d902      	bls.n	800b832 <memmove+0x10>
 800b82c:	4284      	cmp	r4, r0
 800b82e:	4623      	mov	r3, r4
 800b830:	d807      	bhi.n	800b842 <memmove+0x20>
 800b832:	1e43      	subs	r3, r0, #1
 800b834:	42a1      	cmp	r1, r4
 800b836:	d008      	beq.n	800b84a <memmove+0x28>
 800b838:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b840:	e7f8      	b.n	800b834 <memmove+0x12>
 800b842:	4402      	add	r2, r0
 800b844:	4601      	mov	r1, r0
 800b846:	428a      	cmp	r2, r1
 800b848:	d100      	bne.n	800b84c <memmove+0x2a>
 800b84a:	bd10      	pop	{r4, pc}
 800b84c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b850:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b854:	e7f7      	b.n	800b846 <memmove+0x24>

0800b856 <_realloc_r>:
 800b856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85a:	4680      	mov	r8, r0
 800b85c:	4614      	mov	r4, r2
 800b85e:	460e      	mov	r6, r1
 800b860:	b921      	cbnz	r1, 800b86c <_realloc_r+0x16>
 800b862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b866:	4611      	mov	r1, r2
 800b868:	f7fc b960 	b.w	8007b2c <_malloc_r>
 800b86c:	b92a      	cbnz	r2, 800b87a <_realloc_r+0x24>
 800b86e:	f7fc f8f1 	bl	8007a54 <_free_r>
 800b872:	4625      	mov	r5, r4
 800b874:	4628      	mov	r0, r5
 800b876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87a:	f000 fc59 	bl	800c130 <_malloc_usable_size_r>
 800b87e:	4284      	cmp	r4, r0
 800b880:	4607      	mov	r7, r0
 800b882:	d802      	bhi.n	800b88a <_realloc_r+0x34>
 800b884:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b888:	d812      	bhi.n	800b8b0 <_realloc_r+0x5a>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4640      	mov	r0, r8
 800b88e:	f7fc f94d 	bl	8007b2c <_malloc_r>
 800b892:	4605      	mov	r5, r0
 800b894:	2800      	cmp	r0, #0
 800b896:	d0ed      	beq.n	800b874 <_realloc_r+0x1e>
 800b898:	42bc      	cmp	r4, r7
 800b89a:	4622      	mov	r2, r4
 800b89c:	4631      	mov	r1, r6
 800b89e:	bf28      	it	cs
 800b8a0:	463a      	movcs	r2, r7
 800b8a2:	f7ff f915 	bl	800aad0 <memcpy>
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	f7fc f8d3 	bl	8007a54 <_free_r>
 800b8ae:	e7e1      	b.n	800b874 <_realloc_r+0x1e>
 800b8b0:	4635      	mov	r5, r6
 800b8b2:	e7df      	b.n	800b874 <_realloc_r+0x1e>

0800b8b4 <__sfputc_r>:
 800b8b4:	6893      	ldr	r3, [r2, #8]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	b410      	push	{r4}
 800b8bc:	6093      	str	r3, [r2, #8]
 800b8be:	da08      	bge.n	800b8d2 <__sfputc_r+0x1e>
 800b8c0:	6994      	ldr	r4, [r2, #24]
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	db01      	blt.n	800b8ca <__sfputc_r+0x16>
 800b8c6:	290a      	cmp	r1, #10
 800b8c8:	d103      	bne.n	800b8d2 <__sfputc_r+0x1e>
 800b8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ce:	f000 b94b 	b.w	800bb68 <__swbuf_r>
 800b8d2:	6813      	ldr	r3, [r2, #0]
 800b8d4:	1c58      	adds	r0, r3, #1
 800b8d6:	6010      	str	r0, [r2, #0]
 800b8d8:	7019      	strb	r1, [r3, #0]
 800b8da:	4608      	mov	r0, r1
 800b8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <__sfputs_r>:
 800b8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	18d5      	adds	r5, r2, r3
 800b8ec:	42ac      	cmp	r4, r5
 800b8ee:	d101      	bne.n	800b8f4 <__sfputs_r+0x12>
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e007      	b.n	800b904 <__sfputs_r+0x22>
 800b8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f8:	463a      	mov	r2, r7
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ffda 	bl	800b8b4 <__sfputc_r>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d1f3      	bne.n	800b8ec <__sfputs_r+0xa>
 800b904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b908 <_vfiprintf_r>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	460d      	mov	r5, r1
 800b90e:	b09d      	sub	sp, #116	; 0x74
 800b910:	4614      	mov	r4, r2
 800b912:	4698      	mov	r8, r3
 800b914:	4606      	mov	r6, r0
 800b916:	b118      	cbz	r0, 800b920 <_vfiprintf_r+0x18>
 800b918:	6983      	ldr	r3, [r0, #24]
 800b91a:	b90b      	cbnz	r3, 800b920 <_vfiprintf_r+0x18>
 800b91c:	f000 fb06 	bl	800bf2c <__sinit>
 800b920:	4b89      	ldr	r3, [pc, #548]	; (800bb48 <_vfiprintf_r+0x240>)
 800b922:	429d      	cmp	r5, r3
 800b924:	d11b      	bne.n	800b95e <_vfiprintf_r+0x56>
 800b926:	6875      	ldr	r5, [r6, #4]
 800b928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x32>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x32>
 800b934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b936:	f7ff ff72 	bl	800b81e <__retarget_lock_acquire_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	071b      	lsls	r3, r3, #28
 800b93e:	d501      	bpl.n	800b944 <_vfiprintf_r+0x3c>
 800b940:	692b      	ldr	r3, [r5, #16]
 800b942:	b9eb      	cbnz	r3, 800b980 <_vfiprintf_r+0x78>
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f000 f960 	bl	800bc0c <__swsetup_r>
 800b94c:	b1c0      	cbz	r0, 800b980 <_vfiprintf_r+0x78>
 800b94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b950:	07dc      	lsls	r4, r3, #31
 800b952:	d50e      	bpl.n	800b972 <_vfiprintf_r+0x6a>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b01d      	add	sp, #116	; 0x74
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	4b7b      	ldr	r3, [pc, #492]	; (800bb4c <_vfiprintf_r+0x244>)
 800b960:	429d      	cmp	r5, r3
 800b962:	d101      	bne.n	800b968 <_vfiprintf_r+0x60>
 800b964:	68b5      	ldr	r5, [r6, #8]
 800b966:	e7df      	b.n	800b928 <_vfiprintf_r+0x20>
 800b968:	4b79      	ldr	r3, [pc, #484]	; (800bb50 <_vfiprintf_r+0x248>)
 800b96a:	429d      	cmp	r5, r3
 800b96c:	bf08      	it	eq
 800b96e:	68f5      	ldreq	r5, [r6, #12]
 800b970:	e7da      	b.n	800b928 <_vfiprintf_r+0x20>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	0598      	lsls	r0, r3, #22
 800b976:	d4ed      	bmi.n	800b954 <_vfiprintf_r+0x4c>
 800b978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b97a:	f7ff ff51 	bl	800b820 <__retarget_lock_release_recursive>
 800b97e:	e7e9      	b.n	800b954 <_vfiprintf_r+0x4c>
 800b980:	2300      	movs	r3, #0
 800b982:	9309      	str	r3, [sp, #36]	; 0x24
 800b984:	2320      	movs	r3, #32
 800b986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b98a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b98e:	2330      	movs	r3, #48	; 0x30
 800b990:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb54 <_vfiprintf_r+0x24c>
 800b994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b998:	f04f 0901 	mov.w	r9, #1
 800b99c:	4623      	mov	r3, r4
 800b99e:	469a      	mov	sl, r3
 800b9a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a4:	b10a      	cbz	r2, 800b9aa <_vfiprintf_r+0xa2>
 800b9a6:	2a25      	cmp	r2, #37	; 0x25
 800b9a8:	d1f9      	bne.n	800b99e <_vfiprintf_r+0x96>
 800b9aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ae:	d00b      	beq.n	800b9c8 <_vfiprintf_r+0xc0>
 800b9b0:	465b      	mov	r3, fp
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7ff ff93 	bl	800b8e2 <__sfputs_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	f000 80aa 	beq.w	800bb16 <_vfiprintf_r+0x20e>
 800b9c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9c4:	445a      	add	r2, fp
 800b9c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80a2 	beq.w	800bb16 <_vfiprintf_r+0x20e>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9dc:	f10a 0a01 	add.w	sl, sl, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	9307      	str	r3, [sp, #28]
 800b9e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ea:	4654      	mov	r4, sl
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f2:	4858      	ldr	r0, [pc, #352]	; (800bb54 <_vfiprintf_r+0x24c>)
 800b9f4:	f7f4 fbfc 	bl	80001f0 <memchr>
 800b9f8:	9a04      	ldr	r2, [sp, #16]
 800b9fa:	b9d8      	cbnz	r0, 800ba34 <_vfiprintf_r+0x12c>
 800b9fc:	06d1      	lsls	r1, r2, #27
 800b9fe:	bf44      	itt	mi
 800ba00:	2320      	movmi	r3, #32
 800ba02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba06:	0713      	lsls	r3, r2, #28
 800ba08:	bf44      	itt	mi
 800ba0a:	232b      	movmi	r3, #43	; 0x2b
 800ba0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba10:	f89a 3000 	ldrb.w	r3, [sl]
 800ba14:	2b2a      	cmp	r3, #42	; 0x2a
 800ba16:	d015      	beq.n	800ba44 <_vfiprintf_r+0x13c>
 800ba18:	9a07      	ldr	r2, [sp, #28]
 800ba1a:	4654      	mov	r4, sl
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	f04f 0c0a 	mov.w	ip, #10
 800ba22:	4621      	mov	r1, r4
 800ba24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba28:	3b30      	subs	r3, #48	; 0x30
 800ba2a:	2b09      	cmp	r3, #9
 800ba2c:	d94e      	bls.n	800bacc <_vfiprintf_r+0x1c4>
 800ba2e:	b1b0      	cbz	r0, 800ba5e <_vfiprintf_r+0x156>
 800ba30:	9207      	str	r2, [sp, #28]
 800ba32:	e014      	b.n	800ba5e <_vfiprintf_r+0x156>
 800ba34:	eba0 0308 	sub.w	r3, r0, r8
 800ba38:	fa09 f303 	lsl.w	r3, r9, r3
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	46a2      	mov	sl, r4
 800ba42:	e7d2      	b.n	800b9ea <_vfiprintf_r+0xe2>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	1d19      	adds	r1, r3, #4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	9103      	str	r1, [sp, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfbb      	ittet	lt
 800ba50:	425b      	neglt	r3, r3
 800ba52:	f042 0202 	orrlt.w	r2, r2, #2
 800ba56:	9307      	strge	r3, [sp, #28]
 800ba58:	9307      	strlt	r3, [sp, #28]
 800ba5a:	bfb8      	it	lt
 800ba5c:	9204      	strlt	r2, [sp, #16]
 800ba5e:	7823      	ldrb	r3, [r4, #0]
 800ba60:	2b2e      	cmp	r3, #46	; 0x2e
 800ba62:	d10c      	bne.n	800ba7e <_vfiprintf_r+0x176>
 800ba64:	7863      	ldrb	r3, [r4, #1]
 800ba66:	2b2a      	cmp	r3, #42	; 0x2a
 800ba68:	d135      	bne.n	800bad6 <_vfiprintf_r+0x1ce>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	1d1a      	adds	r2, r3, #4
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	9203      	str	r2, [sp, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	bfb8      	it	lt
 800ba76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba7a:	3402      	adds	r4, #2
 800ba7c:	9305      	str	r3, [sp, #20]
 800ba7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb64 <_vfiprintf_r+0x25c>
 800ba82:	7821      	ldrb	r1, [r4, #0]
 800ba84:	2203      	movs	r2, #3
 800ba86:	4650      	mov	r0, sl
 800ba88:	f7f4 fbb2 	bl	80001f0 <memchr>
 800ba8c:	b140      	cbz	r0, 800baa0 <_vfiprintf_r+0x198>
 800ba8e:	2340      	movs	r3, #64	; 0x40
 800ba90:	eba0 000a 	sub.w	r0, r0, sl
 800ba94:	fa03 f000 	lsl.w	r0, r3, r0
 800ba98:	9b04      	ldr	r3, [sp, #16]
 800ba9a:	4303      	orrs	r3, r0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	482c      	ldr	r0, [pc, #176]	; (800bb58 <_vfiprintf_r+0x250>)
 800baa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baaa:	2206      	movs	r2, #6
 800baac:	f7f4 fba0 	bl	80001f0 <memchr>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d03f      	beq.n	800bb34 <_vfiprintf_r+0x22c>
 800bab4:	4b29      	ldr	r3, [pc, #164]	; (800bb5c <_vfiprintf_r+0x254>)
 800bab6:	bb1b      	cbnz	r3, 800bb00 <_vfiprintf_r+0x1f8>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	3307      	adds	r3, #7
 800babc:	f023 0307 	bic.w	r3, r3, #7
 800bac0:	3308      	adds	r3, #8
 800bac2:	9303      	str	r3, [sp, #12]
 800bac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac6:	443b      	add	r3, r7
 800bac8:	9309      	str	r3, [sp, #36]	; 0x24
 800baca:	e767      	b.n	800b99c <_vfiprintf_r+0x94>
 800bacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad0:	460c      	mov	r4, r1
 800bad2:	2001      	movs	r0, #1
 800bad4:	e7a5      	b.n	800ba22 <_vfiprintf_r+0x11a>
 800bad6:	2300      	movs	r3, #0
 800bad8:	3401      	adds	r4, #1
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	4619      	mov	r1, r3
 800bade:	f04f 0c0a 	mov.w	ip, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae8:	3a30      	subs	r2, #48	; 0x30
 800baea:	2a09      	cmp	r2, #9
 800baec:	d903      	bls.n	800baf6 <_vfiprintf_r+0x1ee>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0c5      	beq.n	800ba7e <_vfiprintf_r+0x176>
 800baf2:	9105      	str	r1, [sp, #20]
 800baf4:	e7c3      	b.n	800ba7e <_vfiprintf_r+0x176>
 800baf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bafa:	4604      	mov	r4, r0
 800bafc:	2301      	movs	r3, #1
 800bafe:	e7f0      	b.n	800bae2 <_vfiprintf_r+0x1da>
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	462a      	mov	r2, r5
 800bb06:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <_vfiprintf_r+0x258>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7fc f922 	bl	8007d54 <_printf_float>
 800bb10:	4607      	mov	r7, r0
 800bb12:	1c78      	adds	r0, r7, #1
 800bb14:	d1d6      	bne.n	800bac4 <_vfiprintf_r+0x1bc>
 800bb16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb18:	07d9      	lsls	r1, r3, #31
 800bb1a:	d405      	bmi.n	800bb28 <_vfiprintf_r+0x220>
 800bb1c:	89ab      	ldrh	r3, [r5, #12]
 800bb1e:	059a      	lsls	r2, r3, #22
 800bb20:	d402      	bmi.n	800bb28 <_vfiprintf_r+0x220>
 800bb22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb24:	f7ff fe7c 	bl	800b820 <__retarget_lock_release_recursive>
 800bb28:	89ab      	ldrh	r3, [r5, #12]
 800bb2a:	065b      	lsls	r3, r3, #25
 800bb2c:	f53f af12 	bmi.w	800b954 <_vfiprintf_r+0x4c>
 800bb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb32:	e711      	b.n	800b958 <_vfiprintf_r+0x50>
 800bb34:	ab03      	add	r3, sp, #12
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	462a      	mov	r2, r5
 800bb3a:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <_vfiprintf_r+0x258>)
 800bb3c:	a904      	add	r1, sp, #16
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7fc fbac 	bl	800829c <_printf_i>
 800bb44:	e7e4      	b.n	800bb10 <_vfiprintf_r+0x208>
 800bb46:	bf00      	nop
 800bb48:	0800c7f4 	.word	0x0800c7f4
 800bb4c:	0800c814 	.word	0x0800c814
 800bb50:	0800c7d4 	.word	0x0800c7d4
 800bb54:	0800c784 	.word	0x0800c784
 800bb58:	0800c78e 	.word	0x0800c78e
 800bb5c:	08007d55 	.word	0x08007d55
 800bb60:	0800b8e3 	.word	0x0800b8e3
 800bb64:	0800c78a 	.word	0x0800c78a

0800bb68 <__swbuf_r>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	460e      	mov	r6, r1
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b118      	cbz	r0, 800bb7a <__swbuf_r+0x12>
 800bb72:	6983      	ldr	r3, [r0, #24]
 800bb74:	b90b      	cbnz	r3, 800bb7a <__swbuf_r+0x12>
 800bb76:	f000 f9d9 	bl	800bf2c <__sinit>
 800bb7a:	4b21      	ldr	r3, [pc, #132]	; (800bc00 <__swbuf_r+0x98>)
 800bb7c:	429c      	cmp	r4, r3
 800bb7e:	d12b      	bne.n	800bbd8 <__swbuf_r+0x70>
 800bb80:	686c      	ldr	r4, [r5, #4]
 800bb82:	69a3      	ldr	r3, [r4, #24]
 800bb84:	60a3      	str	r3, [r4, #8]
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	071a      	lsls	r2, r3, #28
 800bb8a:	d52f      	bpl.n	800bbec <__swbuf_r+0x84>
 800bb8c:	6923      	ldr	r3, [r4, #16]
 800bb8e:	b36b      	cbz	r3, 800bbec <__swbuf_r+0x84>
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	6820      	ldr	r0, [r4, #0]
 800bb94:	1ac0      	subs	r0, r0, r3
 800bb96:	6963      	ldr	r3, [r4, #20]
 800bb98:	b2f6      	uxtb	r6, r6
 800bb9a:	4283      	cmp	r3, r0
 800bb9c:	4637      	mov	r7, r6
 800bb9e:	dc04      	bgt.n	800bbaa <__swbuf_r+0x42>
 800bba0:	4621      	mov	r1, r4
 800bba2:	4628      	mov	r0, r5
 800bba4:	f000 f92e 	bl	800be04 <_fflush_r>
 800bba8:	bb30      	cbnz	r0, 800bbf8 <__swbuf_r+0x90>
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	6022      	str	r2, [r4, #0]
 800bbb6:	701e      	strb	r6, [r3, #0]
 800bbb8:	6963      	ldr	r3, [r4, #20]
 800bbba:	3001      	adds	r0, #1
 800bbbc:	4283      	cmp	r3, r0
 800bbbe:	d004      	beq.n	800bbca <__swbuf_r+0x62>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	07db      	lsls	r3, r3, #31
 800bbc4:	d506      	bpl.n	800bbd4 <__swbuf_r+0x6c>
 800bbc6:	2e0a      	cmp	r6, #10
 800bbc8:	d104      	bne.n	800bbd4 <__swbuf_r+0x6c>
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f000 f919 	bl	800be04 <_fflush_r>
 800bbd2:	b988      	cbnz	r0, 800bbf8 <__swbuf_r+0x90>
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <__swbuf_r+0x9c>)
 800bbda:	429c      	cmp	r4, r3
 800bbdc:	d101      	bne.n	800bbe2 <__swbuf_r+0x7a>
 800bbde:	68ac      	ldr	r4, [r5, #8]
 800bbe0:	e7cf      	b.n	800bb82 <__swbuf_r+0x1a>
 800bbe2:	4b09      	ldr	r3, [pc, #36]	; (800bc08 <__swbuf_r+0xa0>)
 800bbe4:	429c      	cmp	r4, r3
 800bbe6:	bf08      	it	eq
 800bbe8:	68ec      	ldreq	r4, [r5, #12]
 800bbea:	e7ca      	b.n	800bb82 <__swbuf_r+0x1a>
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f80c 	bl	800bc0c <__swsetup_r>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0cb      	beq.n	800bb90 <__swbuf_r+0x28>
 800bbf8:	f04f 37ff 	mov.w	r7, #4294967295
 800bbfc:	e7ea      	b.n	800bbd4 <__swbuf_r+0x6c>
 800bbfe:	bf00      	nop
 800bc00:	0800c7f4 	.word	0x0800c7f4
 800bc04:	0800c814 	.word	0x0800c814
 800bc08:	0800c7d4 	.word	0x0800c7d4

0800bc0c <__swsetup_r>:
 800bc0c:	4b32      	ldr	r3, [pc, #200]	; (800bcd8 <__swsetup_r+0xcc>)
 800bc0e:	b570      	push	{r4, r5, r6, lr}
 800bc10:	681d      	ldr	r5, [r3, #0]
 800bc12:	4606      	mov	r6, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	b125      	cbz	r5, 800bc22 <__swsetup_r+0x16>
 800bc18:	69ab      	ldr	r3, [r5, #24]
 800bc1a:	b913      	cbnz	r3, 800bc22 <__swsetup_r+0x16>
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f000 f985 	bl	800bf2c <__sinit>
 800bc22:	4b2e      	ldr	r3, [pc, #184]	; (800bcdc <__swsetup_r+0xd0>)
 800bc24:	429c      	cmp	r4, r3
 800bc26:	d10f      	bne.n	800bc48 <__swsetup_r+0x3c>
 800bc28:	686c      	ldr	r4, [r5, #4]
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc30:	0719      	lsls	r1, r3, #28
 800bc32:	d42c      	bmi.n	800bc8e <__swsetup_r+0x82>
 800bc34:	06dd      	lsls	r5, r3, #27
 800bc36:	d411      	bmi.n	800bc5c <__swsetup_r+0x50>
 800bc38:	2309      	movs	r3, #9
 800bc3a:	6033      	str	r3, [r6, #0]
 800bc3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	f04f 30ff 	mov.w	r0, #4294967295
 800bc46:	e03e      	b.n	800bcc6 <__swsetup_r+0xba>
 800bc48:	4b25      	ldr	r3, [pc, #148]	; (800bce0 <__swsetup_r+0xd4>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d101      	bne.n	800bc52 <__swsetup_r+0x46>
 800bc4e:	68ac      	ldr	r4, [r5, #8]
 800bc50:	e7eb      	b.n	800bc2a <__swsetup_r+0x1e>
 800bc52:	4b24      	ldr	r3, [pc, #144]	; (800bce4 <__swsetup_r+0xd8>)
 800bc54:	429c      	cmp	r4, r3
 800bc56:	bf08      	it	eq
 800bc58:	68ec      	ldreq	r4, [r5, #12]
 800bc5a:	e7e6      	b.n	800bc2a <__swsetup_r+0x1e>
 800bc5c:	0758      	lsls	r0, r3, #29
 800bc5e:	d512      	bpl.n	800bc86 <__swsetup_r+0x7a>
 800bc60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc62:	b141      	cbz	r1, 800bc76 <__swsetup_r+0x6a>
 800bc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc68:	4299      	cmp	r1, r3
 800bc6a:	d002      	beq.n	800bc72 <__swsetup_r+0x66>
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7fb fef1 	bl	8007a54 <_free_r>
 800bc72:	2300      	movs	r3, #0
 800bc74:	6363      	str	r3, [r4, #52]	; 0x34
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc7c:	81a3      	strh	r3, [r4, #12]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	f043 0308 	orr.w	r3, r3, #8
 800bc8c:	81a3      	strh	r3, [r4, #12]
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	b94b      	cbnz	r3, 800bca6 <__swsetup_r+0x9a>
 800bc92:	89a3      	ldrh	r3, [r4, #12]
 800bc94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc9c:	d003      	beq.n	800bca6 <__swsetup_r+0x9a>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4630      	mov	r0, r6
 800bca2:	f000 fa05 	bl	800c0b0 <__smakebuf_r>
 800bca6:	89a0      	ldrh	r0, [r4, #12]
 800bca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcac:	f010 0301 	ands.w	r3, r0, #1
 800bcb0:	d00a      	beq.n	800bcc8 <__swsetup_r+0xbc>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6963      	ldr	r3, [r4, #20]
 800bcb8:	425b      	negs	r3, r3
 800bcba:	61a3      	str	r3, [r4, #24]
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	b943      	cbnz	r3, 800bcd2 <__swsetup_r+0xc6>
 800bcc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcc4:	d1ba      	bne.n	800bc3c <__swsetup_r+0x30>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	0781      	lsls	r1, r0, #30
 800bcca:	bf58      	it	pl
 800bccc:	6963      	ldrpl	r3, [r4, #20]
 800bcce:	60a3      	str	r3, [r4, #8]
 800bcd0:	e7f4      	b.n	800bcbc <__swsetup_r+0xb0>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e7f7      	b.n	800bcc6 <__swsetup_r+0xba>
 800bcd6:	bf00      	nop
 800bcd8:	200000fc 	.word	0x200000fc
 800bcdc:	0800c7f4 	.word	0x0800c7f4
 800bce0:	0800c814 	.word	0x0800c814
 800bce4:	0800c7d4 	.word	0x0800c7d4

0800bce8 <abort>:
 800bce8:	b508      	push	{r3, lr}
 800bcea:	2006      	movs	r0, #6
 800bcec:	f000 fa50 	bl	800c190 <raise>
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	f7f5 fadf 	bl	80012b4 <_exit>
	...

0800bcf8 <__sflush_r>:
 800bcf8:	898a      	ldrh	r2, [r1, #12]
 800bcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	4605      	mov	r5, r0
 800bd00:	0710      	lsls	r0, r2, #28
 800bd02:	460c      	mov	r4, r1
 800bd04:	d458      	bmi.n	800bdb8 <__sflush_r+0xc0>
 800bd06:	684b      	ldr	r3, [r1, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc05      	bgt.n	800bd18 <__sflush_r+0x20>
 800bd0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	dc02      	bgt.n	800bd18 <__sflush_r+0x20>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d0f9      	beq.n	800bd12 <__sflush_r+0x1a>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd24:	682f      	ldr	r7, [r5, #0]
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	d032      	beq.n	800bd90 <__sflush_r+0x98>
 800bd2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	075a      	lsls	r2, r3, #29
 800bd30:	d505      	bpl.n	800bd3e <__sflush_r+0x46>
 800bd32:	6863      	ldr	r3, [r4, #4]
 800bd34:	1ac0      	subs	r0, r0, r3
 800bd36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd38:	b10b      	cbz	r3, 800bd3e <__sflush_r+0x46>
 800bd3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd3c:	1ac0      	subs	r0, r0, r3
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4602      	mov	r2, r0
 800bd42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd44:	6a21      	ldr	r1, [r4, #32]
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b0      	blx	r6
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	d106      	bne.n	800bd5e <__sflush_r+0x66>
 800bd50:	6829      	ldr	r1, [r5, #0]
 800bd52:	291d      	cmp	r1, #29
 800bd54:	d82c      	bhi.n	800bdb0 <__sflush_r+0xb8>
 800bd56:	4a2a      	ldr	r2, [pc, #168]	; (800be00 <__sflush_r+0x108>)
 800bd58:	40ca      	lsrs	r2, r1
 800bd5a:	07d6      	lsls	r6, r2, #31
 800bd5c:	d528      	bpl.n	800bdb0 <__sflush_r+0xb8>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6062      	str	r2, [r4, #4]
 800bd62:	04d9      	lsls	r1, r3, #19
 800bd64:	6922      	ldr	r2, [r4, #16]
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	d504      	bpl.n	800bd74 <__sflush_r+0x7c>
 800bd6a:	1c42      	adds	r2, r0, #1
 800bd6c:	d101      	bne.n	800bd72 <__sflush_r+0x7a>
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	b903      	cbnz	r3, 800bd74 <__sflush_r+0x7c>
 800bd72:	6560      	str	r0, [r4, #84]	; 0x54
 800bd74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd76:	602f      	str	r7, [r5, #0]
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d0ca      	beq.n	800bd12 <__sflush_r+0x1a>
 800bd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <__sflush_r+0x92>
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7fb fe65 	bl	8007a54 <_free_r>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd8e:	e7c1      	b.n	800bd14 <__sflush_r+0x1c>
 800bd90:	6a21      	ldr	r1, [r4, #32]
 800bd92:	2301      	movs	r3, #1
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	1c41      	adds	r1, r0, #1
 800bd9a:	d1c7      	bne.n	800bd2c <__sflush_r+0x34>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0c4      	beq.n	800bd2c <__sflush_r+0x34>
 800bda2:	2b1d      	cmp	r3, #29
 800bda4:	d001      	beq.n	800bdaa <__sflush_r+0xb2>
 800bda6:	2b16      	cmp	r3, #22
 800bda8:	d101      	bne.n	800bdae <__sflush_r+0xb6>
 800bdaa:	602f      	str	r7, [r5, #0]
 800bdac:	e7b1      	b.n	800bd12 <__sflush_r+0x1a>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	e7ad      	b.n	800bd14 <__sflush_r+0x1c>
 800bdb8:	690f      	ldr	r7, [r1, #16]
 800bdba:	2f00      	cmp	r7, #0
 800bdbc:	d0a9      	beq.n	800bd12 <__sflush_r+0x1a>
 800bdbe:	0793      	lsls	r3, r2, #30
 800bdc0:	680e      	ldr	r6, [r1, #0]
 800bdc2:	bf08      	it	eq
 800bdc4:	694b      	ldreq	r3, [r1, #20]
 800bdc6:	600f      	str	r7, [r1, #0]
 800bdc8:	bf18      	it	ne
 800bdca:	2300      	movne	r3, #0
 800bdcc:	eba6 0807 	sub.w	r8, r6, r7
 800bdd0:	608b      	str	r3, [r1, #8]
 800bdd2:	f1b8 0f00 	cmp.w	r8, #0
 800bdd6:	dd9c      	ble.n	800bd12 <__sflush_r+0x1a>
 800bdd8:	6a21      	ldr	r1, [r4, #32]
 800bdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bddc:	4643      	mov	r3, r8
 800bdde:	463a      	mov	r2, r7
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b0      	blx	r6
 800bde4:	2800      	cmp	r0, #0
 800bde6:	dc06      	bgt.n	800bdf6 <__sflush_r+0xfe>
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	e78e      	b.n	800bd14 <__sflush_r+0x1c>
 800bdf6:	4407      	add	r7, r0
 800bdf8:	eba8 0800 	sub.w	r8, r8, r0
 800bdfc:	e7e9      	b.n	800bdd2 <__sflush_r+0xda>
 800bdfe:	bf00      	nop
 800be00:	20400001 	.word	0x20400001

0800be04 <_fflush_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	690b      	ldr	r3, [r1, #16]
 800be08:	4605      	mov	r5, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	b913      	cbnz	r3, 800be14 <_fflush_r+0x10>
 800be0e:	2500      	movs	r5, #0
 800be10:	4628      	mov	r0, r5
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	b118      	cbz	r0, 800be1e <_fflush_r+0x1a>
 800be16:	6983      	ldr	r3, [r0, #24]
 800be18:	b90b      	cbnz	r3, 800be1e <_fflush_r+0x1a>
 800be1a:	f000 f887 	bl	800bf2c <__sinit>
 800be1e:	4b14      	ldr	r3, [pc, #80]	; (800be70 <_fflush_r+0x6c>)
 800be20:	429c      	cmp	r4, r3
 800be22:	d11b      	bne.n	800be5c <_fflush_r+0x58>
 800be24:	686c      	ldr	r4, [r5, #4]
 800be26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0ef      	beq.n	800be0e <_fflush_r+0xa>
 800be2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be30:	07d0      	lsls	r0, r2, #31
 800be32:	d404      	bmi.n	800be3e <_fflush_r+0x3a>
 800be34:	0599      	lsls	r1, r3, #22
 800be36:	d402      	bmi.n	800be3e <_fflush_r+0x3a>
 800be38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be3a:	f7ff fcf0 	bl	800b81e <__retarget_lock_acquire_recursive>
 800be3e:	4628      	mov	r0, r5
 800be40:	4621      	mov	r1, r4
 800be42:	f7ff ff59 	bl	800bcf8 <__sflush_r>
 800be46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be48:	07da      	lsls	r2, r3, #31
 800be4a:	4605      	mov	r5, r0
 800be4c:	d4e0      	bmi.n	800be10 <_fflush_r+0xc>
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	059b      	lsls	r3, r3, #22
 800be52:	d4dd      	bmi.n	800be10 <_fflush_r+0xc>
 800be54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be56:	f7ff fce3 	bl	800b820 <__retarget_lock_release_recursive>
 800be5a:	e7d9      	b.n	800be10 <_fflush_r+0xc>
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_fflush_r+0x70>)
 800be5e:	429c      	cmp	r4, r3
 800be60:	d101      	bne.n	800be66 <_fflush_r+0x62>
 800be62:	68ac      	ldr	r4, [r5, #8]
 800be64:	e7df      	b.n	800be26 <_fflush_r+0x22>
 800be66:	4b04      	ldr	r3, [pc, #16]	; (800be78 <_fflush_r+0x74>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	bf08      	it	eq
 800be6c:	68ec      	ldreq	r4, [r5, #12]
 800be6e:	e7da      	b.n	800be26 <_fflush_r+0x22>
 800be70:	0800c7f4 	.word	0x0800c7f4
 800be74:	0800c814 	.word	0x0800c814
 800be78:	0800c7d4 	.word	0x0800c7d4

0800be7c <std>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b510      	push	{r4, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	e9c0 3300 	strd	r3, r3, [r0]
 800be86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be8a:	6083      	str	r3, [r0, #8]
 800be8c:	8181      	strh	r1, [r0, #12]
 800be8e:	6643      	str	r3, [r0, #100]	; 0x64
 800be90:	81c2      	strh	r2, [r0, #14]
 800be92:	6183      	str	r3, [r0, #24]
 800be94:	4619      	mov	r1, r3
 800be96:	2208      	movs	r2, #8
 800be98:	305c      	adds	r0, #92	; 0x5c
 800be9a:	f7fb fdd3 	bl	8007a44 <memset>
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <std+0x38>)
 800bea0:	6263      	str	r3, [r4, #36]	; 0x24
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <std+0x3c>)
 800bea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x40>)
 800bea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x44>)
 800beac:	6224      	str	r4, [r4, #32]
 800beae:	6323      	str	r3, [r4, #48]	; 0x30
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	0800c1c9 	.word	0x0800c1c9
 800beb8:	0800c1eb 	.word	0x0800c1eb
 800bebc:	0800c223 	.word	0x0800c223
 800bec0:	0800c247 	.word	0x0800c247

0800bec4 <_cleanup_r>:
 800bec4:	4901      	ldr	r1, [pc, #4]	; (800becc <_cleanup_r+0x8>)
 800bec6:	f000 b8af 	b.w	800c028 <_fwalk_reent>
 800beca:	bf00      	nop
 800becc:	0800be05 	.word	0x0800be05

0800bed0 <__sfmoreglue>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	2268      	movs	r2, #104	; 0x68
 800bed4:	1e4d      	subs	r5, r1, #1
 800bed6:	4355      	muls	r5, r2
 800bed8:	460e      	mov	r6, r1
 800beda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bede:	f7fb fe25 	bl	8007b2c <_malloc_r>
 800bee2:	4604      	mov	r4, r0
 800bee4:	b140      	cbz	r0, 800bef8 <__sfmoreglue+0x28>
 800bee6:	2100      	movs	r1, #0
 800bee8:	e9c0 1600 	strd	r1, r6, [r0]
 800beec:	300c      	adds	r0, #12
 800beee:	60a0      	str	r0, [r4, #8]
 800bef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bef4:	f7fb fda6 	bl	8007a44 <memset>
 800bef8:	4620      	mov	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}

0800befc <__sfp_lock_acquire>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__sfp_lock_acquire+0x8>)
 800befe:	f7ff bc8e 	b.w	800b81e <__retarget_lock_acquire_recursive>
 800bf02:	bf00      	nop
 800bf04:	2000170d 	.word	0x2000170d

0800bf08 <__sfp_lock_release>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sfp_lock_release+0x8>)
 800bf0a:	f7ff bc89 	b.w	800b820 <__retarget_lock_release_recursive>
 800bf0e:	bf00      	nop
 800bf10:	2000170d 	.word	0x2000170d

0800bf14 <__sinit_lock_acquire>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__sinit_lock_acquire+0x8>)
 800bf16:	f7ff bc82 	b.w	800b81e <__retarget_lock_acquire_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	2000170e 	.word	0x2000170e

0800bf20 <__sinit_lock_release>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__sinit_lock_release+0x8>)
 800bf22:	f7ff bc7d 	b.w	800b820 <__retarget_lock_release_recursive>
 800bf26:	bf00      	nop
 800bf28:	2000170e 	.word	0x2000170e

0800bf2c <__sinit>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	4604      	mov	r4, r0
 800bf30:	f7ff fff0 	bl	800bf14 <__sinit_lock_acquire>
 800bf34:	69a3      	ldr	r3, [r4, #24]
 800bf36:	b11b      	cbz	r3, 800bf40 <__sinit+0x14>
 800bf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3c:	f7ff bff0 	b.w	800bf20 <__sinit_lock_release>
 800bf40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf44:	6523      	str	r3, [r4, #80]	; 0x50
 800bf46:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <__sinit+0x68>)
 800bf48:	4a13      	ldr	r2, [pc, #76]	; (800bf98 <__sinit+0x6c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	bf04      	itt	eq
 800bf52:	2301      	moveq	r3, #1
 800bf54:	61a3      	streq	r3, [r4, #24]
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 f820 	bl	800bf9c <__sfp>
 800bf5c:	6060      	str	r0, [r4, #4]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f81c 	bl	800bf9c <__sfp>
 800bf64:	60a0      	str	r0, [r4, #8]
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f818 	bl	800bf9c <__sfp>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	60e0      	str	r0, [r4, #12]
 800bf70:	2104      	movs	r1, #4
 800bf72:	6860      	ldr	r0, [r4, #4]
 800bf74:	f7ff ff82 	bl	800be7c <std>
 800bf78:	68a0      	ldr	r0, [r4, #8]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2109      	movs	r1, #9
 800bf7e:	f7ff ff7d 	bl	800be7c <std>
 800bf82:	68e0      	ldr	r0, [r4, #12]
 800bf84:	2202      	movs	r2, #2
 800bf86:	2112      	movs	r1, #18
 800bf88:	f7ff ff78 	bl	800be7c <std>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	61a3      	str	r3, [r4, #24]
 800bf90:	e7d2      	b.n	800bf38 <__sinit+0xc>
 800bf92:	bf00      	nop
 800bf94:	0800c390 	.word	0x0800c390
 800bf98:	0800bec5 	.word	0x0800bec5

0800bf9c <__sfp>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	f7ff ffac 	bl	800befc <__sfp_lock_acquire>
 800bfa4:	4b1e      	ldr	r3, [pc, #120]	; (800c020 <__sfp+0x84>)
 800bfa6:	681e      	ldr	r6, [r3, #0]
 800bfa8:	69b3      	ldr	r3, [r6, #24]
 800bfaa:	b913      	cbnz	r3, 800bfb2 <__sfp+0x16>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ffbd 	bl	800bf2c <__sinit>
 800bfb2:	3648      	adds	r6, #72	; 0x48
 800bfb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	d503      	bpl.n	800bfc4 <__sfp+0x28>
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	b30b      	cbz	r3, 800c004 <__sfp+0x68>
 800bfc0:	6836      	ldr	r6, [r6, #0]
 800bfc2:	e7f7      	b.n	800bfb4 <__sfp+0x18>
 800bfc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfc8:	b9d5      	cbnz	r5, 800c000 <__sfp+0x64>
 800bfca:	4b16      	ldr	r3, [pc, #88]	; (800c024 <__sfp+0x88>)
 800bfcc:	60e3      	str	r3, [r4, #12]
 800bfce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfd2:	6665      	str	r5, [r4, #100]	; 0x64
 800bfd4:	f7ff fc22 	bl	800b81c <__retarget_lock_init_recursive>
 800bfd8:	f7ff ff96 	bl	800bf08 <__sfp_lock_release>
 800bfdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfe4:	6025      	str	r5, [r4, #0]
 800bfe6:	61a5      	str	r5, [r4, #24]
 800bfe8:	2208      	movs	r2, #8
 800bfea:	4629      	mov	r1, r5
 800bfec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bff0:	f7fb fd28 	bl	8007a44 <memset>
 800bff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bffc:	4620      	mov	r0, r4
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	3468      	adds	r4, #104	; 0x68
 800c002:	e7d9      	b.n	800bfb8 <__sfp+0x1c>
 800c004:	2104      	movs	r1, #4
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff62 	bl	800bed0 <__sfmoreglue>
 800c00c:	4604      	mov	r4, r0
 800c00e:	6030      	str	r0, [r6, #0]
 800c010:	2800      	cmp	r0, #0
 800c012:	d1d5      	bne.n	800bfc0 <__sfp+0x24>
 800c014:	f7ff ff78 	bl	800bf08 <__sfp_lock_release>
 800c018:	230c      	movs	r3, #12
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	e7ee      	b.n	800bffc <__sfp+0x60>
 800c01e:	bf00      	nop
 800c020:	0800c390 	.word	0x0800c390
 800c024:	ffff0001 	.word	0xffff0001

0800c028 <_fwalk_reent>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4606      	mov	r6, r0
 800c02e:	4688      	mov	r8, r1
 800c030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c034:	2700      	movs	r7, #0
 800c036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c03a:	f1b9 0901 	subs.w	r9, r9, #1
 800c03e:	d505      	bpl.n	800c04c <_fwalk_reent+0x24>
 800c040:	6824      	ldr	r4, [r4, #0]
 800c042:	2c00      	cmp	r4, #0
 800c044:	d1f7      	bne.n	800c036 <_fwalk_reent+0xe>
 800c046:	4638      	mov	r0, r7
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	89ab      	ldrh	r3, [r5, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d907      	bls.n	800c062 <_fwalk_reent+0x3a>
 800c052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c056:	3301      	adds	r3, #1
 800c058:	d003      	beq.n	800c062 <_fwalk_reent+0x3a>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	47c0      	blx	r8
 800c060:	4307      	orrs	r7, r0
 800c062:	3568      	adds	r5, #104	; 0x68
 800c064:	e7e9      	b.n	800c03a <_fwalk_reent+0x12>

0800c066 <__swhatbuf_r>:
 800c066:	b570      	push	{r4, r5, r6, lr}
 800c068:	460e      	mov	r6, r1
 800c06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06e:	2900      	cmp	r1, #0
 800c070:	b096      	sub	sp, #88	; 0x58
 800c072:	4614      	mov	r4, r2
 800c074:	461d      	mov	r5, r3
 800c076:	da08      	bge.n	800c08a <__swhatbuf_r+0x24>
 800c078:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	602a      	str	r2, [r5, #0]
 800c080:	061a      	lsls	r2, r3, #24
 800c082:	d410      	bmi.n	800c0a6 <__swhatbuf_r+0x40>
 800c084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c088:	e00e      	b.n	800c0a8 <__swhatbuf_r+0x42>
 800c08a:	466a      	mov	r2, sp
 800c08c:	f000 f902 	bl	800c294 <_fstat_r>
 800c090:	2800      	cmp	r0, #0
 800c092:	dbf1      	blt.n	800c078 <__swhatbuf_r+0x12>
 800c094:	9a01      	ldr	r2, [sp, #4]
 800c096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c09a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c09e:	425a      	negs	r2, r3
 800c0a0:	415a      	adcs	r2, r3
 800c0a2:	602a      	str	r2, [r5, #0]
 800c0a4:	e7ee      	b.n	800c084 <__swhatbuf_r+0x1e>
 800c0a6:	2340      	movs	r3, #64	; 0x40
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	b016      	add	sp, #88	; 0x58
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}

0800c0b0 <__smakebuf_r>:
 800c0b0:	898b      	ldrh	r3, [r1, #12]
 800c0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0b4:	079d      	lsls	r5, r3, #30
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	d507      	bpl.n	800c0cc <__smakebuf_r+0x1c>
 800c0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	6123      	str	r3, [r4, #16]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	6163      	str	r3, [r4, #20]
 800c0c8:	b002      	add	sp, #8
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	ab01      	add	r3, sp, #4
 800c0ce:	466a      	mov	r2, sp
 800c0d0:	f7ff ffc9 	bl	800c066 <__swhatbuf_r>
 800c0d4:	9900      	ldr	r1, [sp, #0]
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7fb fd27 	bl	8007b2c <_malloc_r>
 800c0de:	b948      	cbnz	r0, 800c0f4 <__smakebuf_r+0x44>
 800c0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e4:	059a      	lsls	r2, r3, #22
 800c0e6:	d4ef      	bmi.n	800c0c8 <__smakebuf_r+0x18>
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	f043 0302 	orr.w	r3, r3, #2
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	e7e3      	b.n	800c0bc <__smakebuf_r+0xc>
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <__smakebuf_r+0x7c>)
 800c0f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	6020      	str	r0, [r4, #0]
 800c0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	9b00      	ldr	r3, [sp, #0]
 800c104:	6163      	str	r3, [r4, #20]
 800c106:	9b01      	ldr	r3, [sp, #4]
 800c108:	6120      	str	r0, [r4, #16]
 800c10a:	b15b      	cbz	r3, 800c124 <__smakebuf_r+0x74>
 800c10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f8d1 	bl	800c2b8 <_isatty_r>
 800c116:	b128      	cbz	r0, 800c124 <__smakebuf_r+0x74>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	f023 0303 	bic.w	r3, r3, #3
 800c11e:	f043 0301 	orr.w	r3, r3, #1
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	89a0      	ldrh	r0, [r4, #12]
 800c126:	4305      	orrs	r5, r0
 800c128:	81a5      	strh	r5, [r4, #12]
 800c12a:	e7cd      	b.n	800c0c8 <__smakebuf_r+0x18>
 800c12c:	0800bec5 	.word	0x0800bec5

0800c130 <_malloc_usable_size_r>:
 800c130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c134:	1f18      	subs	r0, r3, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfbc      	itt	lt
 800c13a:	580b      	ldrlt	r3, [r1, r0]
 800c13c:	18c0      	addlt	r0, r0, r3
 800c13e:	4770      	bx	lr

0800c140 <_raise_r>:
 800c140:	291f      	cmp	r1, #31
 800c142:	b538      	push	{r3, r4, r5, lr}
 800c144:	4604      	mov	r4, r0
 800c146:	460d      	mov	r5, r1
 800c148:	d904      	bls.n	800c154 <_raise_r+0x14>
 800c14a:	2316      	movs	r3, #22
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c156:	b112      	cbz	r2, 800c15e <_raise_r+0x1e>
 800c158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c15c:	b94b      	cbnz	r3, 800c172 <_raise_r+0x32>
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 f830 	bl	800c1c4 <_getpid_r>
 800c164:	462a      	mov	r2, r5
 800c166:	4601      	mov	r1, r0
 800c168:	4620      	mov	r0, r4
 800c16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c16e:	f000 b817 	b.w	800c1a0 <_kill_r>
 800c172:	2b01      	cmp	r3, #1
 800c174:	d00a      	beq.n	800c18c <_raise_r+0x4c>
 800c176:	1c59      	adds	r1, r3, #1
 800c178:	d103      	bne.n	800c182 <_raise_r+0x42>
 800c17a:	2316      	movs	r3, #22
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	2001      	movs	r0, #1
 800c180:	e7e7      	b.n	800c152 <_raise_r+0x12>
 800c182:	2400      	movs	r4, #0
 800c184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c188:	4628      	mov	r0, r5
 800c18a:	4798      	blx	r3
 800c18c:	2000      	movs	r0, #0
 800c18e:	e7e0      	b.n	800c152 <_raise_r+0x12>

0800c190 <raise>:
 800c190:	4b02      	ldr	r3, [pc, #8]	; (800c19c <raise+0xc>)
 800c192:	4601      	mov	r1, r0
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f7ff bfd3 	b.w	800c140 <_raise_r>
 800c19a:	bf00      	nop
 800c19c:	200000fc 	.word	0x200000fc

0800c1a0 <_kill_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d07      	ldr	r5, [pc, #28]	; (800c1c0 <_kill_r+0x20>)
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	602b      	str	r3, [r5, #0]
 800c1ae:	f7f5 f871 	bl	8001294 <_kill>
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	d102      	bne.n	800c1bc <_kill_r+0x1c>
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	b103      	cbz	r3, 800c1bc <_kill_r+0x1c>
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	bd38      	pop	{r3, r4, r5, pc}
 800c1be:	bf00      	nop
 800c1c0:	20001708 	.word	0x20001708

0800c1c4 <_getpid_r>:
 800c1c4:	f7f5 b85e 	b.w	8001284 <_getpid>

0800c1c8 <__sread>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d0:	f000 f894 	bl	800c2fc <_read_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	bfab      	itete	ge
 800c1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1da:	89a3      	ldrhlt	r3, [r4, #12]
 800c1dc:	181b      	addge	r3, r3, r0
 800c1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1e2:	bfac      	ite	ge
 800c1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1e6:	81a3      	strhlt	r3, [r4, #12]
 800c1e8:	bd10      	pop	{r4, pc}

0800c1ea <__swrite>:
 800c1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ee:	461f      	mov	r7, r3
 800c1f0:	898b      	ldrh	r3, [r1, #12]
 800c1f2:	05db      	lsls	r3, r3, #23
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	d505      	bpl.n	800c208 <__swrite+0x1e>
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	2302      	movs	r3, #2
 800c202:	2200      	movs	r2, #0
 800c204:	f000 f868 	bl	800c2d8 <_lseek_r>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c212:	81a3      	strh	r3, [r4, #12]
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	4628      	mov	r0, r5
 800c21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	f000 b817 	b.w	800c250 <_write_r>

0800c222 <__sseek>:
 800c222:	b510      	push	{r4, lr}
 800c224:	460c      	mov	r4, r1
 800c226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22a:	f000 f855 	bl	800c2d8 <_lseek_r>
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	bf15      	itete	ne
 800c234:	6560      	strne	r0, [r4, #84]	; 0x54
 800c236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c23e:	81a3      	strheq	r3, [r4, #12]
 800c240:	bf18      	it	ne
 800c242:	81a3      	strhne	r3, [r4, #12]
 800c244:	bd10      	pop	{r4, pc}

0800c246 <__sclose>:
 800c246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24a:	f000 b813 	b.w	800c274 <_close_r>
	...

0800c250 <_write_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d07      	ldr	r5, [pc, #28]	; (800c270 <_write_r+0x20>)
 800c254:	4604      	mov	r4, r0
 800c256:	4608      	mov	r0, r1
 800c258:	4611      	mov	r1, r2
 800c25a:	2200      	movs	r2, #0
 800c25c:	602a      	str	r2, [r5, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	f7f5 f84f 	bl	8001302 <_write>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_write_r+0x1e>
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_write_r+0x1e>
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20001708 	.word	0x20001708

0800c274 <_close_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4d06      	ldr	r5, [pc, #24]	; (800c290 <_close_r+0x1c>)
 800c278:	2300      	movs	r3, #0
 800c27a:	4604      	mov	r4, r0
 800c27c:	4608      	mov	r0, r1
 800c27e:	602b      	str	r3, [r5, #0]
 800c280:	f7f5 f85b 	bl	800133a <_close>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_close_r+0x1a>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_close_r+0x1a>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	20001708 	.word	0x20001708

0800c294 <_fstat_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d07      	ldr	r5, [pc, #28]	; (800c2b4 <_fstat_r+0x20>)
 800c298:	2300      	movs	r3, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	4611      	mov	r1, r2
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	f7f5 f856 	bl	8001352 <_fstat>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	d102      	bne.n	800c2b0 <_fstat_r+0x1c>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	b103      	cbz	r3, 800c2b0 <_fstat_r+0x1c>
 800c2ae:	6023      	str	r3, [r4, #0]
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20001708 	.word	0x20001708

0800c2b8 <_isatty_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_isatty_r+0x1c>)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	f7f5 f855 	bl	8001372 <_isatty>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_isatty_r+0x1a>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_isatty_r+0x1a>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	20001708 	.word	0x20001708

0800c2d8 <_lseek_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4d07      	ldr	r5, [pc, #28]	; (800c2f8 <_lseek_r+0x20>)
 800c2dc:	4604      	mov	r4, r0
 800c2de:	4608      	mov	r0, r1
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	602a      	str	r2, [r5, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f7f5 f84e 	bl	8001388 <_lseek>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_lseek_r+0x1e>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_lseek_r+0x1e>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	20001708 	.word	0x20001708

0800c2fc <_read_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d07      	ldr	r5, [pc, #28]	; (800c31c <_read_r+0x20>)
 800c300:	4604      	mov	r4, r0
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	2200      	movs	r2, #0
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f7f4 ffdc 	bl	80012c8 <_read>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_read_r+0x1e>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_read_r+0x1e>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20001708 	.word	0x20001708

0800c320 <_init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

0800c32c <_fini>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr
